// Package sonarqube provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package sonarqube

import (
	"context"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	BasicAuthScopes = "BasicAuth.Scopes"
)

// ApiAlmIntegrationsImportGitlabProjectParams defines parameters for ApiAlmIntegrationsImportGitlabProject.
type ApiAlmIntegrationsImportGitlabProjectParams struct {
	// AlmSetting DevOps Platform setting key
	AlmSetting string `form:"almSetting" json:"almSetting"`

	// GitlabProjectId GitLab project ID
	GitlabProjectId string `form:"gitlabProjectId" json:"gitlabProjectId"`
}

// ApiAlmIntegrationsListAzureProjectsParams defines parameters for ApiAlmIntegrationsListAzureProjects.
type ApiAlmIntegrationsListAzureProjectsParams struct {
	// AlmSetting DevOps Platform setting key
	AlmSetting string `form:"almSetting" json:"almSetting"`
}

// ApiAlmIntegrationsListBitbucketserverProjectsParams defines parameters for ApiAlmIntegrationsListBitbucketserverProjects.
type ApiAlmIntegrationsListBitbucketserverProjectsParams struct {
	// AlmSetting DevOps Platform setting key
	AlmSetting string `form:"almSetting" json:"almSetting"`
}

// ApiAlmIntegrationsSearchAzureReposParams defines parameters for ApiAlmIntegrationsSearchAzureRepos.
type ApiAlmIntegrationsSearchAzureReposParams struct {
	// AlmSetting DevOps Platform setting key
	AlmSetting string `form:"almSetting" json:"almSetting"`

	// ProjectName Project name filter
	ProjectName *string `form:"projectName,omitempty" json:"projectName,omitempty"`

	// SearchQuery Search query filter
	SearchQuery *string `form:"searchQuery,omitempty" json:"searchQuery,omitempty"`
}

// ApiAlmIntegrationsSearchBitbucketcloudReposParams defines parameters for ApiAlmIntegrationsSearchBitbucketcloudRepos.
type ApiAlmIntegrationsSearchBitbucketcloudReposParams struct {
	// AlmSetting DevOps Platform setting key
	AlmSetting string `form:"almSetting" json:"almSetting"`

	// P 1-based page number
	P *string `form:"p,omitempty" json:"p,omitempty"`

	// Ps Page size. Must be greater than 0 and less or equal than 100
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`

	// RepositoryName Repository name filter
	RepositoryName *string `form:"repositoryName,omitempty" json:"repositoryName,omitempty"`
}

// ApiAlmIntegrationsSearchBitbucketserverReposParams defines parameters for ApiAlmIntegrationsSearchBitbucketserverRepos.
type ApiAlmIntegrationsSearchBitbucketserverReposParams struct {
	// AlmSetting DevOps Platform setting key
	AlmSetting string `form:"almSetting" json:"almSetting"`

	// ProjectName Project name filter
	ProjectName *string `form:"projectName,omitempty" json:"projectName,omitempty"`

	// RepositoryName Repository name filter
	RepositoryName *string `form:"repositoryName,omitempty" json:"repositoryName,omitempty"`
}

// ApiAlmIntegrationsSearchGitlabReposParams defines parameters for ApiAlmIntegrationsSearchGitlabRepos.
type ApiAlmIntegrationsSearchGitlabReposParams struct {
	// AlmSetting DevOps Platform setting key
	AlmSetting string `form:"almSetting" json:"almSetting"`

	// P 1-based page number
	P *string `form:"p,omitempty" json:"p,omitempty"`

	// ProjectName Project name filter
	ProjectName *string `form:"projectName,omitempty" json:"projectName,omitempty"`

	// Ps Page size. Must be greater than 0 and less or equal than 500
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`
}

// ApiAlmIntegrationsSetPatParams defines parameters for ApiAlmIntegrationsSetPat.
type ApiAlmIntegrationsSetPatParams struct {
	// AlmSetting DevOps Platform setting key
	AlmSetting string `form:"almSetting" json:"almSetting"`

	// Pat Personal Access Token
	Pat string `form:"pat" json:"pat"`

	// Username Username
	Username *string `form:"username,omitempty" json:"username,omitempty"`
}

// ApiAlmSettingsCountBindingParams defines parameters for ApiAlmSettingsCountBinding.
type ApiAlmSettingsCountBindingParams struct {
	// AlmSetting DevOps Platform setting key
	AlmSetting string `form:"almSetting" json:"almSetting"`
}

// ApiAlmSettingsCreateAzureParams defines parameters for ApiAlmSettingsCreateAzure.
type ApiAlmSettingsCreateAzureParams struct {
	// Key Unique key of the Azure Devops instance setting
	Key string `form:"key" json:"key"`

	// PersonalAccessToken Azure Devops personal access token
	PersonalAccessToken string `form:"personalAccessToken" json:"personalAccessToken"`

	// Url Azure API URL
	Url string `form:"url" json:"url"`
}

// ApiAlmSettingsCreateBitbucketParams defines parameters for ApiAlmSettingsCreateBitbucket.
type ApiAlmSettingsCreateBitbucketParams struct {
	// Key Unique key of the Bitbucket instance setting
	Key string `form:"key" json:"key"`

	// PersonalAccessToken Bitbucket personal access token
	PersonalAccessToken string `form:"personalAccessToken" json:"personalAccessToken"`

	// Url BitBucket server API URL
	Url string `form:"url" json:"url"`
}

// ApiAlmSettingsCreateBitbucketcloudParams defines parameters for ApiAlmSettingsCreateBitbucketcloud.
type ApiAlmSettingsCreateBitbucketcloudParams struct {
	// ClientId Bitbucket Cloud Client ID
	ClientId string `form:"clientId" json:"clientId"`

	// ClientSecret Bitbucket Cloud Client Secret
	ClientSecret string `form:"clientSecret" json:"clientSecret"`

	// Key Unique key of the Bitbucket Cloud setting
	Key string `form:"key" json:"key"`

	// Workspace Bitbucket Cloud workspace ID
	Workspace string `form:"workspace" json:"workspace"`
}

// ApiAlmSettingsCreateGithubParams defines parameters for ApiAlmSettingsCreateGithub.
type ApiAlmSettingsCreateGithubParams struct {
	// AppId GitHub App ID
	AppId string `form:"appId" json:"appId"`

	// ClientId GitHub App Client ID
	ClientId string `form:"clientId" json:"clientId"`

	// ClientSecret GitHub App Client Secret
	ClientSecret string `form:"clientSecret" json:"clientSecret"`

	// Key Unique key of the GitHub instance setting
	Key string `form:"key" json:"key"`

	// PrivateKey GitHub App private key
	PrivateKey string `form:"privateKey" json:"privateKey"`

	// Url GitHub API URL
	Url string `form:"url" json:"url"`

	// WebhookSecret GitHub App Webhook Secret
	WebhookSecret *string `form:"webhookSecret,omitempty" json:"webhookSecret,omitempty"`
}

// ApiAlmSettingsCreateGitlabParams defines parameters for ApiAlmSettingsCreateGitlab.
type ApiAlmSettingsCreateGitlabParams struct {
	// Key Unique key of the GitLab instance setting
	Key string `form:"key" json:"key"`

	// PersonalAccessToken GitLab personal access token
	PersonalAccessToken string `form:"personalAccessToken" json:"personalAccessToken"`

	// Url GitLab API URL
	Url string `form:"url" json:"url"`
}

// ApiAlmSettingsDeleteParams defines parameters for ApiAlmSettingsDelete.
type ApiAlmSettingsDeleteParams struct {
	// Key DevOps Platform Setting key
	Key string `form:"key" json:"key"`
}

// ApiAlmSettingsGetBindingParams defines parameters for ApiAlmSettingsGetBinding.
type ApiAlmSettingsGetBindingParams struct {
	// Project Project key
	Project string `form:"project" json:"project"`
}

// ApiAlmSettingsListParams defines parameters for ApiAlmSettingsList.
type ApiAlmSettingsListParams struct {
	// Project Project key
	Project *string `form:"project,omitempty" json:"project,omitempty"`
}

// ApiAlmSettingsUpdateAzureParams defines parameters for ApiAlmSettingsUpdateAzure.
type ApiAlmSettingsUpdateAzureParams struct {
	// Key Unique key of the Azure instance setting
	Key string `form:"key" json:"key"`

	// NewKey Optional new value for an unique key of the Azure Devops instance setting
	NewKey *string `form:"newKey,omitempty" json:"newKey,omitempty"`

	// PersonalAccessToken Azure Devops personal access token
	PersonalAccessToken *string `form:"personalAccessToken,omitempty" json:"personalAccessToken,omitempty"`

	// Url Azure API URL
	Url string `form:"url" json:"url"`
}

// ApiAlmSettingsUpdateBitbucketParams defines parameters for ApiAlmSettingsUpdateBitbucket.
type ApiAlmSettingsUpdateBitbucketParams struct {
	// Key Unique key of the Bitbucket instance setting
	Key string `form:"key" json:"key"`

	// NewKey Optional new value for an unique key of the Bitbucket instance setting
	NewKey *string `form:"newKey,omitempty" json:"newKey,omitempty"`

	// PersonalAccessToken Bitbucket personal access token
	PersonalAccessToken *string `form:"personalAccessToken,omitempty" json:"personalAccessToken,omitempty"`

	// Url Bitbucket API URL
	Url string `form:"url" json:"url"`
}

// ApiAlmSettingsUpdateBitbucketcloudParams defines parameters for ApiAlmSettingsUpdateBitbucketcloud.
type ApiAlmSettingsUpdateBitbucketcloudParams struct {
	// ClientId Bitbucket Cloud Client ID
	ClientId string `form:"clientId" json:"clientId"`

	// ClientSecret Optional new value for the Bitbucket Cloud client secret
	ClientSecret *string `form:"clientSecret,omitempty" json:"clientSecret,omitempty"`

	// Key Unique key of the Bitbucket Cloud setting
	Key string `form:"key" json:"key"`

	// NewKey Optional new value for an unique key of the Bitbucket Cloud setting
	NewKey *string `form:"newKey,omitempty" json:"newKey,omitempty"`

	// Workspace Bitbucket Cloud workspace ID
	Workspace string `form:"workspace" json:"workspace"`
}

// ApiAlmSettingsUpdateGithubParams defines parameters for ApiAlmSettingsUpdateGithub.
type ApiAlmSettingsUpdateGithubParams struct {
	// AppId GitHub API ID
	AppId string `form:"appId" json:"appId"`

	// ClientId GitHub App Client ID
	ClientId string `form:"clientId" json:"clientId"`

	// ClientSecret GitHub App Client Secret
	ClientSecret *string `form:"clientSecret,omitempty" json:"clientSecret,omitempty"`

	// Key Unique key of the GitHub instance setting
	Key string `form:"key" json:"key"`

	// NewKey Optional new value for an unique key of the GitHub instance setting
	NewKey *string `form:"newKey,omitempty" json:"newKey,omitempty"`

	// PrivateKey GitHub App private key
	PrivateKey *string `form:"privateKey,omitempty" json:"privateKey,omitempty"`

	// Url GitHub API URL
	Url string `form:"url" json:"url"`

	// WebhookSecret GitHub App Webhook Secret
	WebhookSecret *string `form:"webhookSecret,omitempty" json:"webhookSecret,omitempty"`
}

// ApiAlmSettingsUpdateGitlabParams defines parameters for ApiAlmSettingsUpdateGitlab.
type ApiAlmSettingsUpdateGitlabParams struct {
	// Key Unique key of the GitLab instance setting
	Key string `form:"key" json:"key"`

	// NewKey Optional new value for an unique key of the GitLab instance setting
	NewKey *string `form:"newKey,omitempty" json:"newKey,omitempty"`

	// PersonalAccessToken GitLab personal access token
	PersonalAccessToken *string `form:"personalAccessToken,omitempty" json:"personalAccessToken,omitempty"`

	// Url GitLab API URL
	Url string `form:"url" json:"url"`
}

// ApiAlmSettingsValidateParams defines parameters for ApiAlmSettingsValidate.
type ApiAlmSettingsValidateParams struct {
	// Key Unique key of the DevOps Platform settings
	Key string `form:"key" json:"key"`
}

// ApiAnalysisCacheGetParams defines parameters for ApiAnalysisCacheGet.
type ApiAnalysisCacheGetParams struct {
	// Branch Branch key. If not provided, main branch will be used.
	Branch *string `form:"branch,omitempty" json:"branch,omitempty"`

	// Project Project key
	Project string `form:"project" json:"project"`
}

// ApiAuthenticationLoginParams defines parameters for ApiAuthenticationLogin.
type ApiAuthenticationLoginParams struct {
	// Login Login of the user
	Login string `form:"login" json:"login"`

	// Password Password of the user
	Password string `form:"password" json:"password"`
}

// ApiCeActivityParams defines parameters for ApiCeActivity.
type ApiCeActivityParams struct {
	// Component Key of the component (project) to filter on
	Component *string `form:"component,omitempty" json:"component,omitempty"`

	// ComponentId Id of the component (project) to filter on
	ComponentId *string `form:"componentId,omitempty" json:"componentId,omitempty"`

	// MaxExecutedAt Maximum date of end of task processing (inclusive)
	MaxExecutedAt *string `form:"maxExecutedAt,omitempty" json:"maxExecutedAt,omitempty"`

	// MinSubmittedAt Minimum date of task submission (inclusive)
	MinSubmittedAt *string `form:"minSubmittedAt,omitempty" json:"minSubmittedAt,omitempty"`

	// OnlyCurrents Filter on the last tasks (only the most recent finished task by project)
	OnlyCurrents *string `form:"onlyCurrents,omitempty" json:"onlyCurrents,omitempty"`

	// P 1-based page number
	P *string `form:"p,omitempty" json:"p,omitempty"`

	// Ps Page size. Must be greater than 0 and less or equal than 1000
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`

	// Q Limit search to: <ul><li>component names that contain the supplied string</li><li>component keys that are exactly the same as the supplied string</li><li>task ids that are exactly the same as the supplied string</li></ul>Must not be set together with componentId
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Status Comma separated list of task statuses
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// Type Task type
	Type *string `form:"type,omitempty" json:"type,omitempty"`
}

// ApiCeActivityStatusParams defines parameters for ApiCeActivityStatus.
type ApiCeActivityStatusParams struct {
	// Component Key of the component (project) to filter on
	Component *string `form:"component,omitempty" json:"component,omitempty"`

	// ComponentId Id of the component (project) to filter on
	ComponentId *string `form:"componentId,omitempty" json:"componentId,omitempty"`
}

// ApiCeComponentParams defines parameters for ApiCeComponent.
type ApiCeComponentParams struct {
	// Component null
	Component string `form:"component" json:"component"`
}

// ApiCeTaskParams defines parameters for ApiCeTask.
type ApiCeTaskParams struct {
	// AdditionalFields Comma-separated list of the optional fields to be returned in response.
	AdditionalFields *string `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`

	// Id Id of task
	Id string `form:"id" json:"id"`
}

// ApiComponentsSearchParams defines parameters for ApiComponentsSearch.
type ApiComponentsSearchParams struct {
	// P 1-based page number
	P *string `form:"p,omitempty" json:"p,omitempty"`

	// Ps Page size. Must be greater than 0 and less or equal than 500
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`

	// Q Limit search to: <ul><li>component names that contain the supplied string</li><li>component keys that are exactly the same as the supplied string</li></ul>
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Qualifiers Comma-separated list of component qualifiers. Filter the results with the specified qualifiers. Possible values are:<ul><li>TRK - Projects</li></ul>
	Qualifiers string `form:"qualifiers" json:"qualifiers"`
}

// ApiComponentsShowParams defines parameters for ApiComponentsShow.
type ApiComponentsShowParams struct {
	// Branch Branch key. Not available in the community edition.
	Branch *string `form:"branch,omitempty" json:"branch,omitempty"`

	// Component Component key
	Component string `form:"component" json:"component"`

	// PullRequest Pull request id. Not available in the community edition.
	PullRequest *string `form:"pullRequest,omitempty" json:"pullRequest,omitempty"`
}

// ApiComponentsTreeParams defines parameters for ApiComponentsTree.
type ApiComponentsTreeParams struct {
	// Asc Ascending sort
	Asc *string `form:"asc,omitempty" json:"asc,omitempty"`

	// Branch Branch key. Not available in the community edition.
	Branch *string `form:"branch,omitempty" json:"branch,omitempty"`

	// Component Base component key. The search is based on this component.
	Component string `form:"component" json:"component"`

	// P 1-based page number
	P *string `form:"p,omitempty" json:"p,omitempty"`

	// Ps Page size. Must be greater than 0 and less or equal than 500
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`

	// PullRequest Pull request id. Not available in the community edition.
	PullRequest *string `form:"pullRequest,omitempty" json:"pullRequest,omitempty"`

	// Q Limit search to: <ul><li>component names that contain the supplied string</li><li>component keys that are exactly the same as the supplied string</li></ul>
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Qualifiers Comma-separated list of component qualifiers. Filter the results with the specified qualifiers. Possible values are:<ul><li>BRC - no description available</li><li>UTS - Test Files</li><li>FIL - Files</li><li>DIR - Directories</li><li>TRK - Projects</li></ul>
	Qualifiers *string `form:"qualifiers,omitempty" json:"qualifiers,omitempty"`

	// S Comma-separated list of sort fields
	S *string `form:"s,omitempty" json:"s,omitempty"`

	// Strategy Strategy to search for base component descendants:<ul><li>children: return the children components of the base component. Grandchildren components are not returned</li><li>all: return all the descendants components of the base component. Grandchildren are returned.</li><li>leaves: return all the descendant components (files, in general) which don't have other children. They are the leaves of the component tree.</li></ul>
	Strategy *string `form:"strategy,omitempty" json:"strategy,omitempty"`
}

// ApiDuplicationsShowParams defines parameters for ApiDuplicationsShow.
type ApiDuplicationsShowParams struct {
	// Key File key
	Key string `form:"key" json:"key"`
}

// ApiFavoritesAddParams defines parameters for ApiFavoritesAdd.
type ApiFavoritesAddParams struct {
	// Component Component key. Only components with qualifiers TRK, VW, SVW, APP are supported
	Component string `form:"component" json:"component"`
}

// ApiFavoritesRemoveParams defines parameters for ApiFavoritesRemove.
type ApiFavoritesRemoveParams struct {
	// Component Component key
	Component string `form:"component" json:"component"`
}

// ApiFavoritesSearchParams defines parameters for ApiFavoritesSearch.
type ApiFavoritesSearchParams struct {
	// P 1-based page number
	P *string `form:"p,omitempty" json:"p,omitempty"`

	// Ps Page size. Must be greater than 0 and less or equal than 500
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`
}

// ApiHotspotsSearchParams defines parameters for ApiHotspotsSearch.
type ApiHotspotsSearchParams struct {
	// Branch Branch key. Not available in the community edition.
	Branch *string `form:"branch,omitempty" json:"branch,omitempty"`

	// Cwe Comma-separated list of CWE numbers
	Cwe *string `form:"cwe,omitempty" json:"cwe,omitempty"`

	// Files Comma-separated list of files. Returns only hotspots found in those files
	Files *string `form:"files,omitempty" json:"files,omitempty"`

	// Hotspots Comma-separated list of Security Hotspot keys. This parameter is required unless projectKey is provided.
	Hotspots *string `form:"hotspots,omitempty" json:"hotspots,omitempty"`

	// InNewCodePeriod If 'inNewCodePeriod' is provided, only Security Hotspots created in the new code period are returned.
	InNewCodePeriod *string `form:"inNewCodePeriod,omitempty" json:"inNewCodePeriod,omitempty"`

	// OnlyMine If 'projectKey' is provided, returns only Security Hotspots assigned to the current user
	OnlyMine *string `form:"onlyMine,omitempty" json:"onlyMine,omitempty"`

	// OwaspAsvs40 Comma-separated list of OWASP ASVS v4.0 categories or rules.
	OwaspAsvs40 *string `form:"owaspAsvs-4.0,omitempty" json:"owaspAsvs-4.0,omitempty"`

	// OwaspAsvsLevel Filters hotspots with lower or equal OWASP ASVS level to the parameter value. Should be used in combination with the 'owaspAsvs-4.0' parameter.
	OwaspAsvsLevel *string `form:"owaspAsvsLevel,omitempty" json:"owaspAsvsLevel,omitempty"`

	// OwaspTop10 Comma-separated list of OWASP 2017 Top 10 lowercase categories.
	OwaspTop10 *string `form:"owaspTop10,omitempty" json:"owaspTop10,omitempty"`

	// OwaspTop102021 Comma-separated list of OWASP 2021 Top 10 lowercase categories.
	OwaspTop102021 *string `form:"owaspTop10-2021,omitempty" json:"owaspTop10-2021,omitempty"`

	// P 1-based page number
	P *string `form:"p,omitempty" json:"p,omitempty"`

	// PciDss32 Comma-separated list of PCI DSS v3.2 categories.
	PciDss32 *string `form:"pciDss-3.2,omitempty" json:"pciDss-3.2,omitempty"`

	// PciDss40 Comma-separated list of PCI DSS v4.0 categories.
	PciDss40 *string `form:"pciDss-4.0,omitempty" json:"pciDss-4.0,omitempty"`

	// ProjectKey Key of the project or application. This parameter is required unless hotspots is provided.
	ProjectKey *string `form:"projectKey,omitempty" json:"projectKey,omitempty"`

	// Ps Page size. Must be greater than 0.
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`

	// PullRequest Pull request id. Not available in the community edition.
	PullRequest *string `form:"pullRequest,omitempty" json:"pullRequest,omitempty"`

	// Resolution If 'projectKey' is provided and if status is 'REVIEWED', only Security Hotspots with the specified resolution are returned.
	Resolution *string `form:"resolution,omitempty" json:"resolution,omitempty"`

	// SansTop25 Comma-separated list of SANS Top 25 categories.
	SansTop25 *string `form:"sansTop25,omitempty" json:"sansTop25,omitempty"`

	// SonarsourceSecurity Comma-separated list of SonarSource security categories. Use 'others' to select issues not associated with any category
	SonarsourceSecurity *string `form:"sonarsourceSecurity,omitempty" json:"sonarsourceSecurity,omitempty"`

	// Status If 'projectKey' is provided, only Security Hotspots with the specified status are returned.
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// ApiHotspotsShowParams defines parameters for ApiHotspotsShow.
type ApiHotspotsShowParams struct {
	// Hotspot Key of the Security Hotspot
	Hotspot string `form:"hotspot" json:"hotspot"`
}

// ApiIssuesAddCommentParams defines parameters for ApiIssuesAddComment.
type ApiIssuesAddCommentParams struct {
	// Issue Issue key
	Issue string `form:"issue" json:"issue"`

	// Text Comment text
	Text string `form:"text" json:"text"`
}

// ApiIssuesAssignParams defines parameters for ApiIssuesAssign.
type ApiIssuesAssignParams struct {
	// Assignee Login of the assignee. When not set, it will unassign the issue. Use '_me' to assign to current user
	Assignee *string `form:"assignee,omitempty" json:"assignee,omitempty"`

	// Issue Issue key
	Issue string `form:"issue" json:"issue"`
}

// ApiIssuesAuthorsParams defines parameters for ApiIssuesAuthors.
type ApiIssuesAuthorsParams struct {
	// Project Project key
	Project *string `form:"project,omitempty" json:"project,omitempty"`

	// Ps Page size. Must be greater than 0 and less or equal than 100
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`

	// Q Limit search to authors that contain the supplied string.
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// ApiIssuesBulkChangeParams defines parameters for ApiIssuesBulkChange.
type ApiIssuesBulkChangeParams struct {
	// AddTags Add tags
	AddTags *string `form:"add_tags,omitempty" json:"add_tags,omitempty"`

	// Assign To assign the list of issues to a specific user (login), or un-assign all the issues
	Assign *string `form:"assign,omitempty" json:"assign,omitempty"`

	// Comment Add a comment. The comment will only be added to issues that are affected either by a change of type or a change of severity as a result of the same WS call.
	Comment *string `form:"comment,omitempty" json:"comment,omitempty"`

	// DoTransition Transition
	DoTransition *string `form:"do_transition,omitempty" json:"do_transition,omitempty"`

	// Issues Comma-separated list of issue keys
	Issues string `form:"issues" json:"issues"`

	// RemoveTags Remove tags
	RemoveTags *string `form:"remove_tags,omitempty" json:"remove_tags,omitempty"`

	// SendNotifications null
	SendNotifications *string `form:"sendNotifications,omitempty" json:"sendNotifications,omitempty"`

	// SetSeverity To change the severity of the list of issues
	SetSeverity *string `form:"set_severity,omitempty" json:"set_severity,omitempty"`

	// SetType To change the type of the list of issues
	SetType *string `form:"set_type,omitempty" json:"set_type,omitempty"`
}

// ApiIssuesChangelogParams defines parameters for ApiIssuesChangelog.
type ApiIssuesChangelogParams struct {
	// Issue Issue key
	Issue string `form:"issue" json:"issue"`
}

// ApiIssuesDeleteCommentParams defines parameters for ApiIssuesDeleteComment.
type ApiIssuesDeleteCommentParams struct {
	// Comment Comment key
	Comment string `form:"comment" json:"comment"`
}

// ApiIssuesDoTransitionParams defines parameters for ApiIssuesDoTransition.
type ApiIssuesDoTransitionParams struct {
	// Issue Issue key
	Issue string `form:"issue" json:"issue"`

	// Transition Transition
	Transition string `form:"transition" json:"transition"`
}

// ApiIssuesEditCommentParams defines parameters for ApiIssuesEditComment.
type ApiIssuesEditCommentParams struct {
	// Comment Comment key
	Comment string `form:"comment" json:"comment"`

	// Text Comment text
	Text string `form:"text" json:"text"`
}

// ApiIssuesReindexParams defines parameters for ApiIssuesReindex.
type ApiIssuesReindexParams struct {
	// Project Project key
	Project string `form:"project" json:"project"`
}

// ApiIssuesSearchParams defines parameters for ApiIssuesSearch.
type ApiIssuesSearchParams struct {
	// AdditionalFields Comma-separated list of the optional fields to be returned in response. Action plans are dropped in 5.5, it is not returned in the response.
	AdditionalFields *string `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`

	// Asc Ascending sort
	Asc *string `form:"asc,omitempty" json:"asc,omitempty"`

	// Assigned To retrieve assigned or unassigned issues
	Assigned *string `form:"assigned,omitempty" json:"assigned,omitempty"`

	// Assignees Comma-separated list of assignee logins. The value '__me__' can be used as a placeholder for user who performs the request
	Assignees *string `form:"assignees,omitempty" json:"assignees,omitempty"`

	// Author SCM accounts. To set several values, the parameter must be called once for each value.
	Author *string `form:"author,omitempty" json:"author,omitempty"`

	// Branch Branch key. Not available in the community edition.
	Branch *string `form:"branch,omitempty" json:"branch,omitempty"`

	// ComponentKeys Comma-separated list of component keys. Retrieve issues associated to a specific list of components (and all its descendants). A component can be a portfolio, project, module, directory or file.
	ComponentKeys *string `form:"componentKeys,omitempty" json:"componentKeys,omitempty"`

	// CreatedAfter To retrieve issues created after the given date (inclusive). <br>Either a date (use 'timeZone' attribute or it will default to server timezone) or datetime can be provided. <br>If this parameter is set, createdInLast must not be set
	CreatedAfter *string `form:"createdAfter,omitempty" json:"createdAfter,omitempty"`

	// CreatedAt Datetime to retrieve issues created during a specific analysis
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty"`

	// CreatedBefore To retrieve issues created before the given date (exclusive). <br>Either a date (use 'timeZone' attribute or it will default to server timezone) or datetime can be provided.
	CreatedBefore *string `form:"createdBefore,omitempty" json:"createdBefore,omitempty"`

	// CreatedInLast To retrieve issues created during a time span before the current time (exclusive). Accepted units are 'y' for year, 'm' for month, 'w' for week and 'd' for day. If this parameter is set, createdAfter must not be set
	CreatedInLast *string `form:"createdInLast,omitempty" json:"createdInLast,omitempty"`

	// Cwe Comma-separated list of CWE identifiers. Use 'unknown' to select issues not associated to any CWE.
	Cwe *string `form:"cwe,omitempty" json:"cwe,omitempty"`

	// Facets Comma-separated list of the facets to be computed. No facet is computed by default.
	Facets *string `form:"facets,omitempty" json:"facets,omitempty"`

	// InNewCodePeriod To retrieve issues created in the new code period.<br>If this parameter is set to a truthy value, createdAfter must not be set and one component uuid or key must be provided.
	InNewCodePeriod *string `form:"inNewCodePeriod,omitempty" json:"inNewCodePeriod,omitempty"`

	// Issues Comma-separated list of issue keys
	Issues *string `form:"issues,omitempty" json:"issues,omitempty"`

	// Languages Comma-separated list of languages. Available since 4.4
	Languages *string `form:"languages,omitempty" json:"languages,omitempty"`

	// OnComponentOnly Return only issues at a component's level, not on its descendants (modules, directories, files, etc). This parameter is only considered when componentKeys is set.
	OnComponentOnly *string `form:"onComponentOnly,omitempty" json:"onComponentOnly,omitempty"`

	// OwaspAsvs40 Comma-separated list of OWASP ASVS v4.0 categories.
	OwaspAsvs40 *string `form:"owaspAsvs-4.0,omitempty" json:"owaspAsvs-4.0,omitempty"`

	// OwaspAsvsLevel Level of OWASP ASVS categories.
	OwaspAsvsLevel *string `form:"owaspAsvsLevel,omitempty" json:"owaspAsvsLevel,omitempty"`

	// OwaspTop10 Comma-separated list of OWASP Top 10 2017 lowercase categories.
	OwaspTop10 *string `form:"owaspTop10,omitempty" json:"owaspTop10,omitempty"`

	// OwaspTop102021 Comma-separated list of OWASP Top 10 2021 lowercase categories.
	OwaspTop102021 *string `form:"owaspTop10-2021,omitempty" json:"owaspTop10-2021,omitempty"`

	// P 1-based page number
	P *string `form:"p,omitempty" json:"p,omitempty"`

	// PciDss32 Comma-separated list of PCI DSS v3.2 categories.
	PciDss32 *string `form:"pciDss-3.2,omitempty" json:"pciDss-3.2,omitempty"`

	// PciDss40 Comma-separated list of PCI DSS v4.0 categories.
	PciDss40 *string `form:"pciDss-4.0,omitempty" json:"pciDss-4.0,omitempty"`

	// Ps Page size. Must be greater than 0 and less or equal than 500
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`

	// PullRequest Pull request id. Not available in the community edition.
	PullRequest *string `form:"pullRequest,omitempty" json:"pullRequest,omitempty"`

	// Resolutions Comma-separated list of resolutions
	Resolutions *string `form:"resolutions,omitempty" json:"resolutions,omitempty"`

	// Resolved To match resolved or unresolved issues
	Resolved *string `form:"resolved,omitempty" json:"resolved,omitempty"`

	// Rules Comma-separated list of coding rule keys. Format is &lt;repository&gt;:&lt;rule&gt;
	Rules *string `form:"rules,omitempty" json:"rules,omitempty"`

	// S Sort field
	S *string `form:"s,omitempty" json:"s,omitempty"`

	// SansTop25 Comma-separated list of SANS Top 25 categories.
	SansTop25 *string `form:"sansTop25,omitempty" json:"sansTop25,omitempty"`

	// Scopes Comma-separated list of scopes. Available since 8.5
	Scopes *string `form:"scopes,omitempty" json:"scopes,omitempty"`

	// Severities Comma-separated list of severities
	Severities *string `form:"severities,omitempty" json:"severities,omitempty"`

	// SinceLeakPeriod To retrieve issues created since the leak period.<br>If this parameter is set to a truthy value, createdAfter must not be set and one component uuid or key must be provided.
	SinceLeakPeriod *string `form:"sinceLeakPeriod,omitempty" json:"sinceLeakPeriod,omitempty"`

	// SonarsourceSecurity Comma-separated list of SonarSource security categories. Use 'others' to select issues not associated with any category
	SonarsourceSecurity *string `form:"sonarsourceSecurity,omitempty" json:"sonarsourceSecurity,omitempty"`

	// Statuses Comma-separated list of statuses
	Statuses *string `form:"statuses,omitempty" json:"statuses,omitempty"`

	// Tags Comma-separated list of tags.
	Tags *string `form:"tags,omitempty" json:"tags,omitempty"`

	// TimeZone To resolve dates passed to 'createdAfter' or 'createdBefore' (does not apply to datetime) and to compute creation date histogram
	TimeZone *string `form:"timeZone,omitempty" json:"timeZone,omitempty"`

	// Types Comma-separated list of types.
	Types *string `form:"types,omitempty" json:"types,omitempty"`
}

// ApiIssuesSetSeverityParams defines parameters for ApiIssuesSetSeverity.
type ApiIssuesSetSeverityParams struct {
	// Issue Issue key
	Issue string `form:"issue" json:"issue"`

	// Severity New severity
	Severity string `form:"severity" json:"severity"`
}

// ApiIssuesSetTagsParams defines parameters for ApiIssuesSetTags.
type ApiIssuesSetTagsParams struct {
	// Issue Issue key
	Issue string `form:"issue" json:"issue"`

	// Tags Comma-separated list of tags. All tags are removed if parameter is empty or not set.
	Tags *string `form:"tags,omitempty" json:"tags,omitempty"`
}

// ApiIssuesSetTypeParams defines parameters for ApiIssuesSetType.
type ApiIssuesSetTypeParams struct {
	// Issue Issue key
	Issue string `form:"issue" json:"issue"`

	// Type New type
	Type string `form:"type" json:"type"`
}

// ApiIssuesTagsParams defines parameters for ApiIssuesTags.
type ApiIssuesTagsParams struct {
	// All Indicator to search for all tags or only for tags in the main branch of a project
	All *string `form:"all,omitempty" json:"all,omitempty"`

	// Branch Branch key
	Branch *string `form:"branch,omitempty" json:"branch,omitempty"`

	// Project Project key
	Project *string `form:"project,omitempty" json:"project,omitempty"`

	// Ps Page size. Must be greater than 0 and less or equal than 500
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`

	// Q Limit search to tags that contain the supplied string.
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// ApiLanguagesListParams defines parameters for ApiLanguagesList.
type ApiLanguagesListParams struct {
	// Ps The size of the list to return, 0 for all languages
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`

	// Q A pattern to match language keys/names against
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// ApiMeasuresComponentParams defines parameters for ApiMeasuresComponent.
type ApiMeasuresComponentParams struct {
	// AdditionalFields Comma-separated list of additional fields that can be returned in the response.
	AdditionalFields *string `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`

	// Branch Branch key. Not available in the community edition.
	Branch *string `form:"branch,omitempty" json:"branch,omitempty"`

	// Component Component key
	Component string `form:"component" json:"component"`

	// MetricKeys Comma-separated list of metric keys
	MetricKeys string `form:"metricKeys" json:"metricKeys"`

	// PullRequest Pull request id. Not available in the community edition.
	PullRequest *string `form:"pullRequest,omitempty" json:"pullRequest,omitempty"`
}

// ApiMeasuresComponentTreeParams defines parameters for ApiMeasuresComponentTree.
type ApiMeasuresComponentTreeParams struct {
	// AdditionalFields Comma-separated list of additional fields that can be returned in the response.
	AdditionalFields *string `form:"additionalFields,omitempty" json:"additionalFields,omitempty"`

	// Asc Ascending sort
	Asc *string `form:"asc,omitempty" json:"asc,omitempty"`

	// Branch Branch key. Not available in the community edition.
	Branch *string `form:"branch,omitempty" json:"branch,omitempty"`

	// Component Component key. The search is based on this component.
	Component string `form:"component" json:"component"`

	// MetricKeys Comma-separated list of metric keys. Types DATA, DISTRIB are not allowed.
	MetricKeys string `form:"metricKeys" json:"metricKeys"`

	// MetricPeriodSort Sort measures by leak period or not ?. The 's' parameter must contain the 'metricPeriod' value.
	MetricPeriodSort *string `form:"metricPeriodSort,omitempty" json:"metricPeriodSort,omitempty"`

	// MetricSort Metric key to sort by. The 's' parameter must contain the 'metric' or 'metricPeriod' value. It must be part of the 'metricKeys' parameter
	MetricSort *string `form:"metricSort,omitempty" json:"metricSort,omitempty"`

	// MetricSortFilter Filter components. Sort must be on a metric. Possible values are: <ul><li>all: return all components</li><li>withMeasuresOnly: filter out components that do not have a measure on the sorted metric</li></ul>
	MetricSortFilter *string `form:"metricSortFilter,omitempty" json:"metricSortFilter,omitempty"`

	// P 1-based page number
	P *string `form:"p,omitempty" json:"p,omitempty"`

	// Ps Page size. Must be greater than 0 and less or equal than 500
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`

	// PullRequest Pull request id. Not available in the community edition.
	PullRequest *string `form:"pullRequest,omitempty" json:"pullRequest,omitempty"`

	// Q Limit search to: <ul><li>component names that contain the supplied string</li><li>component keys that are exactly the same as the supplied string</li></ul>
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Qualifiers Comma-separated list of component qualifiers. Filter the results with the specified qualifiers. Possible values are:<ul><li>BRC - no description available</li><li>UTS - Test Files</li><li>FIL - Files</li><li>DIR - Directories</li><li>TRK - Projects</li></ul>
	Qualifiers *string `form:"qualifiers,omitempty" json:"qualifiers,omitempty"`

	// S Comma-separated list of sort fields
	S *string `form:"s,omitempty" json:"s,omitempty"`

	// Strategy Strategy to search for base component descendants:<ul><li>children: return the children components of the base component. Grandchildren components are not returned</li><li>all: return all the descendants components of the base component. Grandchildren are returned.</li><li>leaves: return all the descendant components (files, in general) which don't have other children. They are the leaves of the component tree.</li></ul>
	Strategy *string `form:"strategy,omitempty" json:"strategy,omitempty"`
}

// ApiMeasuresSearchHistoryParams defines parameters for ApiMeasuresSearchHistory.
type ApiMeasuresSearchHistoryParams struct {
	// Branch Branch key. Not available in the community edition.
	Branch *string `form:"branch,omitempty" json:"branch,omitempty"`

	// Component Component key
	Component string `form:"component" json:"component"`

	// From Filter measures created after the given date (inclusive). <br>Either a date (server timezone) or datetime can be provided
	From *string `form:"from,omitempty" json:"from,omitempty"`

	// Metrics Comma-separated list of metric keys
	Metrics string `form:"metrics" json:"metrics"`

	// P 1-based page number
	P *string `form:"p,omitempty" json:"p,omitempty"`

	// Ps Page size. Must be greater than 0 and less or equal than 1000
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`

	// PullRequest Pull request id. Not available in the community edition.
	PullRequest *string `form:"pullRequest,omitempty" json:"pullRequest,omitempty"`

	// To Filter measures created before the given date (inclusive). <br>Either a date (server timezone) or datetime can be provided
	To *string `form:"to,omitempty" json:"to,omitempty"`
}

// ApiMetricsSearchParams defines parameters for ApiMetricsSearch.
type ApiMetricsSearchParams struct {
	// P 1-based page number
	P *string `form:"p,omitempty" json:"p,omitempty"`

	// Ps Page size. Must be greater than 0 and less or equal than 500
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`
}

// ApiNewCodePeriodsListParams defines parameters for ApiNewCodePeriodsList.
type ApiNewCodePeriodsListParams struct {
	// Project Project key
	Project string `form:"project" json:"project"`
}

// ApiNewCodePeriodsSetParams defines parameters for ApiNewCodePeriodsSet.
type ApiNewCodePeriodsSetParams struct {
	// Branch Branch key
	Branch *string `form:"branch,omitempty" json:"branch,omitempty"`

	// Project Project key
	Project *string `form:"project,omitempty" json:"project,omitempty"`

	// Type Type<br/>New code periods of the following types are allowed:<ul><li>SPECIFIC_ANALYSIS - can be set at branch level only</li><li>PREVIOUS_VERSION - can be set at any level (global, project, branch)</li><li>NUMBER_OF_DAYS - can be set at any level (global, project, branch)</li><li>REFERENCE_BRANCH - can only be set for projects and branches</li></ul>
	Type string `form:"type" json:"type"`

	// Value Value<br/>For each type, a different value is expected:<ul><li>the uuid of an analysis, when type is SPECIFIC_ANALYSIS</li><li>no value, when type is PREVIOUS_VERSION</li><li>a number, when type is NUMBER_OF_DAYS</li><li>a string, when type is REFERENCE_BRANCH</li></ul>
	Value *string `form:"value,omitempty" json:"value,omitempty"`
}

// ApiNewCodePeriodsShowParams defines parameters for ApiNewCodePeriodsShow.
type ApiNewCodePeriodsShowParams struct {
	// Branch Branch key
	Branch *string `form:"branch,omitempty" json:"branch,omitempty"`

	// Project Project key
	Project *string `form:"project,omitempty" json:"project,omitempty"`
}

// ApiNewCodePeriodsUnsetParams defines parameters for ApiNewCodePeriodsUnset.
type ApiNewCodePeriodsUnsetParams struct {
	// Branch Branch key
	Branch *string `form:"branch,omitempty" json:"branch,omitempty"`

	// Project Project key
	Project *string `form:"project,omitempty" json:"project,omitempty"`
}

// ApiNotificationsAddParams defines parameters for ApiNotificationsAdd.
type ApiNotificationsAddParams struct {
	// Channel Channel through which the notification is sent. For example, notifications can be sent by email.
	Channel *string `form:"channel,omitempty" json:"channel,omitempty"`

	// Login User login
	Login *string `form:"login,omitempty" json:"login,omitempty"`

	// Project Project key
	Project *string `form:"project,omitempty" json:"project,omitempty"`

	// Type Notification type. Possible values are for:<ul> <li>Global notifications: CeReportTaskFailure, ChangesOnMyIssue, NewAlerts, SQ-MyNewIssues</li> <li>Per project notifications: CeReportTaskFailure, ChangesOnMyIssue, NewAlerts, NewFalsePositiveIssue, NewIssues, SQ-MyNewIssues</li></ul>
	Type string `form:"type" json:"type"`
}

// ApiNotificationsListParams defines parameters for ApiNotificationsList.
type ApiNotificationsListParams struct {
	// Login User login
	Login *string `form:"login,omitempty" json:"login,omitempty"`
}

// ApiNotificationsRemoveParams defines parameters for ApiNotificationsRemove.
type ApiNotificationsRemoveParams struct {
	// Channel Channel through which the notification is sent. For example, notifications can be sent by email.
	Channel *string `form:"channel,omitempty" json:"channel,omitempty"`

	// Login User login
	Login *string `form:"login,omitempty" json:"login,omitempty"`

	// Project Project key
	Project *string `form:"project,omitempty" json:"project,omitempty"`

	// Type Notification type. Possible values are for:<ul> <li>Global notifications: CeReportTaskFailure, ChangesOnMyIssue, NewAlerts, SQ-MyNewIssues</li> <li>Per project notifications: CeReportTaskFailure, ChangesOnMyIssue, NewAlerts, NewFalsePositiveIssue, NewIssues, SQ-MyNewIssues</li></ul>
	Type string `form:"type" json:"type"`
}

// ApiPermissionsAddGroupParams defines parameters for ApiPermissionsAddGroup.
type ApiPermissionsAddGroupParams struct {
	// GroupId Group id, use 'name' param instead
	GroupId *string `form:"groupId,omitempty" json:"groupId,omitempty"`

	// GroupName Group name or 'anyone' (case insensitive)
	GroupName *string `form:"groupName,omitempty" json:"groupName,omitempty"`

	// Permission The permission you would like to grant to the group.<ul><li>Possible values for global permissions: admin, profileadmin, gateadmin, scan, provisioning</li><li>Possible values for project permissions admin, codeviewer, issueadmin, securityhotspotadmin, scan, user</li></ul>
	Permission string `form:"permission" json:"permission"`

	// ProjectId Project id
	ProjectId *string `form:"projectId,omitempty" json:"projectId,omitempty"`

	// ProjectKey Project key
	ProjectKey *string `form:"projectKey,omitempty" json:"projectKey,omitempty"`
}

// ApiPermissionsAddGroupToTemplateParams defines parameters for ApiPermissionsAddGroupToTemplate.
type ApiPermissionsAddGroupToTemplateParams struct {
	// GroupId Group id, use 'name' param instead
	GroupId *string `form:"groupId,omitempty" json:"groupId,omitempty"`

	// GroupName Group name or 'anyone' (case insensitive)
	GroupName *string `form:"groupName,omitempty" json:"groupName,omitempty"`

	// Permission Permission<ul><li>Possible values for project permissions admin, codeviewer, issueadmin, securityhotspotadmin, scan, user</li></ul>
	Permission string `form:"permission" json:"permission"`

	// TemplateId Template id
	TemplateId *string `form:"templateId,omitempty" json:"templateId,omitempty"`

	// TemplateName Template name
	TemplateName *string `form:"templateName,omitempty" json:"templateName,omitempty"`
}

// ApiPermissionsAddProjectCreatorToTemplateParams defines parameters for ApiPermissionsAddProjectCreatorToTemplate.
type ApiPermissionsAddProjectCreatorToTemplateParams struct {
	// Permission Permission<ul><li>Possible values for project permissions admin, codeviewer, issueadmin, securityhotspotadmin, scan, user</li></ul>
	Permission string `form:"permission" json:"permission"`

	// TemplateId Template id
	TemplateId *string `form:"templateId,omitempty" json:"templateId,omitempty"`

	// TemplateName Template name
	TemplateName *string `form:"templateName,omitempty" json:"templateName,omitempty"`
}

// ApiPermissionsAddUserParams defines parameters for ApiPermissionsAddUser.
type ApiPermissionsAddUserParams struct {
	// Login User login
	Login string `form:"login" json:"login"`

	// Permission The permission you would like to grant to the user<ul><li>Possible values for global permissions: admin, profileadmin, gateadmin, scan, provisioning</li><li>Possible values for project permissions admin, codeviewer, issueadmin, securityhotspotadmin, scan, user</li></ul>
	Permission string `form:"permission" json:"permission"`

	// ProjectId Project id
	ProjectId *string `form:"projectId,omitempty" json:"projectId,omitempty"`

	// ProjectKey Project key
	ProjectKey *string `form:"projectKey,omitempty" json:"projectKey,omitempty"`
}

// ApiPermissionsAddUserToTemplateParams defines parameters for ApiPermissionsAddUserToTemplate.
type ApiPermissionsAddUserToTemplateParams struct {
	// Login User login
	Login string `form:"login" json:"login"`

	// Permission Permission<ul><li>Possible values for project permissions admin, codeviewer, issueadmin, securityhotspotadmin, scan, user</li></ul>
	Permission string `form:"permission" json:"permission"`

	// TemplateId Template id
	TemplateId *string `form:"templateId,omitempty" json:"templateId,omitempty"`

	// TemplateName Template name
	TemplateName *string `form:"templateName,omitempty" json:"templateName,omitempty"`
}

// ApiPermissionsApplyTemplateParams defines parameters for ApiPermissionsApplyTemplate.
type ApiPermissionsApplyTemplateParams struct {
	// ProjectId Project id
	ProjectId *string `form:"projectId,omitempty" json:"projectId,omitempty"`

	// ProjectKey Project key
	ProjectKey *string `form:"projectKey,omitempty" json:"projectKey,omitempty"`

	// TemplateId Template id
	TemplateId *string `form:"templateId,omitempty" json:"templateId,omitempty"`

	// TemplateName Template name
	TemplateName *string `form:"templateName,omitempty" json:"templateName,omitempty"`
}

// ApiPermissionsBulkApplyTemplateParams defines parameters for ApiPermissionsBulkApplyTemplate.
type ApiPermissionsBulkApplyTemplateParams struct {
	// AnalyzedBefore Filter the projects for which last analysis is older than the given date (exclusive).<br> Either a date (server timezone) or datetime can be provided.
	AnalyzedBefore *string `form:"analyzedBefore,omitempty" json:"analyzedBefore,omitempty"`

	// OnProvisionedOnly Filter the projects that are provisioned
	OnProvisionedOnly *string `form:"onProvisionedOnly,omitempty" json:"onProvisionedOnly,omitempty"`

	// Projects Comma-separated list of project keys
	Projects *string `form:"projects,omitempty" json:"projects,omitempty"`

	// Q Limit search to: <ul><li>project names that contain the supplied string</li><li>project keys that are exactly the same as the supplied string</li></ul>
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Qualifiers Comma-separated list of component qualifiers. Filter the results with the specified qualifiers. Possible values are:<ul><li>TRK - Projects</li></ul>
	Qualifiers *string `form:"qualifiers,omitempty" json:"qualifiers,omitempty"`

	// TemplateId Template id
	TemplateId *string `form:"templateId,omitempty" json:"templateId,omitempty"`

	// TemplateName Template name
	TemplateName *string `form:"templateName,omitempty" json:"templateName,omitempty"`
}

// ApiPermissionsCreateTemplateParams defines parameters for ApiPermissionsCreateTemplate.
type ApiPermissionsCreateTemplateParams struct {
	// Description Description
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// Name Name
	Name string `form:"name" json:"name"`

	// ProjectKeyPattern Project key pattern. Must be a valid Java regular expression
	ProjectKeyPattern *string `form:"projectKeyPattern,omitempty" json:"projectKeyPattern,omitempty"`
}

// ApiPermissionsDeleteTemplateParams defines parameters for ApiPermissionsDeleteTemplate.
type ApiPermissionsDeleteTemplateParams struct {
	// TemplateId Template id
	TemplateId *string `form:"templateId,omitempty" json:"templateId,omitempty"`

	// TemplateName Template name
	TemplateName *string `form:"templateName,omitempty" json:"templateName,omitempty"`
}

// ApiPermissionsRemoveGroupParams defines parameters for ApiPermissionsRemoveGroup.
type ApiPermissionsRemoveGroupParams struct {
	// GroupId Group id, use 'name' param instead
	GroupId *string `form:"groupId,omitempty" json:"groupId,omitempty"`

	// GroupName Group name or 'anyone' (case insensitive)
	GroupName *string `form:"groupName,omitempty" json:"groupName,omitempty"`

	// Permission The permission you would like to revoke from the group.<ul><li>Possible values for global permissions: admin, profileadmin, gateadmin, scan, provisioning</li><li>Possible values for project permissions admin, codeviewer, issueadmin, securityhotspotadmin, scan, user</li></ul>
	Permission string `form:"permission" json:"permission"`

	// ProjectId Project id
	ProjectId *string `form:"projectId,omitempty" json:"projectId,omitempty"`

	// ProjectKey Project key
	ProjectKey *string `form:"projectKey,omitempty" json:"projectKey,omitempty"`
}

// ApiPermissionsRemoveGroupFromTemplateParams defines parameters for ApiPermissionsRemoveGroupFromTemplate.
type ApiPermissionsRemoveGroupFromTemplateParams struct {
	// GroupId Group id, use 'name' param instead
	GroupId *string `form:"groupId,omitempty" json:"groupId,omitempty"`

	// GroupName Group name or 'anyone' (case insensitive)
	GroupName *string `form:"groupName,omitempty" json:"groupName,omitempty"`

	// Permission Permission<ul><li>Possible values for project permissions admin, codeviewer, issueadmin, securityhotspotadmin, scan, user</li></ul>
	Permission string `form:"permission" json:"permission"`

	// TemplateId Template id
	TemplateId *string `form:"templateId,omitempty" json:"templateId,omitempty"`

	// TemplateName Template name
	TemplateName *string `form:"templateName,omitempty" json:"templateName,omitempty"`
}

// ApiPermissionsRemoveProjectCreatorFromTemplateParams defines parameters for ApiPermissionsRemoveProjectCreatorFromTemplate.
type ApiPermissionsRemoveProjectCreatorFromTemplateParams struct {
	// Permission Permission<ul><li>Possible values for project permissions admin, codeviewer, issueadmin, securityhotspotadmin, scan, user</li></ul>
	Permission string `form:"permission" json:"permission"`

	// TemplateId Template id
	TemplateId *string `form:"templateId,omitempty" json:"templateId,omitempty"`

	// TemplateName Template name
	TemplateName *string `form:"templateName,omitempty" json:"templateName,omitempty"`
}

// ApiPermissionsRemoveUserParams defines parameters for ApiPermissionsRemoveUser.
type ApiPermissionsRemoveUserParams struct {
	// Login User login
	Login string `form:"login" json:"login"`

	// Permission The permission you would like to revoke from the user.<ul><li>Possible values for global permissions: admin, profileadmin, gateadmin, scan, provisioning</li><li>Possible values for project permissions admin, codeviewer, issueadmin, securityhotspotadmin, scan, user</li></ul>
	Permission string `form:"permission" json:"permission"`

	// ProjectId Project id
	ProjectId *string `form:"projectId,omitempty" json:"projectId,omitempty"`

	// ProjectKey Project key
	ProjectKey *string `form:"projectKey,omitempty" json:"projectKey,omitempty"`
}

// ApiPermissionsRemoveUserFromTemplateParams defines parameters for ApiPermissionsRemoveUserFromTemplate.
type ApiPermissionsRemoveUserFromTemplateParams struct {
	// Login User login
	Login string `form:"login" json:"login"`

	// Permission Permission<ul><li>Possible values for project permissions admin, codeviewer, issueadmin, securityhotspotadmin, scan, user</li></ul>
	Permission string `form:"permission" json:"permission"`

	// TemplateId Template id
	TemplateId *string `form:"templateId,omitempty" json:"templateId,omitempty"`

	// TemplateName Template name
	TemplateName *string `form:"templateName,omitempty" json:"templateName,omitempty"`
}

// ApiPermissionsSearchTemplatesParams defines parameters for ApiPermissionsSearchTemplates.
type ApiPermissionsSearchTemplatesParams struct {
	// Q Limit search to permission template names that contain the supplied string.
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// ApiPermissionsSetDefaultTemplateParams defines parameters for ApiPermissionsSetDefaultTemplate.
type ApiPermissionsSetDefaultTemplateParams struct {
	// Qualifier Project qualifier. Filter the results with the specified qualifier. Possible values are:<ul><li>TRK - Projects</li></ul>
	Qualifier *string `form:"qualifier,omitempty" json:"qualifier,omitempty"`

	// TemplateId Template id
	TemplateId *string `form:"templateId,omitempty" json:"templateId,omitempty"`

	// TemplateName Template name
	TemplateName *string `form:"templateName,omitempty" json:"templateName,omitempty"`
}

// ApiPermissionsUpdateTemplateParams defines parameters for ApiPermissionsUpdateTemplate.
type ApiPermissionsUpdateTemplateParams struct {
	// Description Description
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// Id Id
	Id string `form:"id" json:"id"`

	// Name Name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// ProjectKeyPattern Project key pattern. Must be a valid Java regular expression
	ProjectKeyPattern *string `form:"projectKeyPattern,omitempty" json:"projectKeyPattern,omitempty"`
}

// ApiPluginsInstallParams defines parameters for ApiPluginsInstall.
type ApiPluginsInstallParams struct {
	// Key The key identifying the plugin to install
	Key string `form:"key" json:"key"`
}

// ApiPluginsInstalledParams defines parameters for ApiPluginsInstalled.
type ApiPluginsInstalledParams struct {
	// F Comma-separated list of the additional fields to be returned in response. No additional field is returned by default. Possible values are:<ul><li>category - category as defined in the Update Center. A connection to the Update Center is needed</li></ul>
	F *string `form:"f,omitempty" json:"f,omitempty"`
}

// ApiPluginsUninstallParams defines parameters for ApiPluginsUninstall.
type ApiPluginsUninstallParams struct {
	// Key The key identifying the plugin to uninstall
	Key string `form:"key" json:"key"`
}

// ApiPluginsUpdateParams defines parameters for ApiPluginsUpdate.
type ApiPluginsUpdateParams struct {
	// Key The key identifying the plugin to update
	Key string `form:"key" json:"key"`
}

// ApiProjectAnalysesCreateEventParams defines parameters for ApiProjectAnalysesCreateEvent.
type ApiProjectAnalysesCreateEventParams struct {
	// Analysis Analysis key
	Analysis string `form:"analysis" json:"analysis"`

	// Category Category
	Category *string `form:"category,omitempty" json:"category,omitempty"`

	// Name Name
	Name string `form:"name" json:"name"`
}

// ApiProjectAnalysesDeleteParams defines parameters for ApiProjectAnalysesDelete.
type ApiProjectAnalysesDeleteParams struct {
	// Analysis Analysis key
	Analysis string `form:"analysis" json:"analysis"`
}

// ApiProjectAnalysesDeleteEventParams defines parameters for ApiProjectAnalysesDeleteEvent.
type ApiProjectAnalysesDeleteEventParams struct {
	// Event Event key
	Event string `form:"event" json:"event"`
}

// ApiProjectAnalysesSearchParams defines parameters for ApiProjectAnalysesSearch.
type ApiProjectAnalysesSearchParams struct {
	// Category Event category. Filter analyses that have at least one event of the category specified.
	Category *string `form:"category,omitempty" json:"category,omitempty"`

	// From Filter analyses created after the given date (inclusive). <br>Either a date (server timezone) or datetime can be provided
	From *string `form:"from,omitempty" json:"from,omitempty"`

	// P 1-based page number
	P *string `form:"p,omitempty" json:"p,omitempty"`

	// Project Project key
	Project string `form:"project" json:"project"`

	// Ps Page size. Must be greater than 0 and less or equal than 500
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`

	// To Filter analyses created before the given date (inclusive). <br>Either a date (server timezone) or datetime can be provided
	To *string `form:"to,omitempty" json:"to,omitempty"`
}

// ApiProjectAnalysesSetBaselineParams defines parameters for ApiProjectAnalysesSetBaseline.
type ApiProjectAnalysesSetBaselineParams struct {
	// Analysis Analysis key
	Analysis string `form:"analysis" json:"analysis"`

	// Branch Branch key
	Branch *string `form:"branch,omitempty" json:"branch,omitempty"`

	// Project Project key
	Project string `form:"project" json:"project"`
}

// ApiProjectAnalysesUnsetBaselineParams defines parameters for ApiProjectAnalysesUnsetBaseline.
type ApiProjectAnalysesUnsetBaselineParams struct {
	// Branch Branch key
	Branch *string `form:"branch,omitempty" json:"branch,omitempty"`

	// Project Project key
	Project string `form:"project" json:"project"`
}

// ApiProjectAnalysesUpdateEventParams defines parameters for ApiProjectAnalysesUpdateEvent.
type ApiProjectAnalysesUpdateEventParams struct {
	// Event Event key
	Event string `form:"event" json:"event"`

	// Name New name
	Name string `form:"name" json:"name"`
}

// ApiProjectBadgesMeasureParams defines parameters for ApiProjectBadgesMeasure.
type ApiProjectBadgesMeasureParams struct {
	// Branch Branch key
	Branch *string `form:"branch,omitempty" json:"branch,omitempty"`

	// Metric Metric key
	Metric string `form:"metric" json:"metric"`

	// Project Project or application key
	Project string `form:"project" json:"project"`

	// Token Project badge token
	Token *string `form:"token,omitempty" json:"token,omitempty"`
}

// ApiProjectBadgesQualityGateParams defines parameters for ApiProjectBadgesQualityGate.
type ApiProjectBadgesQualityGateParams struct {
	// Branch Branch key
	Branch *string `form:"branch,omitempty" json:"branch,omitempty"`

	// Project Project or application key
	Project string `form:"project" json:"project"`

	// Token Project badge token
	Token *string `form:"token,omitempty" json:"token,omitempty"`
}

// ApiProjectBadgesRenewTokenParams defines parameters for ApiProjectBadgesRenewToken.
type ApiProjectBadgesRenewTokenParams struct {
	// Project Project or application key
	Project string `form:"project" json:"project"`
}

// ApiProjectBadgesTokenParams defines parameters for ApiProjectBadgesToken.
type ApiProjectBadgesTokenParams struct {
	// Project Project or application key
	Project string `form:"project" json:"project"`
}

// ApiProjectBranchesDeleteParams defines parameters for ApiProjectBranchesDelete.
type ApiProjectBranchesDeleteParams struct {
	// Branch Branch key
	Branch string `form:"branch" json:"branch"`

	// Project Project key
	Project string `form:"project" json:"project"`
}

// ApiProjectBranchesListParams defines parameters for ApiProjectBranchesList.
type ApiProjectBranchesListParams struct {
	// Project Project key
	Project string `form:"project" json:"project"`
}

// ApiProjectBranchesRenameParams defines parameters for ApiProjectBranchesRename.
type ApiProjectBranchesRenameParams struct {
	// Name New name of the main branch
	Name string `form:"name" json:"name"`

	// Project Project key
	Project string `form:"project" json:"project"`
}

// ApiProjectBranchesSetAutomaticDeletionProtectionParams defines parameters for ApiProjectBranchesSetAutomaticDeletionProtection.
type ApiProjectBranchesSetAutomaticDeletionProtectionParams struct {
	// Branch Branch key
	Branch string `form:"branch" json:"branch"`

	// Project Project key
	Project string `form:"project" json:"project"`

	// Value Sets whether the branch should be protected from automatic deletion when it hasn't been analyzed for a set period of time.
	Value string `form:"value" json:"value"`
}

// ApiProjectDumpExportParams defines parameters for ApiProjectDumpExport.
type ApiProjectDumpExportParams struct {
	// Key null
	Key string `form:"key" json:"key"`
}

// ApiProjectLinksCreateParams defines parameters for ApiProjectLinksCreate.
type ApiProjectLinksCreateParams struct {
	// Name Link name
	Name string `form:"name" json:"name"`

	// ProjectId Project id
	ProjectId *string `form:"projectId,omitempty" json:"projectId,omitempty"`

	// ProjectKey Project key
	ProjectKey *string `form:"projectKey,omitempty" json:"projectKey,omitempty"`

	// Url Link url
	Url string `form:"url" json:"url"`
}

// ApiProjectLinksDeleteParams defines parameters for ApiProjectLinksDelete.
type ApiProjectLinksDeleteParams struct {
	// Id Link id
	Id string `form:"id" json:"id"`
}

// ApiProjectLinksSearchParams defines parameters for ApiProjectLinksSearch.
type ApiProjectLinksSearchParams struct {
	// ProjectId Project Id
	ProjectId *string `form:"projectId,omitempty" json:"projectId,omitempty"`

	// ProjectKey Project Key
	ProjectKey *string `form:"projectKey,omitempty" json:"projectKey,omitempty"`
}

// ApiProjectTagsSearchParams defines parameters for ApiProjectTagsSearch.
type ApiProjectTagsSearchParams struct {
	// P 1-based page number
	P *string `form:"p,omitempty" json:"p,omitempty"`

	// Ps Page size. Must be greater than 0 and less or equal than 100
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`

	// Q Limit search to tags that contain the supplied string.
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// ApiProjectTagsSetParams defines parameters for ApiProjectTagsSet.
type ApiProjectTagsSetParams struct {
	// Project Project key
	Project string `form:"project" json:"project"`

	// Tags Comma-separated list of tags
	Tags string `form:"tags" json:"tags"`
}

// ApiProjectsBulkDeleteParams defines parameters for ApiProjectsBulkDelete.
type ApiProjectsBulkDeleteParams struct {
	// AnalyzedBefore Filter the projects for which last analysis of any branch is older than the given date (exclusive).<br> Either a date (server timezone) or datetime can be provided.
	AnalyzedBefore *string `form:"analyzedBefore,omitempty" json:"analyzedBefore,omitempty"`

	// OnProvisionedOnly Filter the projects that are provisioned
	OnProvisionedOnly *string `form:"onProvisionedOnly,omitempty" json:"onProvisionedOnly,omitempty"`

	// Projects Comma-separated list of project keys
	Projects *string `form:"projects,omitempty" json:"projects,omitempty"`

	// Q Limit to: <ul><li>component names that contain the supplied string</li><li>component keys that contain the supplied string</li></ul>
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Qualifiers Comma-separated list of component qualifiers. Filter the results with the specified qualifiers
	Qualifiers *string `form:"qualifiers,omitempty" json:"qualifiers,omitempty"`
}

// ApiProjectsCreateParams defines parameters for ApiProjectsCreate.
type ApiProjectsCreateParams struct {
	// MainBranch Key of the main branch of the project. If not provided, the default main branch key will be used.
	MainBranch *string `form:"mainBranch,omitempty" json:"mainBranch,omitempty"`

	// Name Name of the project. If name is longer than 500, it is abbreviated.
	Name string `form:"name" json:"name"`

	// Project Key of the project
	Project string `form:"project" json:"project"`

	// Visibility Whether the created project should be visible to everyone, or only specific user/groups.<br/>If no visibility is specified, the default project visibility will be used.
	Visibility *string `form:"visibility,omitempty" json:"visibility,omitempty"`
}

// ApiProjectsDeleteParams defines parameters for ApiProjectsDelete.
type ApiProjectsDeleteParams struct {
	// Project Project key
	Project string `form:"project" json:"project"`
}

// ApiProjectsSearchParams defines parameters for ApiProjectsSearch.
type ApiProjectsSearchParams struct {
	// AnalyzedBefore Filter the projects for which the last analysis of all branches are older than the given date (exclusive).<br> Either a date (server timezone) or datetime can be provided.
	AnalyzedBefore *string `form:"analyzedBefore,omitempty" json:"analyzedBefore,omitempty"`

	// OnProvisionedOnly Filter the projects that are provisioned
	OnProvisionedOnly *string `form:"onProvisionedOnly,omitempty" json:"onProvisionedOnly,omitempty"`

	// P 1-based page number
	P *string `form:"p,omitempty" json:"p,omitempty"`

	// Projects Comma-separated list of project keys
	Projects *string `form:"projects,omitempty" json:"projects,omitempty"`

	// Ps Page size. Must be greater than 0 and less or equal than 500
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`

	// Q Limit search to: <ul><li>component names that contain the supplied string</li><li>component keys that contain the supplied string</li></ul>
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Qualifiers Comma-separated list of component qualifiers. Filter the results with the specified qualifiers
	Qualifiers *string `form:"qualifiers,omitempty" json:"qualifiers,omitempty"`
}

// ApiProjectsUpdateKeyParams defines parameters for ApiProjectsUpdateKey.
type ApiProjectsUpdateKeyParams struct {
	// From Project key
	From string `form:"from" json:"from"`

	// To New project key
	To string `form:"to" json:"to"`
}

// ApiProjectsUpdateVisibilityParams defines parameters for ApiProjectsUpdateVisibility.
type ApiProjectsUpdateVisibilityParams struct {
	// Project Project key
	Project string `form:"project" json:"project"`

	// Visibility New visibility
	Visibility string `form:"visibility" json:"visibility"`
}

// ApiQualitygatesCopyParams defines parameters for ApiQualitygatesCopy.
type ApiQualitygatesCopyParams struct {
	// Id The ID of the source quality gate. This parameter is deprecated. Use 'sourceName' instead.
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Name The name of the quality gate to create
	Name string `form:"name" json:"name"`

	// SourceName The name of the quality gate to copy
	SourceName *string `form:"sourceName,omitempty" json:"sourceName,omitempty"`
}

// ApiQualitygatesCreateParams defines parameters for ApiQualitygatesCreate.
type ApiQualitygatesCreateParams struct {
	// Name The name of the quality gate to create
	Name string `form:"name" json:"name"`
}

// ApiQualitygatesCreateConditionParams defines parameters for ApiQualitygatesCreateCondition.
type ApiQualitygatesCreateConditionParams struct {
	// Error Condition error threshold
	Error string `form:"error" json:"error"`

	// GateId ID of the quality gate. This parameter is deprecated. Use 'gateName' instead.
	GateId *string `form:"gateId,omitempty" json:"gateId,omitempty"`

	// GateName Name of the quality gate
	GateName *string `form:"gateName,omitempty" json:"gateName,omitempty"`

	// Metric Condition metric.<br/> Only metric of the following types are allowed:<ul><li>INT</li><li>MILLISEC</li><li>RATING</li><li>WORK_DUR</li><li>FLOAT</li><li>PERCENT</li><li>LEVEL</li></ul>Following metrics are forbidden:<ul><li>security_hotspots</li><li>new_security_hotspots</li><li>alert_status</li></ul>
	Metric string `form:"metric" json:"metric"`

	// Op Condition operator:<br/><ul><li>LT = is lower than</li><li>GT = is greater than</li></ul>
	Op *string `form:"op,omitempty" json:"op,omitempty"`
}

// ApiQualitygatesDeleteConditionParams defines parameters for ApiQualitygatesDeleteCondition.
type ApiQualitygatesDeleteConditionParams struct {
	// Id Condition UUID
	Id string `form:"id" json:"id"`
}

// ApiQualitygatesDeselectParams defines parameters for ApiQualitygatesDeselect.
type ApiQualitygatesDeselectParams struct {
	// ProjectKey Project key
	ProjectKey string `form:"projectKey" json:"projectKey"`
}

// ApiQualitygatesDestroyParams defines parameters for ApiQualitygatesDestroy.
type ApiQualitygatesDestroyParams struct {
	// Id ID of the quality gate to delete. This parameter is deprecated. Use 'name' instead.
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Name Name of the quality gate to delete
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// ApiQualitygatesGetByProjectParams defines parameters for ApiQualitygatesGetByProject.
type ApiQualitygatesGetByProjectParams struct {
	// Project Project key
	Project string `form:"project" json:"project"`
}

// ApiQualitygatesProjectStatusParams defines parameters for ApiQualitygatesProjectStatus.
type ApiQualitygatesProjectStatusParams struct {
	// AnalysisId Analysis id
	AnalysisId *string `form:"analysisId,omitempty" json:"analysisId,omitempty"`

	// Branch Branch key
	Branch *string `form:"branch,omitempty" json:"branch,omitempty"`

	// ProjectId Project UUID. Doesn't work with branches or pull requests
	ProjectId *string `form:"projectId,omitempty" json:"projectId,omitempty"`

	// ProjectKey Project key
	ProjectKey *string `form:"projectKey,omitempty" json:"projectKey,omitempty"`

	// PullRequest Pull request id
	PullRequest *string `form:"pullRequest,omitempty" json:"pullRequest,omitempty"`
}

// ApiQualitygatesRenameParams defines parameters for ApiQualitygatesRename.
type ApiQualitygatesRenameParams struct {
	// CurrentName Current name of the quality gate
	CurrentName *string `form:"currentName,omitempty" json:"currentName,omitempty"`

	// Id ID of the quality gate to rename. This parameter is deprecated. Use 'currentName' instead.
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Name New name of the quality gate
	Name string `form:"name" json:"name"`
}

// ApiQualitygatesSearchParams defines parameters for ApiQualitygatesSearch.
type ApiQualitygatesSearchParams struct {
	// GateId Quality Gate ID. This parameter is deprecated. Use 'gateName' instead.
	GateId *string `form:"gateId,omitempty" json:"gateId,omitempty"`

	// GateName Quality Gate name
	GateName *string `form:"gateName,omitempty" json:"gateName,omitempty"`

	// Page Page number
	Page *string `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Page size
	PageSize *string `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Query To search for projects containing this string. If this parameter is set, "selected" is set to "all".
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Selected Depending on the value, show only selected items (selected=selected), deselected items (selected=deselected), or all items with their selection status (selected=all).
	Selected *string `form:"selected,omitempty" json:"selected,omitempty"`
}

// ApiQualitygatesSelectParams defines parameters for ApiQualitygatesSelect.
type ApiQualitygatesSelectParams struct {
	// GateId Quality gate ID. This parameter is deprecated. Use 'gateName' instead.
	GateId *string `form:"gateId,omitempty" json:"gateId,omitempty"`

	// GateName Name of the quality gate
	GateName *string `form:"gateName,omitempty" json:"gateName,omitempty"`

	// ProjectKey Project key
	ProjectKey string `form:"projectKey" json:"projectKey"`
}

// ApiQualitygatesSetAsDefaultParams defines parameters for ApiQualitygatesSetAsDefault.
type ApiQualitygatesSetAsDefaultParams struct {
	// Id ID of the quality gate to set as default. This parameter is deprecated. Use 'name' instead.
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Name Name of the quality gate to set as default
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// ApiQualitygatesShowParams defines parameters for ApiQualitygatesShow.
type ApiQualitygatesShowParams struct {
	// Id ID of the quality gate. Either id or name must be set
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Name Name of the quality gate. Either id or name must be set
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// ApiQualitygatesUpdateConditionParams defines parameters for ApiQualitygatesUpdateCondition.
type ApiQualitygatesUpdateConditionParams struct {
	// Error Condition error threshold
	Error string `form:"error" json:"error"`

	// Id Condition ID
	Id string `form:"id" json:"id"`

	// Metric Condition metric.<br/> Only metric of the following types are allowed:<ul><li>INT</li><li>MILLISEC</li><li>RATING</li><li>WORK_DUR</li><li>FLOAT</li><li>PERCENT</li><li>LEVEL</li></ul>Following metrics are forbidden:<ul><li>security_hotspots</li><li>new_security_hotspots</li><li>alert_status</li></ul>
	Metric string `form:"metric" json:"metric"`

	// Op Condition operator:<br/><ul><li>LT = is lower than</li><li>GT = is greater than</li></ul>
	Op *string `form:"op,omitempty" json:"op,omitempty"`
}

// ApiQualityprofilesActivateRuleParams defines parameters for ApiQualityprofilesActivateRule.
type ApiQualityprofilesActivateRuleParams struct {
	// Key Quality Profile key. Can be obtained through <code>api/qualityprofiles/search</code>
	Key string `form:"key" json:"key"`

	// Params Parameters as semi-colon list of <code>key=value</code>. Ignored if parameter reset is true.
	Params *string `form:"params,omitempty" json:"params,omitempty"`

	// Reset Reset severity and parameters of activated rule. Set the values defined on parent profile or from rule default values.
	Reset *string `form:"reset,omitempty" json:"reset,omitempty"`

	// Rule Rule key
	Rule string `form:"rule" json:"rule"`

	// Severity Severity. Ignored if parameter reset is true.
	Severity *string `form:"severity,omitempty" json:"severity,omitempty"`
}

// ApiQualityprofilesActivateRulesParams defines parameters for ApiQualityprofilesActivateRules.
type ApiQualityprofilesActivateRulesParams struct {
	// Activation Filter rules that are activated or deactivated on the selected Quality profile. Ignored if the parameter 'qprofile' is not set.
	Activation *string `form:"activation,omitempty" json:"activation,omitempty"`

	// ActiveSeverities Comma-separated list of activation severities, i.e the severity of rules in Quality profiles.
	ActiveSeverities *string `form:"active_severities,omitempty" json:"active_severities,omitempty"`

	// Asc Ascending sort
	Asc *string `form:"asc,omitempty" json:"asc,omitempty"`

	// AvailableSince Filters rules added since date. Format is yyyy-MM-dd
	AvailableSince *string `form:"available_since,omitempty" json:"available_since,omitempty"`

	// Cwe Comma-separated list of CWE identifiers. Use 'unknown' to select rules not associated to any CWE.
	Cwe *string `form:"cwe,omitempty" json:"cwe,omitempty"`

	// Inheritance Comma-separated list of values of inheritance for a rule within a quality profile. Used only if the parameter 'activation' is set.
	Inheritance *string `form:"inheritance,omitempty" json:"inheritance,omitempty"`

	// IsTemplate Filter template rules
	IsTemplate *string `form:"is_template,omitempty" json:"is_template,omitempty"`

	// Languages Comma-separated list of languages
	Languages *string `form:"languages,omitempty" json:"languages,omitempty"`

	// OwaspTop10 Comma-separated list of OWASP Top 10 2017 lowercase categories.
	OwaspTop10 *string `form:"owaspTop10,omitempty" json:"owaspTop10,omitempty"`

	// OwaspTop102021 Comma-separated list of OWASP Top 10 2021 lowercase categories.
	OwaspTop102021 *string `form:"owaspTop10-2021,omitempty" json:"owaspTop10-2021,omitempty"`

	// Q UTF-8 search query
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Qprofile Quality profile key to filter on. Used only if the parameter 'activation' is set.
	Qprofile *string `form:"qprofile,omitempty" json:"qprofile,omitempty"`

	// Repositories Comma-separated list of repositories
	Repositories *string `form:"repositories,omitempty" json:"repositories,omitempty"`

	// RuleKey Key of rule to search for
	RuleKey *string `form:"rule_key,omitempty" json:"rule_key,omitempty"`

	// S Sort field
	S *string `form:"s,omitempty" json:"s,omitempty"`

	// SansTop25 Comma-separated list of SANS Top 25 categories.
	SansTop25 *string `form:"sansTop25,omitempty" json:"sansTop25,omitempty"`

	// Severities Comma-separated list of default severities. Not the same than severity of rules in Quality profiles.
	Severities *string `form:"severities,omitempty" json:"severities,omitempty"`

	// SonarsourceSecurity Comma-separated list of SonarSource security categories. Use 'others' to select rules not associated with any category
	SonarsourceSecurity *string `form:"sonarsourceSecurity,omitempty" json:"sonarsourceSecurity,omitempty"`

	// Statuses Comma-separated list of status codes
	Statuses *string `form:"statuses,omitempty" json:"statuses,omitempty"`

	// Tags Comma-separated list of tags. Returned rules match any of the tags (OR operator)
	Tags *string `form:"tags,omitempty" json:"tags,omitempty"`

	// TargetKey Quality Profile key on which the rule activation is done. To retrieve a quality profile key please see <code>api/qualityprofiles/search</code>
	TargetKey string `form:"targetKey" json:"targetKey"`

	// TargetSeverity Severity to set on the activated rules
	TargetSeverity *string `form:"targetSeverity,omitempty" json:"targetSeverity,omitempty"`

	// TemplateKey Key of the template rule to filter on. Used to search for the custom rules based on this template.
	TemplateKey *string `form:"template_key,omitempty" json:"template_key,omitempty"`

	// Types Comma-separated list of types. Returned rules match any of the tags (OR operator)
	Types *string `form:"types,omitempty" json:"types,omitempty"`
}

// ApiQualityprofilesAddProjectParams defines parameters for ApiQualityprofilesAddProject.
type ApiQualityprofilesAddProjectParams struct {
	// Language Quality profile language.
	Language string `form:"language" json:"language"`

	// Project Project key
	Project string `form:"project" json:"project"`

	// QualityProfile Quality profile name.
	QualityProfile string `form:"qualityProfile" json:"qualityProfile"`
}

// ApiQualityprofilesBackupParams defines parameters for ApiQualityprofilesBackup.
type ApiQualityprofilesBackupParams struct {
	// Language Quality profile language.
	Language string `form:"language" json:"language"`

	// QualityProfile Quality profile name.
	QualityProfile string `form:"qualityProfile" json:"qualityProfile"`
}

// ApiQualityprofilesChangeParentParams defines parameters for ApiQualityprofilesChangeParent.
type ApiQualityprofilesChangeParentParams struct {
	// Language Quality profile language.
	Language string `form:"language" json:"language"`

	// ParentQualityProfile New parent profile name. <br> If no profile is provided, the inheritance link with current parent profile (if any) is broken, which deactivates all rules which come from the parent and are not overridden.
	ParentQualityProfile *string `form:"parentQualityProfile,omitempty" json:"parentQualityProfile,omitempty"`

	// QualityProfile Quality profile name.
	QualityProfile string `form:"qualityProfile" json:"qualityProfile"`
}

// ApiQualityprofilesChangelogParams defines parameters for ApiQualityprofilesChangelog.
type ApiQualityprofilesChangelogParams struct {
	// Language Quality profile language.
	Language string `form:"language" json:"language"`

	// P 1-based page number
	P *string `form:"p,omitempty" json:"p,omitempty"`

	// Ps Page size. Must be greater than 0 and less or equal than 500
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`

	// QualityProfile Quality profile name.
	QualityProfile string `form:"qualityProfile" json:"qualityProfile"`

	// Since Start date for the changelog (inclusive). <br>Either a date (server timezone) or datetime can be provided.
	Since *string `form:"since,omitempty" json:"since,omitempty"`

	// To End date for the changelog (exclusive, strictly before). <br>Either a date (server timezone) or datetime can be provided.
	To *string `form:"to,omitempty" json:"to,omitempty"`
}

// ApiQualityprofilesCopyParams defines parameters for ApiQualityprofilesCopy.
type ApiQualityprofilesCopyParams struct {
	// FromKey Quality profile key
	FromKey string `form:"fromKey" json:"fromKey"`

	// ToName Name for the new quality profile.
	ToName string `form:"toName" json:"toName"`
}

// ApiQualityprofilesCreateParams defines parameters for ApiQualityprofilesCreate.
type ApiQualityprofilesCreateParams struct {
	// Language Quality profile language
	Language string `form:"language" json:"language"`

	// Name Quality profile name
	Name string `form:"name" json:"name"`
}

// ApiQualityprofilesDeactivateRuleParams defines parameters for ApiQualityprofilesDeactivateRule.
type ApiQualityprofilesDeactivateRuleParams struct {
	// Key Quality Profile key. Can be obtained through <code>api/qualityprofiles/search</code>
	Key string `form:"key" json:"key"`

	// Rule Rule key
	Rule string `form:"rule" json:"rule"`
}

// ApiQualityprofilesDeactivateRulesParams defines parameters for ApiQualityprofilesDeactivateRules.
type ApiQualityprofilesDeactivateRulesParams struct {
	// Activation Filter rules that are activated or deactivated on the selected Quality profile. Ignored if the parameter 'qprofile' is not set.
	Activation *string `form:"activation,omitempty" json:"activation,omitempty"`

	// ActiveSeverities Comma-separated list of activation severities, i.e the severity of rules in Quality profiles.
	ActiveSeverities *string `form:"active_severities,omitempty" json:"active_severities,omitempty"`

	// Asc Ascending sort
	Asc *string `form:"asc,omitempty" json:"asc,omitempty"`

	// AvailableSince Filters rules added since date. Format is yyyy-MM-dd
	AvailableSince *string `form:"available_since,omitempty" json:"available_since,omitempty"`

	// Cwe Comma-separated list of CWE identifiers. Use 'unknown' to select rules not associated to any CWE.
	Cwe *string `form:"cwe,omitempty" json:"cwe,omitempty"`

	// Inheritance Comma-separated list of values of inheritance for a rule within a quality profile. Used only if the parameter 'activation' is set.
	Inheritance *string `form:"inheritance,omitempty" json:"inheritance,omitempty"`

	// IsTemplate Filter template rules
	IsTemplate *string `form:"is_template,omitempty" json:"is_template,omitempty"`

	// Languages Comma-separated list of languages
	Languages *string `form:"languages,omitempty" json:"languages,omitempty"`

	// OwaspTop10 Comma-separated list of OWASP Top 10 2017 lowercase categories.
	OwaspTop10 *string `form:"owaspTop10,omitempty" json:"owaspTop10,omitempty"`

	// OwaspTop102021 Comma-separated list of OWASP Top 10 2021 lowercase categories.
	OwaspTop102021 *string `form:"owaspTop10-2021,omitempty" json:"owaspTop10-2021,omitempty"`

	// Q UTF-8 search query
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Qprofile Quality profile key to filter on. Used only if the parameter 'activation' is set.
	Qprofile *string `form:"qprofile,omitempty" json:"qprofile,omitempty"`

	// Repositories Comma-separated list of repositories
	Repositories *string `form:"repositories,omitempty" json:"repositories,omitempty"`

	// RuleKey Key of rule to search for
	RuleKey *string `form:"rule_key,omitempty" json:"rule_key,omitempty"`

	// S Sort field
	S *string `form:"s,omitempty" json:"s,omitempty"`

	// SansTop25 Comma-separated list of SANS Top 25 categories.
	SansTop25 *string `form:"sansTop25,omitempty" json:"sansTop25,omitempty"`

	// Severities Comma-separated list of default severities. Not the same than severity of rules in Quality profiles.
	Severities *string `form:"severities,omitempty" json:"severities,omitempty"`

	// SonarsourceSecurity Comma-separated list of SonarSource security categories. Use 'others' to select rules not associated with any category
	SonarsourceSecurity *string `form:"sonarsourceSecurity,omitempty" json:"sonarsourceSecurity,omitempty"`

	// Statuses Comma-separated list of status codes
	Statuses *string `form:"statuses,omitempty" json:"statuses,omitempty"`

	// Tags Comma-separated list of tags. Returned rules match any of the tags (OR operator)
	Tags *string `form:"tags,omitempty" json:"tags,omitempty"`

	// TargetKey Quality Profile key on which the rule deactivation is done. To retrieve a profile key please see <code>api/qualityprofiles/search</code>
	TargetKey string `form:"targetKey" json:"targetKey"`

	// TemplateKey Key of the template rule to filter on. Used to search for the custom rules based on this template.
	TemplateKey *string `form:"template_key,omitempty" json:"template_key,omitempty"`

	// Types Comma-separated list of types. Returned rules match any of the tags (OR operator)
	Types *string `form:"types,omitempty" json:"types,omitempty"`
}

// ApiQualityprofilesDeleteParams defines parameters for ApiQualityprofilesDelete.
type ApiQualityprofilesDeleteParams struct {
	// Language Quality profile language.
	Language string `form:"language" json:"language"`

	// QualityProfile Quality profile name.
	QualityProfile string `form:"qualityProfile" json:"qualityProfile"`
}

// ApiQualityprofilesExportParams defines parameters for ApiQualityprofilesExport.
type ApiQualityprofilesExportParams struct {
	// ExporterKey Output format. If left empty, the same format as api/qualityprofiles/backup is used. Possible values are described by api/qualityprofiles/exporters.
	ExporterKey *string `form:"exporterKey,omitempty" json:"exporterKey,omitempty"`

	// Language Quality profile language
	Language string `form:"language" json:"language"`

	// QualityProfile Quality profile name to export. If left empty, the default profile for the language is exported.
	QualityProfile *string `form:"qualityProfile,omitempty" json:"qualityProfile,omitempty"`
}

// ApiQualityprofilesInheritanceParams defines parameters for ApiQualityprofilesInheritance.
type ApiQualityprofilesInheritanceParams struct {
	// Language Quality profile language.
	Language string `form:"language" json:"language"`

	// QualityProfile Quality profile name.
	QualityProfile string `form:"qualityProfile" json:"qualityProfile"`
}

// ApiQualityprofilesProjectsParams defines parameters for ApiQualityprofilesProjects.
type ApiQualityprofilesProjectsParams struct {
	// Key Quality profile key
	Key string `form:"key" json:"key"`

	// P 1-based page number
	P *string `form:"p,omitempty" json:"p,omitempty"`

	// Ps Page size. Must be greater than 0 and less or equal than 500
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`

	// Q Limit search to projects that contain the supplied string.
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Selected Depending on the value, show only selected items (selected=selected), deselected items (selected=deselected), or all items with their selection status (selected=all).
	Selected *string `form:"selected,omitempty" json:"selected,omitempty"`
}

// ApiQualityprofilesRemoveProjectParams defines parameters for ApiQualityprofilesRemoveProject.
type ApiQualityprofilesRemoveProjectParams struct {
	// Language Quality profile language.
	Language string `form:"language" json:"language"`

	// Project Project key
	Project string `form:"project" json:"project"`

	// QualityProfile Quality profile name.
	QualityProfile string `form:"qualityProfile" json:"qualityProfile"`
}

// ApiQualityprofilesRenameParams defines parameters for ApiQualityprofilesRename.
type ApiQualityprofilesRenameParams struct {
	// Key Quality profile key
	Key string `form:"key" json:"key"`

	// Name New quality profile name
	Name string `form:"name" json:"name"`
}

// ApiQualityprofilesRestoreParams defines parameters for ApiQualityprofilesRestore.
type ApiQualityprofilesRestoreParams struct {
	// Backup A profile backup file in XML format, as generated by api/qualityprofiles/backup or the former api/profiles/backup.
	Backup string `form:"backup" json:"backup"`
}

// ApiQualityprofilesSearchParams defines parameters for ApiQualityprofilesSearch.
type ApiQualityprofilesSearchParams struct {
	// Defaults If set to true, return only the quality profiles marked as default for each language
	Defaults *string `form:"defaults,omitempty" json:"defaults,omitempty"`

	// Language Language key. If provided, only profiles for the given language are returned.
	Language *string `form:"language,omitempty" json:"language,omitempty"`

	// Project Project key
	Project *string `form:"project,omitempty" json:"project,omitempty"`

	// QualityProfile Quality profile name
	QualityProfile *string `form:"qualityProfile,omitempty" json:"qualityProfile,omitempty"`
}

// ApiQualityprofilesSetDefaultParams defines parameters for ApiQualityprofilesSetDefault.
type ApiQualityprofilesSetDefaultParams struct {
	// Language Quality profile language.
	Language string `form:"language" json:"language"`

	// QualityProfile Quality profile name.
	QualityProfile string `form:"qualityProfile" json:"qualityProfile"`
}

// ApiRulesCreateParams defines parameters for ApiRulesCreate.
type ApiRulesCreateParams struct {
	// CustomKey Key of the custom rule
	CustomKey string `form:"customKey" json:"customKey"`

	// MarkdownDescription Rule description in <a href='/formatting/help'>markdown format</a>
	MarkdownDescription string `form:"markdownDescription" json:"markdownDescription"`

	// Name Rule name
	Name string `form:"name" json:"name"`

	// Params Parameters as semi-colon list of <key>=<value>, for example 'params=key1=v1;key2=v2' (Only for custom rule)
	Params *string `form:"params,omitempty" json:"params,omitempty"`

	// PreventReactivation If set to true and if the rule has been deactivated (status 'REMOVED'), a status 409 will be returned
	PreventReactivation *string `form:"preventReactivation,omitempty" json:"preventReactivation,omitempty"`

	// Severity Rule severity
	Severity *string `form:"severity,omitempty" json:"severity,omitempty"`

	// Status Rule status
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// TemplateKey Key of the template rule in order to create a custom rule (mandatory for custom rule)
	TemplateKey string `form:"templateKey" json:"templateKey"`

	// Type Rule type
	Type *string `form:"type,omitempty" json:"type,omitempty"`
}

// ApiRulesDeleteParams defines parameters for ApiRulesDelete.
type ApiRulesDeleteParams struct {
	// Key Rule key
	Key string `form:"key" json:"key"`
}

// ApiRulesRepositoriesParams defines parameters for ApiRulesRepositories.
type ApiRulesRepositoriesParams struct {
	// Language A language key; if provided, only repositories for the given language will be returned
	Language *string `form:"language,omitempty" json:"language,omitempty"`

	// Q A pattern to match repository keys/names against
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// ApiRulesSearchParams defines parameters for ApiRulesSearch.
type ApiRulesSearchParams struct {
	// Activation Filter rules that are activated or deactivated on the selected Quality profile. Ignored if the parameter 'qprofile' is not set.
	Activation *string `form:"activation,omitempty" json:"activation,omitempty"`

	// ActiveSeverities Comma-separated list of activation severities, i.e the severity of rules in Quality profiles.
	ActiveSeverities *string `form:"active_severities,omitempty" json:"active_severities,omitempty"`

	// Asc Ascending sort
	Asc *string `form:"asc,omitempty" json:"asc,omitempty"`

	// AvailableSince Filters rules added since date. Format is yyyy-MM-dd
	AvailableSince *string `form:"available_since,omitempty" json:"available_since,omitempty"`

	// Cwe Comma-separated list of CWE identifiers. Use 'unknown' to select rules not associated to any CWE.
	Cwe *string `form:"cwe,omitempty" json:"cwe,omitempty"`

	// F Comma-separated list of additional fields to be returned in the response. All the fields are returned by default, except actives.
	F *string `form:"f,omitempty" json:"f,omitempty"`

	// Facets Comma-separated list of the facets to be computed. No facet is computed by default.
	Facets *string `form:"facets,omitempty" json:"facets,omitempty"`

	// IncludeExternal Include external engine rules in the results
	IncludeExternal *string `form:"include_external,omitempty" json:"include_external,omitempty"`

	// Inheritance Comma-separated list of values of inheritance for a rule within a quality profile. Used only if the parameter 'activation' is set.
	Inheritance *string `form:"inheritance,omitempty" json:"inheritance,omitempty"`

	// IsTemplate Filter template rules
	IsTemplate *string `form:"is_template,omitempty" json:"is_template,omitempty"`

	// Languages Comma-separated list of languages
	Languages *string `form:"languages,omitempty" json:"languages,omitempty"`

	// OwaspTop10 Comma-separated list of OWASP Top 10 2017 lowercase categories.
	OwaspTop10 *string `form:"owaspTop10,omitempty" json:"owaspTop10,omitempty"`

	// OwaspTop102021 Comma-separated list of OWASP Top 10 2021 lowercase categories.
	OwaspTop102021 *string `form:"owaspTop10-2021,omitempty" json:"owaspTop10-2021,omitempty"`

	// P 1-based page number
	P *string `form:"p,omitempty" json:"p,omitempty"`

	// Ps Page size. Must be greater than 0 and less or equal than 500
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`

	// Q UTF-8 search query
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Qprofile Quality profile key to filter on. Used only if the parameter 'activation' is set.
	Qprofile *string `form:"qprofile,omitempty" json:"qprofile,omitempty"`

	// Repositories Comma-separated list of repositories
	Repositories *string `form:"repositories,omitempty" json:"repositories,omitempty"`

	// RuleKey Key of rule to search for
	RuleKey *string `form:"rule_key,omitempty" json:"rule_key,omitempty"`

	// S Sort field
	S *string `form:"s,omitempty" json:"s,omitempty"`

	// SansTop25 Comma-separated list of SANS Top 25 categories.
	SansTop25 *string `form:"sansTop25,omitempty" json:"sansTop25,omitempty"`

	// Severities Comma-separated list of default severities. Not the same than severity of rules in Quality profiles.
	Severities *string `form:"severities,omitempty" json:"severities,omitempty"`

	// SonarsourceSecurity Comma-separated list of SonarSource security categories. Use 'others' to select rules not associated with any category
	SonarsourceSecurity *string `form:"sonarsourceSecurity,omitempty" json:"sonarsourceSecurity,omitempty"`

	// Statuses Comma-separated list of status codes
	Statuses *string `form:"statuses,omitempty" json:"statuses,omitempty"`

	// Tags Comma-separated list of tags. Returned rules match any of the tags (OR operator)
	Tags *string `form:"tags,omitempty" json:"tags,omitempty"`

	// TemplateKey Key of the template rule to filter on. Used to search for the custom rules based on this template.
	TemplateKey *string `form:"template_key,omitempty" json:"template_key,omitempty"`

	// Types Comma-separated list of types. Returned rules match any of the tags (OR operator)
	Types *string `form:"types,omitempty" json:"types,omitempty"`
}

// ApiRulesShowParams defines parameters for ApiRulesShow.
type ApiRulesShowParams struct {
	// Actives Show rule's activations for all profiles ("active rules")
	Actives *string `form:"actives,omitempty" json:"actives,omitempty"`

	// Key Rule key
	Key string `form:"key" json:"key"`
}

// ApiRulesTagsParams defines parameters for ApiRulesTags.
type ApiRulesTagsParams struct {
	// Ps Page size. Must be greater than 0 and less or equal than 500
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`

	// Q Limit search to tags that contain the supplied string.
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// ApiRulesUpdateParams defines parameters for ApiRulesUpdate.
type ApiRulesUpdateParams struct {
	// Key Key of the rule to update
	Key string `form:"key" json:"key"`

	// MarkdownDescription Rule description (mandatory for custom rule and manual rule) in <a href='/formatting/help'>markdown format</a>
	MarkdownDescription *string `form:"markdown_description,omitempty" json:"markdown_description,omitempty"`

	// MarkdownNote Optional note in <a href='/formatting/help'>markdown format</a>. Use empty value to remove current note. Note is not changed if the parameter is not set.
	MarkdownNote *string `form:"markdown_note,omitempty" json:"markdown_note,omitempty"`

	// Name Rule name (mandatory for custom rule)
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Params Parameters as semi-colon list of <key>=<value>, for example 'params=key1=v1;key2=v2' (Only when updating a custom rule)
	Params *string `form:"params,omitempty" json:"params,omitempty"`

	// RemediationFnBaseEffort Base effort of the remediation function of the rule
	RemediationFnBaseEffort *string `form:"remediation_fn_base_effort,omitempty" json:"remediation_fn_base_effort,omitempty"`

	// RemediationFnType Type of the remediation function of the rule
	RemediationFnType *string `form:"remediation_fn_type,omitempty" json:"remediation_fn_type,omitempty"`

	// RemediationFyGapMultiplier Gap multiplier of the remediation function of the rule
	RemediationFyGapMultiplier *string `form:"remediation_fy_gap_multiplier,omitempty" json:"remediation_fy_gap_multiplier,omitempty"`

	// Severity Rule severity (Only when updating a custom rule)
	Severity *string `form:"severity,omitempty" json:"severity,omitempty"`

	// Status Rule status (Only when updating a custom rule)
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// Tags Optional comma-separated list of tags to set. Use blank value to remove current tags. Tags are not changed if the parameter is not set.
	Tags *string `form:"tags,omitempty" json:"tags,omitempty"`
}

// ApiSettingsListDefinitionsParams defines parameters for ApiSettingsListDefinitions.
type ApiSettingsListDefinitionsParams struct {
	// Component Component key
	Component *string `form:"component,omitempty" json:"component,omitempty"`
}

// ApiSettingsResetParams defines parameters for ApiSettingsReset.
type ApiSettingsResetParams struct {
	// Component Component key
	Component *string `form:"component,omitempty" json:"component,omitempty"`

	// Keys Comma-separated list of keys
	Keys string `form:"keys" json:"keys"`
}

// ApiSettingsSetParams defines parameters for ApiSettingsSet.
type ApiSettingsSetParams struct {
	// Component Component key
	Component *string `form:"component,omitempty" json:"component,omitempty"`

	// FieldValues Setting field values. To set several values, the parameter must be called once for each value.
	FieldValues *string `form:"fieldValues,omitempty" json:"fieldValues,omitempty"`

	// Key Setting key
	Key string `form:"key" json:"key"`

	// Value Setting value. To reset a value, please use the reset web service.
	Value *string `form:"value,omitempty" json:"value,omitempty"`

	// Values Setting multi value. To set several values, the parameter must be called once for each value.
	Values *string `form:"values,omitempty" json:"values,omitempty"`
}

// ApiSettingsValuesParams defines parameters for ApiSettingsValues.
type ApiSettingsValuesParams struct {
	// Component Component key
	Component *string `form:"component,omitempty" json:"component,omitempty"`

	// Keys List of setting keys
	Keys *string `form:"keys,omitempty" json:"keys,omitempty"`
}

// ApiSourcesRawParams defines parameters for ApiSourcesRaw.
type ApiSourcesRawParams struct {
	// Key File key
	Key string `form:"key" json:"key"`
}

// ApiSourcesScmParams defines parameters for ApiSourcesScm.
type ApiSourcesScmParams struct {
	// CommitsByLine Group lines by SCM commit if value is false, else display commits for each line, even if two consecutive lines relate to the same commit.
	CommitsByLine *string `form:"commits_by_line,omitempty" json:"commits_by_line,omitempty"`

	// From First line to return. Starts at 1
	From *string `form:"from,omitempty" json:"from,omitempty"`

	// Key File key
	Key string `form:"key" json:"key"`

	// To Last line to return (inclusive)
	To *string `form:"to,omitempty" json:"to,omitempty"`
}

// ApiSourcesShowParams defines parameters for ApiSourcesShow.
type ApiSourcesShowParams struct {
	// From First line to return. Starts at 1
	From *string `form:"from,omitempty" json:"from,omitempty"`

	// Key File key
	Key string `form:"key" json:"key"`

	// To Last line to return (inclusive)
	To *string `form:"to,omitempty" json:"to,omitempty"`
}

// ApiSystemChangeLogLevelParams defines parameters for ApiSystemChangeLogLevel.
type ApiSystemChangeLogLevelParams struct {
	// Level The new level. Be cautious: DEBUG, and even more TRACE, may have performance impacts.
	Level string `form:"level" json:"level"`
}

// ApiSystemLogsParams defines parameters for ApiSystemLogs.
type ApiSystemLogsParams struct {
	// Process Process to get logs from
	Process *string `form:"process,omitempty" json:"process,omitempty"`
}

// ApiUserGroupsAddUserParams defines parameters for ApiUserGroupsAddUser.
type ApiUserGroupsAddUserParams struct {
	// Id Group id, use 'name' instead
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Login User login
	Login *string `form:"login,omitempty" json:"login,omitempty"`

	// Name Group name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// ApiUserGroupsCreateParams defines parameters for ApiUserGroupsCreate.
type ApiUserGroupsCreateParams struct {
	// Description Description for the new group. A group description cannot be larger than 200 characters.
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// Name Name for the new group. A group name cannot be larger than 255 characters and must be unique. The value 'anyone' (whatever the case) is reserved and cannot be used.
	Name string `form:"name" json:"name"`
}

// ApiUserGroupsDeleteParams defines parameters for ApiUserGroupsDelete.
type ApiUserGroupsDeleteParams struct {
	// Id Group id, use 'name' instead
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Name Group name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// ApiUserGroupsRemoveUserParams defines parameters for ApiUserGroupsRemoveUser.
type ApiUserGroupsRemoveUserParams struct {
	// Id Group id, use 'name' instead
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Login User login
	Login *string `form:"login,omitempty" json:"login,omitempty"`

	// Name Group name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// ApiUserGroupsSearchParams defines parameters for ApiUserGroupsSearch.
type ApiUserGroupsSearchParams struct {
	// F Comma-separated list of the fields to be returned in response. All the fields are returned by default.
	F *string `form:"f,omitempty" json:"f,omitempty"`

	// P 1-based page number
	P *string `form:"p,omitempty" json:"p,omitempty"`

	// Ps Page size. Must be greater than 0 and less or equal than 500
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`

	// Q Limit search to names that contain the supplied string.
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// ApiUserGroupsUpdateParams defines parameters for ApiUserGroupsUpdate.
type ApiUserGroupsUpdateParams struct {
	// CurrentName Name of the group to be updated. Mandatory unless 'id' is used.
	CurrentName *string `form:"currentName,omitempty" json:"currentName,omitempty"`

	// Description New optional description for the group. A group description cannot be larger than 200 characters. If value is not defined, then description is not changed.
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// Id Identifier of the group. Use 'currentName' instead.
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Name New optional name for the group. A group name cannot be larger than 255 characters and must be unique. Value 'anyone' (whatever the case) is reserved and cannot be used. If value is empty or not defined, then name is not changed.
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// ApiUserGroupsUsersParams defines parameters for ApiUserGroupsUsers.
type ApiUserGroupsUsersParams struct {
	// Id Group id, use 'name' instead
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Name Group name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// P 1-based page number
	P *string `form:"p,omitempty" json:"p,omitempty"`

	// Ps Page size. Must be greater than 0.
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`

	// Q Limit search to names or logins that contain the supplied string.
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Selected Depending on the value, show only selected items (selected=selected), deselected items (selected=deselected), or all items with their selection status (selected=all).
	Selected *string `form:"selected,omitempty" json:"selected,omitempty"`
}

// ApiUserTokensGenerateParams defines parameters for ApiUserTokensGenerate.
type ApiUserTokensGenerateParams struct {
	// ExpirationDate The expiration date of the token being generated, in ISO 8601 format (YYYY-MM-DD). If not set, default to no expiration.
	ExpirationDate *string `form:"expirationDate,omitempty" json:"expirationDate,omitempty"`

	// Login User login. If not set, the token is generated for the authenticated user.
	Login *string `form:"login,omitempty" json:"login,omitempty"`

	// Name Token name
	Name string `form:"name" json:"name"`

	// ProjectKey The key of the only project that can be analyzed by the PROJECT_ANALYSIS_TOKEN being generated.
	ProjectKey *string `form:"projectKey,omitempty" json:"projectKey,omitempty"`

	// Type Token Type. If this parameters is set to PROJECT_ANALYSIS_TOKEN, it is necessary to provide the projectKey parameter too.
	Type *string `form:"type,omitempty" json:"type,omitempty"`
}

// ApiUserTokensRevokeParams defines parameters for ApiUserTokensRevoke.
type ApiUserTokensRevokeParams struct {
	// Login User login
	Login *string `form:"login,omitempty" json:"login,omitempty"`

	// Name Token name
	Name string `form:"name" json:"name"`
}

// ApiUserTokensSearchParams defines parameters for ApiUserTokensSearch.
type ApiUserTokensSearchParams struct {
	// Login User login
	Login *string `form:"login,omitempty" json:"login,omitempty"`
}

// ApiUsersAnonymizeParams defines parameters for ApiUsersAnonymize.
type ApiUsersAnonymizeParams struct {
	// Login User login
	Login string `form:"login" json:"login"`
}

// ApiUsersChangePasswordParams defines parameters for ApiUsersChangePassword.
type ApiUsersChangePasswordParams struct {
	// Login User login
	Login string `form:"login" json:"login"`

	// Password New password
	Password string `form:"password" json:"password"`

	// PreviousPassword Previous password. Required when changing one's own password.
	PreviousPassword *string `form:"previousPassword,omitempty" json:"previousPassword,omitempty"`
}

// ApiUsersCreateParams defines parameters for ApiUsersCreate.
type ApiUsersCreateParams struct {
	// Email User email
	Email *string `form:"email,omitempty" json:"email,omitempty"`

	// Local Specify if the user should be authenticated from SonarQube server or from an external authentication system. Password should not be set when local is set to false.
	Local *string `form:"local,omitempty" json:"local,omitempty"`

	// Login User login
	Login string `form:"login" json:"login"`

	// Name User name
	Name string `form:"name" json:"name"`

	// Password User password. Only mandatory when creating local user, otherwise it should not be set
	Password *string `form:"password,omitempty" json:"password,omitempty"`

	// ScmAccount List of SCM accounts. To set several values, the parameter must be called once for each value.
	ScmAccount *string `form:"scmAccount,omitempty" json:"scmAccount,omitempty"`
}

// ApiUsersDeactivateParams defines parameters for ApiUsersDeactivate.
type ApiUsersDeactivateParams struct {
	// Anonymize Anonymize user in addition to deactivating it
	Anonymize *string `form:"anonymize,omitempty" json:"anonymize,omitempty"`

	// Login User login
	Login string `form:"login" json:"login"`
}

// ApiUsersGroupsParams defines parameters for ApiUsersGroups.
type ApiUsersGroupsParams struct {
	// Login A user login
	Login string `form:"login" json:"login"`

	// P 1-based page number
	P *string `form:"p,omitempty" json:"p,omitempty"`

	// Ps Page size. Must be greater than 0.
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`

	// Q Limit search to group names that contain the supplied string.
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Selected Depending on the value, show only selected items (selected=selected), deselected items (selected=deselected), or all items with their selection status (selected=all).
	Selected *string `form:"selected,omitempty" json:"selected,omitempty"`
}

// ApiUsersSearchParams defines parameters for ApiUsersSearch.
type ApiUsersSearchParams struct {
	// Deactivated Return deactivated users instead of active users
	Deactivated *string `form:"deactivated,omitempty" json:"deactivated,omitempty"`

	// ExternalIdentity Find a user by its external identity (ie. its login in the Identity Provider). This is case sensitive and only available with Administer System permission.
	ExternalIdentity *string `form:"externalIdentity,omitempty" json:"externalIdentity,omitempty"`

	// P 1-based page number
	P *string `form:"p,omitempty" json:"p,omitempty"`

	// Ps Page size. Must be greater than 0 and less or equal than 500
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`

	// Q Filter on login, name and email.<br />This parameter can either be case sensitive and perform an exact match, or case insensitive and perform a partial match (contains), depending on the scenario:<br /><ul> <li> If the search query is <em>less or equal to 15 characters</em>, then the query is <em>case insensitive</em>, and will match any login, name, or email, that <em>contains</em> the search query. </li> <li> If the search query is <em>greater than 15 characters</em>, then the query becomes <em>case sensitive</em>, and will match any login, name, or email, that <em>exactly matches</em> the search query. </li></ul>
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// ApiUsersUpdateParams defines parameters for ApiUsersUpdate.
type ApiUsersUpdateParams struct {
	// Email User email
	Email *string `form:"email,omitempty" json:"email,omitempty"`

	// Login User login
	Login string `form:"login" json:"login"`

	// Name User name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// ScmAccount SCM accounts. To set several values, the parameter must be called once for each value.
	ScmAccount *string `form:"scmAccount,omitempty" json:"scmAccount,omitempty"`
}

// ApiUsersUpdateIdentityProviderParams defines parameters for ApiUsersUpdateIdentityProvider.
type ApiUsersUpdateIdentityProviderParams struct {
	// Login User login
	Login string `form:"login" json:"login"`

	// NewExternalIdentity New external identity, usually the login used in the authentication system. If not provided previous identity will be used.
	NewExternalIdentity *string `form:"newExternalIdentity,omitempty" json:"newExternalIdentity,omitempty"`

	// NewExternalProvider New external provider. Only authentication system installed are available. Use 'LDAP' identity provider for single server LDAP setup.User 'LDAP_{serverKey}' identity provider for multiple LDAP server setup.
	NewExternalProvider string `form:"newExternalProvider" json:"newExternalProvider"`
}

// ApiUsersUpdateLoginParams defines parameters for ApiUsersUpdateLogin.
type ApiUsersUpdateLoginParams struct {
	// Login The current login (case-sensitive)
	Login string `form:"login" json:"login"`

	// NewLogin The new login. It must not already exist.
	NewLogin string `form:"newLogin" json:"newLogin"`
}

// ApiWebhooksCreateParams defines parameters for ApiWebhooksCreate.
type ApiWebhooksCreateParams struct {
	// Name Name displayed in the administration console of webhooks
	Name string `form:"name" json:"name"`

	// Project The key of the project that will own the webhook
	Project *string `form:"project,omitempty" json:"project,omitempty"`

	// Secret If provided, secret will be used as the key to generate the HMAC hex (lowercase) digest value in the 'X-Sonar-Webhook-HMAC-SHA256' header
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Url Server endpoint that will receive the webhook payload, for example 'http://my_server/foo'. If HTTP Basic authentication is used, HTTPS is recommended to avoid man in the middle attacks. Example: 'https://myLogin:myPassword@my_server/foo'
	Url string `form:"url" json:"url"`
}

// ApiWebhooksDeleteParams defines parameters for ApiWebhooksDelete.
type ApiWebhooksDeleteParams struct {
	// Webhook The key of the webhook to be deleted, auto-generated value can be obtained through api/webhooks/create or api/webhooks/list
	Webhook string `form:"webhook" json:"webhook"`
}

// ApiWebhooksDeliveriesParams defines parameters for ApiWebhooksDeliveries.
type ApiWebhooksDeliveriesParams struct {
	// CeTaskId Id of the Compute Engine task
	CeTaskId *string `form:"ceTaskId,omitempty" json:"ceTaskId,omitempty"`

	// ComponentKey Key of the project
	ComponentKey *string `form:"componentKey,omitempty" json:"componentKey,omitempty"`

	// P 1-based page number
	P *string `form:"p,omitempty" json:"p,omitempty"`

	// Ps Page size. Must be greater than 0 and less than 500
	Ps *string `form:"ps,omitempty" json:"ps,omitempty"`

	// Webhook Key of the webhook that triggered those deliveries, auto-generated value that can be obtained through api/webhooks/create or api/webhooks/list
	Webhook *string `form:"webhook,omitempty" json:"webhook,omitempty"`
}

// ApiWebhooksDeliveryParams defines parameters for ApiWebhooksDelivery.
type ApiWebhooksDeliveryParams struct {
	// DeliveryId Id of delivery
	DeliveryId string `form:"deliveryId" json:"deliveryId"`
}

// ApiWebhooksListParams defines parameters for ApiWebhooksList.
type ApiWebhooksListParams struct {
	// Project Project key
	Project *string `form:"project,omitempty" json:"project,omitempty"`
}

// ApiWebhooksUpdateParams defines parameters for ApiWebhooksUpdate.
type ApiWebhooksUpdateParams struct {
	// Name new name of the webhook
	Name string `form:"name" json:"name"`

	// Secret If provided, secret will be used as the key to generate the HMAC hex (lowercase) digest value in the 'X-Sonar-Webhook-HMAC-SHA256' header. If blank, any secret previously configured will be removed. If not set, the secret will remain unchanged.
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Url new url to be called by the webhook
	Url string `form:"url" json:"url"`

	// Webhook The key of the webhook to be updated, auto-generated value can be obtained through api/webhooks/create or api/webhooks/list
	Webhook string `form:"webhook" json:"webhook"`
}

// ApiWebservicesListParams defines parameters for ApiWebservicesList.
type ApiWebservicesListParams struct {
	// IncludeInternals Include web services that are implemented for internal use only. Their forward-compatibility is not assured
	IncludeInternals *string `form:"include_internals,omitempty" json:"include_internals,omitempty"`
}

// ApiWebservicesResponseExampleParams defines parameters for ApiWebservicesResponseExample.
type ApiWebservicesResponseExampleParams struct {
	// Action Action of the web service
	Action string `form:"action" json:"action"`

	// Controller Controller of the web service
	Controller string `form:"controller" json:"controller"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ApiAlmIntegrationsImportGitlabProject request
	ApiAlmIntegrationsImportGitlabProject(ctx context.Context, params *ApiAlmIntegrationsImportGitlabProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAlmIntegrationsListAzureProjects request
	ApiAlmIntegrationsListAzureProjects(ctx context.Context, params *ApiAlmIntegrationsListAzureProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAlmIntegrationsListBitbucketserverProjects request
	ApiAlmIntegrationsListBitbucketserverProjects(ctx context.Context, params *ApiAlmIntegrationsListBitbucketserverProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAlmIntegrationsSearchAzureRepos request
	ApiAlmIntegrationsSearchAzureRepos(ctx context.Context, params *ApiAlmIntegrationsSearchAzureReposParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAlmIntegrationsSearchBitbucketcloudRepos request
	ApiAlmIntegrationsSearchBitbucketcloudRepos(ctx context.Context, params *ApiAlmIntegrationsSearchBitbucketcloudReposParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAlmIntegrationsSearchBitbucketserverRepos request
	ApiAlmIntegrationsSearchBitbucketserverRepos(ctx context.Context, params *ApiAlmIntegrationsSearchBitbucketserverReposParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAlmIntegrationsSearchGitlabRepos request
	ApiAlmIntegrationsSearchGitlabRepos(ctx context.Context, params *ApiAlmIntegrationsSearchGitlabReposParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAlmIntegrationsSetPat request
	ApiAlmIntegrationsSetPat(ctx context.Context, params *ApiAlmIntegrationsSetPatParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAlmSettingsCountBinding request
	ApiAlmSettingsCountBinding(ctx context.Context, params *ApiAlmSettingsCountBindingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAlmSettingsCreateAzure request
	ApiAlmSettingsCreateAzure(ctx context.Context, params *ApiAlmSettingsCreateAzureParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAlmSettingsCreateBitbucket request
	ApiAlmSettingsCreateBitbucket(ctx context.Context, params *ApiAlmSettingsCreateBitbucketParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAlmSettingsCreateBitbucketcloud request
	ApiAlmSettingsCreateBitbucketcloud(ctx context.Context, params *ApiAlmSettingsCreateBitbucketcloudParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAlmSettingsCreateGithub request
	ApiAlmSettingsCreateGithub(ctx context.Context, params *ApiAlmSettingsCreateGithubParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAlmSettingsCreateGitlab request
	ApiAlmSettingsCreateGitlab(ctx context.Context, params *ApiAlmSettingsCreateGitlabParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAlmSettingsDelete request
	ApiAlmSettingsDelete(ctx context.Context, params *ApiAlmSettingsDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAlmSettingsGetBinding request
	ApiAlmSettingsGetBinding(ctx context.Context, params *ApiAlmSettingsGetBindingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAlmSettingsList request
	ApiAlmSettingsList(ctx context.Context, params *ApiAlmSettingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAlmSettingsListDefinitions request
	ApiAlmSettingsListDefinitions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAlmSettingsUpdateAzure request
	ApiAlmSettingsUpdateAzure(ctx context.Context, params *ApiAlmSettingsUpdateAzureParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAlmSettingsUpdateBitbucket request
	ApiAlmSettingsUpdateBitbucket(ctx context.Context, params *ApiAlmSettingsUpdateBitbucketParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAlmSettingsUpdateBitbucketcloud request
	ApiAlmSettingsUpdateBitbucketcloud(ctx context.Context, params *ApiAlmSettingsUpdateBitbucketcloudParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAlmSettingsUpdateGithub request
	ApiAlmSettingsUpdateGithub(ctx context.Context, params *ApiAlmSettingsUpdateGithubParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAlmSettingsUpdateGitlab request
	ApiAlmSettingsUpdateGitlab(ctx context.Context, params *ApiAlmSettingsUpdateGitlabParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAlmSettingsValidate request
	ApiAlmSettingsValidate(ctx context.Context, params *ApiAlmSettingsValidateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAnalysisCacheGet request
	ApiAnalysisCacheGet(ctx context.Context, params *ApiAnalysisCacheGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAuthenticationLogin request
	ApiAuthenticationLogin(ctx context.Context, params *ApiAuthenticationLoginParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAuthenticationLogout request
	ApiAuthenticationLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiAuthenticationValidate request
	ApiAuthenticationValidate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiCeActivity request
	ApiCeActivity(ctx context.Context, params *ApiCeActivityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiCeActivityStatus request
	ApiCeActivityStatus(ctx context.Context, params *ApiCeActivityStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiCeComponent request
	ApiCeComponent(ctx context.Context, params *ApiCeComponentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiCeTask request
	ApiCeTask(ctx context.Context, params *ApiCeTaskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiComponentsSearch request
	ApiComponentsSearch(ctx context.Context, params *ApiComponentsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiComponentsShow request
	ApiComponentsShow(ctx context.Context, params *ApiComponentsShowParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiComponentsTree request
	ApiComponentsTree(ctx context.Context, params *ApiComponentsTreeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiDuplicationsShow request
	ApiDuplicationsShow(ctx context.Context, params *ApiDuplicationsShowParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiFavoritesAdd request
	ApiFavoritesAdd(ctx context.Context, params *ApiFavoritesAddParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiFavoritesRemove request
	ApiFavoritesRemove(ctx context.Context, params *ApiFavoritesRemoveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiFavoritesSearch request
	ApiFavoritesSearch(ctx context.Context, params *ApiFavoritesSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiHotspotsSearch request
	ApiHotspotsSearch(ctx context.Context, params *ApiHotspotsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiHotspotsShow request
	ApiHotspotsShow(ctx context.Context, params *ApiHotspotsShowParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiIssuesAddComment request
	ApiIssuesAddComment(ctx context.Context, params *ApiIssuesAddCommentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiIssuesAssign request
	ApiIssuesAssign(ctx context.Context, params *ApiIssuesAssignParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiIssuesAuthors request
	ApiIssuesAuthors(ctx context.Context, params *ApiIssuesAuthorsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiIssuesBulkChange request
	ApiIssuesBulkChange(ctx context.Context, params *ApiIssuesBulkChangeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiIssuesChangelog request
	ApiIssuesChangelog(ctx context.Context, params *ApiIssuesChangelogParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiIssuesDeleteComment request
	ApiIssuesDeleteComment(ctx context.Context, params *ApiIssuesDeleteCommentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiIssuesDoTransition request
	ApiIssuesDoTransition(ctx context.Context, params *ApiIssuesDoTransitionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiIssuesEditComment request
	ApiIssuesEditComment(ctx context.Context, params *ApiIssuesEditCommentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiIssuesReindex request
	ApiIssuesReindex(ctx context.Context, params *ApiIssuesReindexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiIssuesSearch request
	ApiIssuesSearch(ctx context.Context, params *ApiIssuesSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiIssuesSetSeverity request
	ApiIssuesSetSeverity(ctx context.Context, params *ApiIssuesSetSeverityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiIssuesSetTags request
	ApiIssuesSetTags(ctx context.Context, params *ApiIssuesSetTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiIssuesSetType request
	ApiIssuesSetType(ctx context.Context, params *ApiIssuesSetTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiIssuesTags request
	ApiIssuesTags(ctx context.Context, params *ApiIssuesTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiLanguagesList request
	ApiLanguagesList(ctx context.Context, params *ApiLanguagesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiMeasuresComponent request
	ApiMeasuresComponent(ctx context.Context, params *ApiMeasuresComponentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiMeasuresComponentTree request
	ApiMeasuresComponentTree(ctx context.Context, params *ApiMeasuresComponentTreeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiMeasuresSearchHistory request
	ApiMeasuresSearchHistory(ctx context.Context, params *ApiMeasuresSearchHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiMetricsSearch request
	ApiMetricsSearch(ctx context.Context, params *ApiMetricsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiMetricsTypes request
	ApiMetricsTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiMonitoringMetrics request
	ApiMonitoringMetrics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiNewCodePeriodsList request
	ApiNewCodePeriodsList(ctx context.Context, params *ApiNewCodePeriodsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiNewCodePeriodsSet request
	ApiNewCodePeriodsSet(ctx context.Context, params *ApiNewCodePeriodsSetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiNewCodePeriodsShow request
	ApiNewCodePeriodsShow(ctx context.Context, params *ApiNewCodePeriodsShowParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiNewCodePeriodsUnset request
	ApiNewCodePeriodsUnset(ctx context.Context, params *ApiNewCodePeriodsUnsetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiNotificationsAdd request
	ApiNotificationsAdd(ctx context.Context, params *ApiNotificationsAddParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiNotificationsList request
	ApiNotificationsList(ctx context.Context, params *ApiNotificationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiNotificationsRemove request
	ApiNotificationsRemove(ctx context.Context, params *ApiNotificationsRemoveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPermissionsAddGroup request
	ApiPermissionsAddGroup(ctx context.Context, params *ApiPermissionsAddGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPermissionsAddGroupToTemplate request
	ApiPermissionsAddGroupToTemplate(ctx context.Context, params *ApiPermissionsAddGroupToTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPermissionsAddProjectCreatorToTemplate request
	ApiPermissionsAddProjectCreatorToTemplate(ctx context.Context, params *ApiPermissionsAddProjectCreatorToTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPermissionsAddUser request
	ApiPermissionsAddUser(ctx context.Context, params *ApiPermissionsAddUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPermissionsAddUserToTemplate request
	ApiPermissionsAddUserToTemplate(ctx context.Context, params *ApiPermissionsAddUserToTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPermissionsApplyTemplate request
	ApiPermissionsApplyTemplate(ctx context.Context, params *ApiPermissionsApplyTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPermissionsBulkApplyTemplate request
	ApiPermissionsBulkApplyTemplate(ctx context.Context, params *ApiPermissionsBulkApplyTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPermissionsCreateTemplate request
	ApiPermissionsCreateTemplate(ctx context.Context, params *ApiPermissionsCreateTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPermissionsDeleteTemplate request
	ApiPermissionsDeleteTemplate(ctx context.Context, params *ApiPermissionsDeleteTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPermissionsRemoveGroup request
	ApiPermissionsRemoveGroup(ctx context.Context, params *ApiPermissionsRemoveGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPermissionsRemoveGroupFromTemplate request
	ApiPermissionsRemoveGroupFromTemplate(ctx context.Context, params *ApiPermissionsRemoveGroupFromTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPermissionsRemoveProjectCreatorFromTemplate request
	ApiPermissionsRemoveProjectCreatorFromTemplate(ctx context.Context, params *ApiPermissionsRemoveProjectCreatorFromTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPermissionsRemoveUser request
	ApiPermissionsRemoveUser(ctx context.Context, params *ApiPermissionsRemoveUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPermissionsRemoveUserFromTemplate request
	ApiPermissionsRemoveUserFromTemplate(ctx context.Context, params *ApiPermissionsRemoveUserFromTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPermissionsSearchTemplates request
	ApiPermissionsSearchTemplates(ctx context.Context, params *ApiPermissionsSearchTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPermissionsSetDefaultTemplate request
	ApiPermissionsSetDefaultTemplate(ctx context.Context, params *ApiPermissionsSetDefaultTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPermissionsUpdateTemplate request
	ApiPermissionsUpdateTemplate(ctx context.Context, params *ApiPermissionsUpdateTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPluginsAvailable request
	ApiPluginsAvailable(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPluginsCancelAll request
	ApiPluginsCancelAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPluginsInstall request
	ApiPluginsInstall(ctx context.Context, params *ApiPluginsInstallParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPluginsInstalled request
	ApiPluginsInstalled(ctx context.Context, params *ApiPluginsInstalledParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPluginsPending request
	ApiPluginsPending(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPluginsUninstall request
	ApiPluginsUninstall(ctx context.Context, params *ApiPluginsUninstallParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPluginsUpdate request
	ApiPluginsUpdate(ctx context.Context, params *ApiPluginsUpdateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiPluginsUpdates request
	ApiPluginsUpdates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectAnalysesCreateEvent request
	ApiProjectAnalysesCreateEvent(ctx context.Context, params *ApiProjectAnalysesCreateEventParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectAnalysesDelete request
	ApiProjectAnalysesDelete(ctx context.Context, params *ApiProjectAnalysesDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectAnalysesDeleteEvent request
	ApiProjectAnalysesDeleteEvent(ctx context.Context, params *ApiProjectAnalysesDeleteEventParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectAnalysesSearch request
	ApiProjectAnalysesSearch(ctx context.Context, params *ApiProjectAnalysesSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectAnalysesSetBaseline request
	ApiProjectAnalysesSetBaseline(ctx context.Context, params *ApiProjectAnalysesSetBaselineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectAnalysesUnsetBaseline request
	ApiProjectAnalysesUnsetBaseline(ctx context.Context, params *ApiProjectAnalysesUnsetBaselineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectAnalysesUpdateEvent request
	ApiProjectAnalysesUpdateEvent(ctx context.Context, params *ApiProjectAnalysesUpdateEventParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectBadgesMeasure request
	ApiProjectBadgesMeasure(ctx context.Context, params *ApiProjectBadgesMeasureParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectBadgesQualityGate request
	ApiProjectBadgesQualityGate(ctx context.Context, params *ApiProjectBadgesQualityGateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectBadgesRenewToken request
	ApiProjectBadgesRenewToken(ctx context.Context, params *ApiProjectBadgesRenewTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectBadgesToken request
	ApiProjectBadgesToken(ctx context.Context, params *ApiProjectBadgesTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectBranchesDelete request
	ApiProjectBranchesDelete(ctx context.Context, params *ApiProjectBranchesDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectBranchesList request
	ApiProjectBranchesList(ctx context.Context, params *ApiProjectBranchesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectBranchesRename request
	ApiProjectBranchesRename(ctx context.Context, params *ApiProjectBranchesRenameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectBranchesSetAutomaticDeletionProtection request
	ApiProjectBranchesSetAutomaticDeletionProtection(ctx context.Context, params *ApiProjectBranchesSetAutomaticDeletionProtectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectDumpExport request
	ApiProjectDumpExport(ctx context.Context, params *ApiProjectDumpExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectLinksCreate request
	ApiProjectLinksCreate(ctx context.Context, params *ApiProjectLinksCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectLinksDelete request
	ApiProjectLinksDelete(ctx context.Context, params *ApiProjectLinksDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectLinksSearch request
	ApiProjectLinksSearch(ctx context.Context, params *ApiProjectLinksSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectTagsSearch request
	ApiProjectTagsSearch(ctx context.Context, params *ApiProjectTagsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectTagsSet request
	ApiProjectTagsSet(ctx context.Context, params *ApiProjectTagsSetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectsBulkDelete request
	ApiProjectsBulkDelete(ctx context.Context, params *ApiProjectsBulkDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectsCreate request
	ApiProjectsCreate(ctx context.Context, params *ApiProjectsCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectsDelete request
	ApiProjectsDelete(ctx context.Context, params *ApiProjectsDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectsSearch request
	ApiProjectsSearch(ctx context.Context, params *ApiProjectsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectsUpdateKey request
	ApiProjectsUpdateKey(ctx context.Context, params *ApiProjectsUpdateKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiProjectsUpdateVisibility request
	ApiProjectsUpdateVisibility(ctx context.Context, params *ApiProjectsUpdateVisibilityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualitygatesCopy request
	ApiQualitygatesCopy(ctx context.Context, params *ApiQualitygatesCopyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualitygatesCreate request
	ApiQualitygatesCreate(ctx context.Context, params *ApiQualitygatesCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualitygatesCreateCondition request
	ApiQualitygatesCreateCondition(ctx context.Context, params *ApiQualitygatesCreateConditionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualitygatesDeleteCondition request
	ApiQualitygatesDeleteCondition(ctx context.Context, params *ApiQualitygatesDeleteConditionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualitygatesDeselect request
	ApiQualitygatesDeselect(ctx context.Context, params *ApiQualitygatesDeselectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualitygatesDestroy request
	ApiQualitygatesDestroy(ctx context.Context, params *ApiQualitygatesDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualitygatesGetByProject request
	ApiQualitygatesGetByProject(ctx context.Context, params *ApiQualitygatesGetByProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualitygatesList request
	ApiQualitygatesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualitygatesProjectStatus request
	ApiQualitygatesProjectStatus(ctx context.Context, params *ApiQualitygatesProjectStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualitygatesRename request
	ApiQualitygatesRename(ctx context.Context, params *ApiQualitygatesRenameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualitygatesSearch request
	ApiQualitygatesSearch(ctx context.Context, params *ApiQualitygatesSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualitygatesSelect request
	ApiQualitygatesSelect(ctx context.Context, params *ApiQualitygatesSelectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualitygatesSetAsDefault request
	ApiQualitygatesSetAsDefault(ctx context.Context, params *ApiQualitygatesSetAsDefaultParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualitygatesShow request
	ApiQualitygatesShow(ctx context.Context, params *ApiQualitygatesShowParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualitygatesUpdateCondition request
	ApiQualitygatesUpdateCondition(ctx context.Context, params *ApiQualitygatesUpdateConditionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualityprofilesActivateRule request
	ApiQualityprofilesActivateRule(ctx context.Context, params *ApiQualityprofilesActivateRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualityprofilesActivateRules request
	ApiQualityprofilesActivateRules(ctx context.Context, params *ApiQualityprofilesActivateRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualityprofilesAddProject request
	ApiQualityprofilesAddProject(ctx context.Context, params *ApiQualityprofilesAddProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualityprofilesBackup request
	ApiQualityprofilesBackup(ctx context.Context, params *ApiQualityprofilesBackupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualityprofilesChangeParent request
	ApiQualityprofilesChangeParent(ctx context.Context, params *ApiQualityprofilesChangeParentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualityprofilesChangelog request
	ApiQualityprofilesChangelog(ctx context.Context, params *ApiQualityprofilesChangelogParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualityprofilesCopy request
	ApiQualityprofilesCopy(ctx context.Context, params *ApiQualityprofilesCopyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualityprofilesCreate request
	ApiQualityprofilesCreate(ctx context.Context, params *ApiQualityprofilesCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualityprofilesDeactivateRule request
	ApiQualityprofilesDeactivateRule(ctx context.Context, params *ApiQualityprofilesDeactivateRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualityprofilesDeactivateRules request
	ApiQualityprofilesDeactivateRules(ctx context.Context, params *ApiQualityprofilesDeactivateRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualityprofilesDelete request
	ApiQualityprofilesDelete(ctx context.Context, params *ApiQualityprofilesDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualityprofilesExport request
	ApiQualityprofilesExport(ctx context.Context, params *ApiQualityprofilesExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualityprofilesExporters request
	ApiQualityprofilesExporters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualityprofilesImporters request
	ApiQualityprofilesImporters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualityprofilesInheritance request
	ApiQualityprofilesInheritance(ctx context.Context, params *ApiQualityprofilesInheritanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualityprofilesProjects request
	ApiQualityprofilesProjects(ctx context.Context, params *ApiQualityprofilesProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualityprofilesRemoveProject request
	ApiQualityprofilesRemoveProject(ctx context.Context, params *ApiQualityprofilesRemoveProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualityprofilesRename request
	ApiQualityprofilesRename(ctx context.Context, params *ApiQualityprofilesRenameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualityprofilesRestore request
	ApiQualityprofilesRestore(ctx context.Context, params *ApiQualityprofilesRestoreParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualityprofilesSearch request
	ApiQualityprofilesSearch(ctx context.Context, params *ApiQualityprofilesSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiQualityprofilesSetDefault request
	ApiQualityprofilesSetDefault(ctx context.Context, params *ApiQualityprofilesSetDefaultParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiRulesCreate request
	ApiRulesCreate(ctx context.Context, params *ApiRulesCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiRulesDelete request
	ApiRulesDelete(ctx context.Context, params *ApiRulesDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiRulesRepositories request
	ApiRulesRepositories(ctx context.Context, params *ApiRulesRepositoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiRulesSearch request
	ApiRulesSearch(ctx context.Context, params *ApiRulesSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiRulesShow request
	ApiRulesShow(ctx context.Context, params *ApiRulesShowParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiRulesTags request
	ApiRulesTags(ctx context.Context, params *ApiRulesTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiRulesUpdate request
	ApiRulesUpdate(ctx context.Context, params *ApiRulesUpdateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiServerVersion request
	ApiServerVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiSettingsListDefinitions request
	ApiSettingsListDefinitions(ctx context.Context, params *ApiSettingsListDefinitionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiSettingsReset request
	ApiSettingsReset(ctx context.Context, params *ApiSettingsResetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiSettingsSet request
	ApiSettingsSet(ctx context.Context, params *ApiSettingsSetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiSettingsValues request
	ApiSettingsValues(ctx context.Context, params *ApiSettingsValuesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiSourcesRaw request
	ApiSourcesRaw(ctx context.Context, params *ApiSourcesRawParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiSourcesScm request
	ApiSourcesScm(ctx context.Context, params *ApiSourcesScmParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiSourcesShow request
	ApiSourcesShow(ctx context.Context, params *ApiSourcesShowParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiSystemChangeLogLevel request
	ApiSystemChangeLogLevel(ctx context.Context, params *ApiSystemChangeLogLevelParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiSystemDbMigrationStatus request
	ApiSystemDbMigrationStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiSystemHealth request
	ApiSystemHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiSystemInfo request
	ApiSystemInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiSystemLogs request
	ApiSystemLogs(ctx context.Context, params *ApiSystemLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiSystemMigrateDb request
	ApiSystemMigrateDb(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiSystemPing request
	ApiSystemPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiSystemRestart request
	ApiSystemRestart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiSystemStatus request
	ApiSystemStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiSystemUpgrades request
	ApiSystemUpgrades(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiUserGroupsAddUser request
	ApiUserGroupsAddUser(ctx context.Context, params *ApiUserGroupsAddUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiUserGroupsCreate request
	ApiUserGroupsCreate(ctx context.Context, params *ApiUserGroupsCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiUserGroupsDelete request
	ApiUserGroupsDelete(ctx context.Context, params *ApiUserGroupsDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiUserGroupsRemoveUser request
	ApiUserGroupsRemoveUser(ctx context.Context, params *ApiUserGroupsRemoveUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiUserGroupsSearch request
	ApiUserGroupsSearch(ctx context.Context, params *ApiUserGroupsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiUserGroupsUpdate request
	ApiUserGroupsUpdate(ctx context.Context, params *ApiUserGroupsUpdateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiUserGroupsUsers request
	ApiUserGroupsUsers(ctx context.Context, params *ApiUserGroupsUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiUserTokensGenerate request
	ApiUserTokensGenerate(ctx context.Context, params *ApiUserTokensGenerateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiUserTokensRevoke request
	ApiUserTokensRevoke(ctx context.Context, params *ApiUserTokensRevokeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiUserTokensSearch request
	ApiUserTokensSearch(ctx context.Context, params *ApiUserTokensSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiUsersAnonymize request
	ApiUsersAnonymize(ctx context.Context, params *ApiUsersAnonymizeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiUsersChangePassword request
	ApiUsersChangePassword(ctx context.Context, params *ApiUsersChangePasswordParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiUsersCreate request
	ApiUsersCreate(ctx context.Context, params *ApiUsersCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiUsersDeactivate request
	ApiUsersDeactivate(ctx context.Context, params *ApiUsersDeactivateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiUsersDismissSonarlintAd request
	ApiUsersDismissSonarlintAd(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiUsersGroups request
	ApiUsersGroups(ctx context.Context, params *ApiUsersGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiUsersSearch request
	ApiUsersSearch(ctx context.Context, params *ApiUsersSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiUsersUpdate request
	ApiUsersUpdate(ctx context.Context, params *ApiUsersUpdateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiUsersUpdateIdentityProvider request
	ApiUsersUpdateIdentityProvider(ctx context.Context, params *ApiUsersUpdateIdentityProviderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiUsersUpdateLogin request
	ApiUsersUpdateLogin(ctx context.Context, params *ApiUsersUpdateLoginParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiWebhooksCreate request
	ApiWebhooksCreate(ctx context.Context, params *ApiWebhooksCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiWebhooksDelete request
	ApiWebhooksDelete(ctx context.Context, params *ApiWebhooksDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiWebhooksDeliveries request
	ApiWebhooksDeliveries(ctx context.Context, params *ApiWebhooksDeliveriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiWebhooksDelivery request
	ApiWebhooksDelivery(ctx context.Context, params *ApiWebhooksDeliveryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiWebhooksList request
	ApiWebhooksList(ctx context.Context, params *ApiWebhooksListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiWebhooksUpdate request
	ApiWebhooksUpdate(ctx context.Context, params *ApiWebhooksUpdateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiWebservicesList request
	ApiWebservicesList(ctx context.Context, params *ApiWebservicesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiWebservicesResponseExample request
	ApiWebservicesResponseExample(ctx context.Context, params *ApiWebservicesResponseExampleParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ApiAlmIntegrationsImportGitlabProject(ctx context.Context, params *ApiAlmIntegrationsImportGitlabProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAlmIntegrationsImportGitlabProjectRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAlmIntegrationsListAzureProjects(ctx context.Context, params *ApiAlmIntegrationsListAzureProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAlmIntegrationsListAzureProjectsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAlmIntegrationsListBitbucketserverProjects(ctx context.Context, params *ApiAlmIntegrationsListBitbucketserverProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAlmIntegrationsListBitbucketserverProjectsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAlmIntegrationsSearchAzureRepos(ctx context.Context, params *ApiAlmIntegrationsSearchAzureReposParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAlmIntegrationsSearchAzureReposRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAlmIntegrationsSearchBitbucketcloudRepos(ctx context.Context, params *ApiAlmIntegrationsSearchBitbucketcloudReposParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAlmIntegrationsSearchBitbucketcloudReposRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAlmIntegrationsSearchBitbucketserverRepos(ctx context.Context, params *ApiAlmIntegrationsSearchBitbucketserverReposParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAlmIntegrationsSearchBitbucketserverReposRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAlmIntegrationsSearchGitlabRepos(ctx context.Context, params *ApiAlmIntegrationsSearchGitlabReposParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAlmIntegrationsSearchGitlabReposRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAlmIntegrationsSetPat(ctx context.Context, params *ApiAlmIntegrationsSetPatParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAlmIntegrationsSetPatRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAlmSettingsCountBinding(ctx context.Context, params *ApiAlmSettingsCountBindingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAlmSettingsCountBindingRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAlmSettingsCreateAzure(ctx context.Context, params *ApiAlmSettingsCreateAzureParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAlmSettingsCreateAzureRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAlmSettingsCreateBitbucket(ctx context.Context, params *ApiAlmSettingsCreateBitbucketParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAlmSettingsCreateBitbucketRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAlmSettingsCreateBitbucketcloud(ctx context.Context, params *ApiAlmSettingsCreateBitbucketcloudParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAlmSettingsCreateBitbucketcloudRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAlmSettingsCreateGithub(ctx context.Context, params *ApiAlmSettingsCreateGithubParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAlmSettingsCreateGithubRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAlmSettingsCreateGitlab(ctx context.Context, params *ApiAlmSettingsCreateGitlabParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAlmSettingsCreateGitlabRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAlmSettingsDelete(ctx context.Context, params *ApiAlmSettingsDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAlmSettingsDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAlmSettingsGetBinding(ctx context.Context, params *ApiAlmSettingsGetBindingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAlmSettingsGetBindingRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAlmSettingsList(ctx context.Context, params *ApiAlmSettingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAlmSettingsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAlmSettingsListDefinitions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAlmSettingsListDefinitionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAlmSettingsUpdateAzure(ctx context.Context, params *ApiAlmSettingsUpdateAzureParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAlmSettingsUpdateAzureRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAlmSettingsUpdateBitbucket(ctx context.Context, params *ApiAlmSettingsUpdateBitbucketParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAlmSettingsUpdateBitbucketRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAlmSettingsUpdateBitbucketcloud(ctx context.Context, params *ApiAlmSettingsUpdateBitbucketcloudParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAlmSettingsUpdateBitbucketcloudRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAlmSettingsUpdateGithub(ctx context.Context, params *ApiAlmSettingsUpdateGithubParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAlmSettingsUpdateGithubRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAlmSettingsUpdateGitlab(ctx context.Context, params *ApiAlmSettingsUpdateGitlabParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAlmSettingsUpdateGitlabRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAlmSettingsValidate(ctx context.Context, params *ApiAlmSettingsValidateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAlmSettingsValidateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAnalysisCacheGet(ctx context.Context, params *ApiAnalysisCacheGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAnalysisCacheGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAuthenticationLogin(ctx context.Context, params *ApiAuthenticationLoginParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAuthenticationLoginRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAuthenticationLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAuthenticationLogoutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAuthenticationValidate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAuthenticationValidateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiCeActivity(ctx context.Context, params *ApiCeActivityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiCeActivityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiCeActivityStatus(ctx context.Context, params *ApiCeActivityStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiCeActivityStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiCeComponent(ctx context.Context, params *ApiCeComponentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiCeComponentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiCeTask(ctx context.Context, params *ApiCeTaskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiCeTaskRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiComponentsSearch(ctx context.Context, params *ApiComponentsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiComponentsSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiComponentsShow(ctx context.Context, params *ApiComponentsShowParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiComponentsShowRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiComponentsTree(ctx context.Context, params *ApiComponentsTreeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiComponentsTreeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiDuplicationsShow(ctx context.Context, params *ApiDuplicationsShowParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiDuplicationsShowRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiFavoritesAdd(ctx context.Context, params *ApiFavoritesAddParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiFavoritesAddRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiFavoritesRemove(ctx context.Context, params *ApiFavoritesRemoveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiFavoritesRemoveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiFavoritesSearch(ctx context.Context, params *ApiFavoritesSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiFavoritesSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiHotspotsSearch(ctx context.Context, params *ApiHotspotsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiHotspotsSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiHotspotsShow(ctx context.Context, params *ApiHotspotsShowParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiHotspotsShowRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiIssuesAddComment(ctx context.Context, params *ApiIssuesAddCommentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiIssuesAddCommentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiIssuesAssign(ctx context.Context, params *ApiIssuesAssignParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiIssuesAssignRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiIssuesAuthors(ctx context.Context, params *ApiIssuesAuthorsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiIssuesAuthorsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiIssuesBulkChange(ctx context.Context, params *ApiIssuesBulkChangeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiIssuesBulkChangeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiIssuesChangelog(ctx context.Context, params *ApiIssuesChangelogParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiIssuesChangelogRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiIssuesDeleteComment(ctx context.Context, params *ApiIssuesDeleteCommentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiIssuesDeleteCommentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiIssuesDoTransition(ctx context.Context, params *ApiIssuesDoTransitionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiIssuesDoTransitionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiIssuesEditComment(ctx context.Context, params *ApiIssuesEditCommentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiIssuesEditCommentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiIssuesReindex(ctx context.Context, params *ApiIssuesReindexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiIssuesReindexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiIssuesSearch(ctx context.Context, params *ApiIssuesSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiIssuesSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiIssuesSetSeverity(ctx context.Context, params *ApiIssuesSetSeverityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiIssuesSetSeverityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiIssuesSetTags(ctx context.Context, params *ApiIssuesSetTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiIssuesSetTagsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiIssuesSetType(ctx context.Context, params *ApiIssuesSetTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiIssuesSetTypeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiIssuesTags(ctx context.Context, params *ApiIssuesTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiIssuesTagsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiLanguagesList(ctx context.Context, params *ApiLanguagesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiLanguagesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiMeasuresComponent(ctx context.Context, params *ApiMeasuresComponentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiMeasuresComponentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiMeasuresComponentTree(ctx context.Context, params *ApiMeasuresComponentTreeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiMeasuresComponentTreeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiMeasuresSearchHistory(ctx context.Context, params *ApiMeasuresSearchHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiMeasuresSearchHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiMetricsSearch(ctx context.Context, params *ApiMetricsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiMetricsSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiMetricsTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiMetricsTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiMonitoringMetrics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiMonitoringMetricsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiNewCodePeriodsList(ctx context.Context, params *ApiNewCodePeriodsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiNewCodePeriodsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiNewCodePeriodsSet(ctx context.Context, params *ApiNewCodePeriodsSetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiNewCodePeriodsSetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiNewCodePeriodsShow(ctx context.Context, params *ApiNewCodePeriodsShowParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiNewCodePeriodsShowRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiNewCodePeriodsUnset(ctx context.Context, params *ApiNewCodePeriodsUnsetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiNewCodePeriodsUnsetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiNotificationsAdd(ctx context.Context, params *ApiNotificationsAddParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiNotificationsAddRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiNotificationsList(ctx context.Context, params *ApiNotificationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiNotificationsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiNotificationsRemove(ctx context.Context, params *ApiNotificationsRemoveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiNotificationsRemoveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPermissionsAddGroup(ctx context.Context, params *ApiPermissionsAddGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPermissionsAddGroupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPermissionsAddGroupToTemplate(ctx context.Context, params *ApiPermissionsAddGroupToTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPermissionsAddGroupToTemplateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPermissionsAddProjectCreatorToTemplate(ctx context.Context, params *ApiPermissionsAddProjectCreatorToTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPermissionsAddProjectCreatorToTemplateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPermissionsAddUser(ctx context.Context, params *ApiPermissionsAddUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPermissionsAddUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPermissionsAddUserToTemplate(ctx context.Context, params *ApiPermissionsAddUserToTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPermissionsAddUserToTemplateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPermissionsApplyTemplate(ctx context.Context, params *ApiPermissionsApplyTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPermissionsApplyTemplateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPermissionsBulkApplyTemplate(ctx context.Context, params *ApiPermissionsBulkApplyTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPermissionsBulkApplyTemplateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPermissionsCreateTemplate(ctx context.Context, params *ApiPermissionsCreateTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPermissionsCreateTemplateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPermissionsDeleteTemplate(ctx context.Context, params *ApiPermissionsDeleteTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPermissionsDeleteTemplateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPermissionsRemoveGroup(ctx context.Context, params *ApiPermissionsRemoveGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPermissionsRemoveGroupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPermissionsRemoveGroupFromTemplate(ctx context.Context, params *ApiPermissionsRemoveGroupFromTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPermissionsRemoveGroupFromTemplateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPermissionsRemoveProjectCreatorFromTemplate(ctx context.Context, params *ApiPermissionsRemoveProjectCreatorFromTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPermissionsRemoveProjectCreatorFromTemplateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPermissionsRemoveUser(ctx context.Context, params *ApiPermissionsRemoveUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPermissionsRemoveUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPermissionsRemoveUserFromTemplate(ctx context.Context, params *ApiPermissionsRemoveUserFromTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPermissionsRemoveUserFromTemplateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPermissionsSearchTemplates(ctx context.Context, params *ApiPermissionsSearchTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPermissionsSearchTemplatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPermissionsSetDefaultTemplate(ctx context.Context, params *ApiPermissionsSetDefaultTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPermissionsSetDefaultTemplateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPermissionsUpdateTemplate(ctx context.Context, params *ApiPermissionsUpdateTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPermissionsUpdateTemplateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPluginsAvailable(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPluginsAvailableRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPluginsCancelAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPluginsCancelAllRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPluginsInstall(ctx context.Context, params *ApiPluginsInstallParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPluginsInstallRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPluginsInstalled(ctx context.Context, params *ApiPluginsInstalledParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPluginsInstalledRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPluginsPending(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPluginsPendingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPluginsUninstall(ctx context.Context, params *ApiPluginsUninstallParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPluginsUninstallRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPluginsUpdate(ctx context.Context, params *ApiPluginsUpdateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPluginsUpdateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPluginsUpdates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPluginsUpdatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectAnalysesCreateEvent(ctx context.Context, params *ApiProjectAnalysesCreateEventParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectAnalysesCreateEventRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectAnalysesDelete(ctx context.Context, params *ApiProjectAnalysesDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectAnalysesDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectAnalysesDeleteEvent(ctx context.Context, params *ApiProjectAnalysesDeleteEventParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectAnalysesDeleteEventRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectAnalysesSearch(ctx context.Context, params *ApiProjectAnalysesSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectAnalysesSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectAnalysesSetBaseline(ctx context.Context, params *ApiProjectAnalysesSetBaselineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectAnalysesSetBaselineRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectAnalysesUnsetBaseline(ctx context.Context, params *ApiProjectAnalysesUnsetBaselineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectAnalysesUnsetBaselineRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectAnalysesUpdateEvent(ctx context.Context, params *ApiProjectAnalysesUpdateEventParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectAnalysesUpdateEventRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectBadgesMeasure(ctx context.Context, params *ApiProjectBadgesMeasureParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectBadgesMeasureRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectBadgesQualityGate(ctx context.Context, params *ApiProjectBadgesQualityGateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectBadgesQualityGateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectBadgesRenewToken(ctx context.Context, params *ApiProjectBadgesRenewTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectBadgesRenewTokenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectBadgesToken(ctx context.Context, params *ApiProjectBadgesTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectBadgesTokenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectBranchesDelete(ctx context.Context, params *ApiProjectBranchesDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectBranchesDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectBranchesList(ctx context.Context, params *ApiProjectBranchesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectBranchesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectBranchesRename(ctx context.Context, params *ApiProjectBranchesRenameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectBranchesRenameRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectBranchesSetAutomaticDeletionProtection(ctx context.Context, params *ApiProjectBranchesSetAutomaticDeletionProtectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectBranchesSetAutomaticDeletionProtectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectDumpExport(ctx context.Context, params *ApiProjectDumpExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectDumpExportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectLinksCreate(ctx context.Context, params *ApiProjectLinksCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectLinksCreateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectLinksDelete(ctx context.Context, params *ApiProjectLinksDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectLinksDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectLinksSearch(ctx context.Context, params *ApiProjectLinksSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectLinksSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectTagsSearch(ctx context.Context, params *ApiProjectTagsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectTagsSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectTagsSet(ctx context.Context, params *ApiProjectTagsSetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectTagsSetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectsBulkDelete(ctx context.Context, params *ApiProjectsBulkDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectsBulkDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectsCreate(ctx context.Context, params *ApiProjectsCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectsCreateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectsDelete(ctx context.Context, params *ApiProjectsDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectsDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectsSearch(ctx context.Context, params *ApiProjectsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectsSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectsUpdateKey(ctx context.Context, params *ApiProjectsUpdateKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectsUpdateKeyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiProjectsUpdateVisibility(ctx context.Context, params *ApiProjectsUpdateVisibilityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiProjectsUpdateVisibilityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualitygatesCopy(ctx context.Context, params *ApiQualitygatesCopyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualitygatesCopyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualitygatesCreate(ctx context.Context, params *ApiQualitygatesCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualitygatesCreateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualitygatesCreateCondition(ctx context.Context, params *ApiQualitygatesCreateConditionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualitygatesCreateConditionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualitygatesDeleteCondition(ctx context.Context, params *ApiQualitygatesDeleteConditionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualitygatesDeleteConditionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualitygatesDeselect(ctx context.Context, params *ApiQualitygatesDeselectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualitygatesDeselectRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualitygatesDestroy(ctx context.Context, params *ApiQualitygatesDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualitygatesDestroyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualitygatesGetByProject(ctx context.Context, params *ApiQualitygatesGetByProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualitygatesGetByProjectRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualitygatesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualitygatesListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualitygatesProjectStatus(ctx context.Context, params *ApiQualitygatesProjectStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualitygatesProjectStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualitygatesRename(ctx context.Context, params *ApiQualitygatesRenameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualitygatesRenameRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualitygatesSearch(ctx context.Context, params *ApiQualitygatesSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualitygatesSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualitygatesSelect(ctx context.Context, params *ApiQualitygatesSelectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualitygatesSelectRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualitygatesSetAsDefault(ctx context.Context, params *ApiQualitygatesSetAsDefaultParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualitygatesSetAsDefaultRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualitygatesShow(ctx context.Context, params *ApiQualitygatesShowParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualitygatesShowRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualitygatesUpdateCondition(ctx context.Context, params *ApiQualitygatesUpdateConditionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualitygatesUpdateConditionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualityprofilesActivateRule(ctx context.Context, params *ApiQualityprofilesActivateRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualityprofilesActivateRuleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualityprofilesActivateRules(ctx context.Context, params *ApiQualityprofilesActivateRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualityprofilesActivateRulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualityprofilesAddProject(ctx context.Context, params *ApiQualityprofilesAddProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualityprofilesAddProjectRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualityprofilesBackup(ctx context.Context, params *ApiQualityprofilesBackupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualityprofilesBackupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualityprofilesChangeParent(ctx context.Context, params *ApiQualityprofilesChangeParentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualityprofilesChangeParentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualityprofilesChangelog(ctx context.Context, params *ApiQualityprofilesChangelogParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualityprofilesChangelogRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualityprofilesCopy(ctx context.Context, params *ApiQualityprofilesCopyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualityprofilesCopyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualityprofilesCreate(ctx context.Context, params *ApiQualityprofilesCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualityprofilesCreateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualityprofilesDeactivateRule(ctx context.Context, params *ApiQualityprofilesDeactivateRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualityprofilesDeactivateRuleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualityprofilesDeactivateRules(ctx context.Context, params *ApiQualityprofilesDeactivateRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualityprofilesDeactivateRulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualityprofilesDelete(ctx context.Context, params *ApiQualityprofilesDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualityprofilesDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualityprofilesExport(ctx context.Context, params *ApiQualityprofilesExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualityprofilesExportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualityprofilesExporters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualityprofilesExportersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualityprofilesImporters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualityprofilesImportersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualityprofilesInheritance(ctx context.Context, params *ApiQualityprofilesInheritanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualityprofilesInheritanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualityprofilesProjects(ctx context.Context, params *ApiQualityprofilesProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualityprofilesProjectsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualityprofilesRemoveProject(ctx context.Context, params *ApiQualityprofilesRemoveProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualityprofilesRemoveProjectRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualityprofilesRename(ctx context.Context, params *ApiQualityprofilesRenameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualityprofilesRenameRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualityprofilesRestore(ctx context.Context, params *ApiQualityprofilesRestoreParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualityprofilesRestoreRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualityprofilesSearch(ctx context.Context, params *ApiQualityprofilesSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualityprofilesSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiQualityprofilesSetDefault(ctx context.Context, params *ApiQualityprofilesSetDefaultParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiQualityprofilesSetDefaultRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiRulesCreate(ctx context.Context, params *ApiRulesCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiRulesCreateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiRulesDelete(ctx context.Context, params *ApiRulesDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiRulesDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiRulesRepositories(ctx context.Context, params *ApiRulesRepositoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiRulesRepositoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiRulesSearch(ctx context.Context, params *ApiRulesSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiRulesSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiRulesShow(ctx context.Context, params *ApiRulesShowParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiRulesShowRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiRulesTags(ctx context.Context, params *ApiRulesTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiRulesTagsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiRulesUpdate(ctx context.Context, params *ApiRulesUpdateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiRulesUpdateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiServerVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiServerVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSettingsListDefinitions(ctx context.Context, params *ApiSettingsListDefinitionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiSettingsListDefinitionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSettingsReset(ctx context.Context, params *ApiSettingsResetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiSettingsResetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSettingsSet(ctx context.Context, params *ApiSettingsSetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiSettingsSetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSettingsValues(ctx context.Context, params *ApiSettingsValuesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiSettingsValuesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSourcesRaw(ctx context.Context, params *ApiSourcesRawParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiSourcesRawRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSourcesScm(ctx context.Context, params *ApiSourcesScmParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiSourcesScmRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSourcesShow(ctx context.Context, params *ApiSourcesShowParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiSourcesShowRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSystemChangeLogLevel(ctx context.Context, params *ApiSystemChangeLogLevelParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiSystemChangeLogLevelRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSystemDbMigrationStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiSystemDbMigrationStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSystemHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiSystemHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSystemInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiSystemInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSystemLogs(ctx context.Context, params *ApiSystemLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiSystemLogsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSystemMigrateDb(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiSystemMigrateDbRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSystemPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiSystemPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSystemRestart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiSystemRestartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSystemStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiSystemStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSystemUpgrades(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiSystemUpgradesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiUserGroupsAddUser(ctx context.Context, params *ApiUserGroupsAddUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiUserGroupsAddUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiUserGroupsCreate(ctx context.Context, params *ApiUserGroupsCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiUserGroupsCreateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiUserGroupsDelete(ctx context.Context, params *ApiUserGroupsDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiUserGroupsDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiUserGroupsRemoveUser(ctx context.Context, params *ApiUserGroupsRemoveUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiUserGroupsRemoveUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiUserGroupsSearch(ctx context.Context, params *ApiUserGroupsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiUserGroupsSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiUserGroupsUpdate(ctx context.Context, params *ApiUserGroupsUpdateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiUserGroupsUpdateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiUserGroupsUsers(ctx context.Context, params *ApiUserGroupsUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiUserGroupsUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiUserTokensGenerate(ctx context.Context, params *ApiUserTokensGenerateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiUserTokensGenerateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiUserTokensRevoke(ctx context.Context, params *ApiUserTokensRevokeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiUserTokensRevokeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiUserTokensSearch(ctx context.Context, params *ApiUserTokensSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiUserTokensSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiUsersAnonymize(ctx context.Context, params *ApiUsersAnonymizeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiUsersAnonymizeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiUsersChangePassword(ctx context.Context, params *ApiUsersChangePasswordParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiUsersChangePasswordRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiUsersCreate(ctx context.Context, params *ApiUsersCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiUsersCreateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiUsersDeactivate(ctx context.Context, params *ApiUsersDeactivateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiUsersDeactivateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiUsersDismissSonarlintAd(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiUsersDismissSonarlintAdRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiUsersGroups(ctx context.Context, params *ApiUsersGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiUsersGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiUsersSearch(ctx context.Context, params *ApiUsersSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiUsersSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiUsersUpdate(ctx context.Context, params *ApiUsersUpdateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiUsersUpdateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiUsersUpdateIdentityProvider(ctx context.Context, params *ApiUsersUpdateIdentityProviderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiUsersUpdateIdentityProviderRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiUsersUpdateLogin(ctx context.Context, params *ApiUsersUpdateLoginParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiUsersUpdateLoginRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiWebhooksCreate(ctx context.Context, params *ApiWebhooksCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiWebhooksCreateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiWebhooksDelete(ctx context.Context, params *ApiWebhooksDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiWebhooksDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiWebhooksDeliveries(ctx context.Context, params *ApiWebhooksDeliveriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiWebhooksDeliveriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiWebhooksDelivery(ctx context.Context, params *ApiWebhooksDeliveryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiWebhooksDeliveryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiWebhooksList(ctx context.Context, params *ApiWebhooksListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiWebhooksListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiWebhooksUpdate(ctx context.Context, params *ApiWebhooksUpdateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiWebhooksUpdateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiWebservicesList(ctx context.Context, params *ApiWebservicesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiWebservicesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiWebservicesResponseExample(ctx context.Context, params *ApiWebservicesResponseExampleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiWebservicesResponseExampleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewApiAlmIntegrationsImportGitlabProjectRequest generates requests for ApiAlmIntegrationsImportGitlabProject
func NewApiAlmIntegrationsImportGitlabProjectRequest(server string, params *ApiAlmIntegrationsImportGitlabProjectParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alm_integrations/import_gitlab_project")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "almSetting", runtime.ParamLocationQuery, params.AlmSetting); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gitlabProjectId", runtime.ParamLocationQuery, params.GitlabProjectId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAlmIntegrationsListAzureProjectsRequest generates requests for ApiAlmIntegrationsListAzureProjects
func NewApiAlmIntegrationsListAzureProjectsRequest(server string, params *ApiAlmIntegrationsListAzureProjectsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alm_integrations/list_azure_projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "almSetting", runtime.ParamLocationQuery, params.AlmSetting); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAlmIntegrationsListBitbucketserverProjectsRequest generates requests for ApiAlmIntegrationsListBitbucketserverProjects
func NewApiAlmIntegrationsListBitbucketserverProjectsRequest(server string, params *ApiAlmIntegrationsListBitbucketserverProjectsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alm_integrations/list_bitbucketserver_projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "almSetting", runtime.ParamLocationQuery, params.AlmSetting); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAlmIntegrationsSearchAzureReposRequest generates requests for ApiAlmIntegrationsSearchAzureRepos
func NewApiAlmIntegrationsSearchAzureReposRequest(server string, params *ApiAlmIntegrationsSearchAzureReposParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alm_integrations/search_azure_repos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "almSetting", runtime.ParamLocationQuery, params.AlmSetting); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ProjectName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectName", runtime.ParamLocationQuery, *params.ProjectName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchQuery != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "searchQuery", runtime.ParamLocationQuery, *params.SearchQuery); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAlmIntegrationsSearchBitbucketcloudReposRequest generates requests for ApiAlmIntegrationsSearchBitbucketcloudRepos
func NewApiAlmIntegrationsSearchBitbucketcloudReposRequest(server string, params *ApiAlmIntegrationsSearchBitbucketcloudReposParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alm_integrations/search_bitbucketcloud_repos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "almSetting", runtime.ParamLocationQuery, params.AlmSetting); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.P != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p", runtime.ParamLocationQuery, *params.P); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RepositoryName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "repositoryName", runtime.ParamLocationQuery, *params.RepositoryName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAlmIntegrationsSearchBitbucketserverReposRequest generates requests for ApiAlmIntegrationsSearchBitbucketserverRepos
func NewApiAlmIntegrationsSearchBitbucketserverReposRequest(server string, params *ApiAlmIntegrationsSearchBitbucketserverReposParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alm_integrations/search_bitbucketserver_repos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "almSetting", runtime.ParamLocationQuery, params.AlmSetting); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ProjectName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectName", runtime.ParamLocationQuery, *params.ProjectName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RepositoryName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "repositoryName", runtime.ParamLocationQuery, *params.RepositoryName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAlmIntegrationsSearchGitlabReposRequest generates requests for ApiAlmIntegrationsSearchGitlabRepos
func NewApiAlmIntegrationsSearchGitlabReposRequest(server string, params *ApiAlmIntegrationsSearchGitlabReposParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alm_integrations/search_gitlab_repos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "almSetting", runtime.ParamLocationQuery, params.AlmSetting); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.P != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p", runtime.ParamLocationQuery, *params.P); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectName", runtime.ParamLocationQuery, *params.ProjectName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAlmIntegrationsSetPatRequest generates requests for ApiAlmIntegrationsSetPat
func NewApiAlmIntegrationsSetPatRequest(server string, params *ApiAlmIntegrationsSetPatParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alm_integrations/set_pat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "almSetting", runtime.ParamLocationQuery, params.AlmSetting); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pat", runtime.ParamLocationQuery, params.Pat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAlmSettingsCountBindingRequest generates requests for ApiAlmSettingsCountBinding
func NewApiAlmSettingsCountBindingRequest(server string, params *ApiAlmSettingsCountBindingParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alm_settings/count_binding")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "almSetting", runtime.ParamLocationQuery, params.AlmSetting); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAlmSettingsCreateAzureRequest generates requests for ApiAlmSettingsCreateAzure
func NewApiAlmSettingsCreateAzureRequest(server string, params *ApiAlmSettingsCreateAzureParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alm_settings/create_azure")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "personalAccessToken", runtime.ParamLocationQuery, params.PersonalAccessToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAlmSettingsCreateBitbucketRequest generates requests for ApiAlmSettingsCreateBitbucket
func NewApiAlmSettingsCreateBitbucketRequest(server string, params *ApiAlmSettingsCreateBitbucketParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alm_settings/create_bitbucket")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "personalAccessToken", runtime.ParamLocationQuery, params.PersonalAccessToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAlmSettingsCreateBitbucketcloudRequest generates requests for ApiAlmSettingsCreateBitbucketcloud
func NewApiAlmSettingsCreateBitbucketcloudRequest(server string, params *ApiAlmSettingsCreateBitbucketcloudParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alm_settings/create_bitbucketcloud")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientId", runtime.ParamLocationQuery, params.ClientId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientSecret", runtime.ParamLocationQuery, params.ClientSecret); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workspace", runtime.ParamLocationQuery, params.Workspace); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAlmSettingsCreateGithubRequest generates requests for ApiAlmSettingsCreateGithub
func NewApiAlmSettingsCreateGithubRequest(server string, params *ApiAlmSettingsCreateGithubParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alm_settings/create_github")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "appId", runtime.ParamLocationQuery, params.AppId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientId", runtime.ParamLocationQuery, params.ClientId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientSecret", runtime.ParamLocationQuery, params.ClientSecret); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "privateKey", runtime.ParamLocationQuery, params.PrivateKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.WebhookSecret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "webhookSecret", runtime.ParamLocationQuery, *params.WebhookSecret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAlmSettingsCreateGitlabRequest generates requests for ApiAlmSettingsCreateGitlab
func NewApiAlmSettingsCreateGitlabRequest(server string, params *ApiAlmSettingsCreateGitlabParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alm_settings/create_gitlab")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "personalAccessToken", runtime.ParamLocationQuery, params.PersonalAccessToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAlmSettingsDeleteRequest generates requests for ApiAlmSettingsDelete
func NewApiAlmSettingsDeleteRequest(server string, params *ApiAlmSettingsDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alm_settings/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAlmSettingsGetBindingRequest generates requests for ApiAlmSettingsGetBinding
func NewApiAlmSettingsGetBindingRequest(server string, params *ApiAlmSettingsGetBindingParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alm_settings/get_binding")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAlmSettingsListRequest generates requests for ApiAlmSettingsList
func NewApiAlmSettingsListRequest(server string, params *ApiAlmSettingsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alm_settings/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Project != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, *params.Project); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAlmSettingsListDefinitionsRequest generates requests for ApiAlmSettingsListDefinitions
func NewApiAlmSettingsListDefinitionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alm_settings/list_definitions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAlmSettingsUpdateAzureRequest generates requests for ApiAlmSettingsUpdateAzure
func NewApiAlmSettingsUpdateAzureRequest(server string, params *ApiAlmSettingsUpdateAzureParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alm_settings/update_azure")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.NewKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "newKey", runtime.ParamLocationQuery, *params.NewKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PersonalAccessToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "personalAccessToken", runtime.ParamLocationQuery, *params.PersonalAccessToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAlmSettingsUpdateBitbucketRequest generates requests for ApiAlmSettingsUpdateBitbucket
func NewApiAlmSettingsUpdateBitbucketRequest(server string, params *ApiAlmSettingsUpdateBitbucketParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alm_settings/update_bitbucket")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.NewKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "newKey", runtime.ParamLocationQuery, *params.NewKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PersonalAccessToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "personalAccessToken", runtime.ParamLocationQuery, *params.PersonalAccessToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAlmSettingsUpdateBitbucketcloudRequest generates requests for ApiAlmSettingsUpdateBitbucketcloud
func NewApiAlmSettingsUpdateBitbucketcloudRequest(server string, params *ApiAlmSettingsUpdateBitbucketcloudParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alm_settings/update_bitbucketcloud")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientId", runtime.ParamLocationQuery, params.ClientId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ClientSecret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientSecret", runtime.ParamLocationQuery, *params.ClientSecret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.NewKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "newKey", runtime.ParamLocationQuery, *params.NewKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workspace", runtime.ParamLocationQuery, params.Workspace); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAlmSettingsUpdateGithubRequest generates requests for ApiAlmSettingsUpdateGithub
func NewApiAlmSettingsUpdateGithubRequest(server string, params *ApiAlmSettingsUpdateGithubParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alm_settings/update_github")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "appId", runtime.ParamLocationQuery, params.AppId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientId", runtime.ParamLocationQuery, params.ClientId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ClientSecret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientSecret", runtime.ParamLocationQuery, *params.ClientSecret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.NewKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "newKey", runtime.ParamLocationQuery, *params.NewKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PrivateKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "privateKey", runtime.ParamLocationQuery, *params.PrivateKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.WebhookSecret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "webhookSecret", runtime.ParamLocationQuery, *params.WebhookSecret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAlmSettingsUpdateGitlabRequest generates requests for ApiAlmSettingsUpdateGitlab
func NewApiAlmSettingsUpdateGitlabRequest(server string, params *ApiAlmSettingsUpdateGitlabParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alm_settings/update_gitlab")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.NewKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "newKey", runtime.ParamLocationQuery, *params.NewKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PersonalAccessToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "personalAccessToken", runtime.ParamLocationQuery, *params.PersonalAccessToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAlmSettingsValidateRequest generates requests for ApiAlmSettingsValidate
func NewApiAlmSettingsValidateRequest(server string, params *ApiAlmSettingsValidateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/alm_settings/validate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAnalysisCacheGetRequest generates requests for ApiAnalysisCacheGet
func NewApiAnalysisCacheGetRequest(server string, params *ApiAnalysisCacheGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/analysis_cache/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Branch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, *params.Branch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAuthenticationLoginRequest generates requests for ApiAuthenticationLogin
func NewApiAuthenticationLoginRequest(server string, params *ApiAuthenticationLoginParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/authentication/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "login", runtime.ParamLocationQuery, params.Login); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "password", runtime.ParamLocationQuery, params.Password); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAuthenticationLogoutRequest generates requests for ApiAuthenticationLogout
func NewApiAuthenticationLogoutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/authentication/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAuthenticationValidateRequest generates requests for ApiAuthenticationValidate
func NewApiAuthenticationValidateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/authentication/validate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiCeActivityRequest generates requests for ApiCeActivity
func NewApiCeActivityRequest(server string, params *ApiCeActivityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ce/activity")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Component != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component", runtime.ParamLocationQuery, *params.Component); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ComponentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "componentId", runtime.ParamLocationQuery, *params.ComponentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxExecutedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxExecutedAt", runtime.ParamLocationQuery, *params.MaxExecutedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinSubmittedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "minSubmittedAt", runtime.ParamLocationQuery, *params.MinSubmittedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OnlyCurrents != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "onlyCurrents", runtime.ParamLocationQuery, *params.OnlyCurrents); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.P != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p", runtime.ParamLocationQuery, *params.P); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiCeActivityStatusRequest generates requests for ApiCeActivityStatus
func NewApiCeActivityStatusRequest(server string, params *ApiCeActivityStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ce/activity_status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Component != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component", runtime.ParamLocationQuery, *params.Component); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ComponentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "componentId", runtime.ParamLocationQuery, *params.ComponentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiCeComponentRequest generates requests for ApiCeComponent
func NewApiCeComponentRequest(server string, params *ApiCeComponentParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ce/component")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component", runtime.ParamLocationQuery, params.Component); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiCeTaskRequest generates requests for ApiCeTask
func NewApiCeTaskRequest(server string, params *ApiCeTaskParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ce/task")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AdditionalFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiComponentsSearchRequest generates requests for ApiComponentsSearch
func NewApiComponentsSearchRequest(server string, params *ApiComponentsSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/components/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.P != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p", runtime.ParamLocationQuery, *params.P); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "qualifiers", runtime.ParamLocationQuery, params.Qualifiers); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiComponentsShowRequest generates requests for ApiComponentsShow
func NewApiComponentsShowRequest(server string, params *ApiComponentsShowParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/components/show")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Branch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, *params.Branch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component", runtime.ParamLocationQuery, params.Component); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PullRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pullRequest", runtime.ParamLocationQuery, *params.PullRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiComponentsTreeRequest generates requests for ApiComponentsTree
func NewApiComponentsTreeRequest(server string, params *ApiComponentsTreeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/components/tree")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Asc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asc", runtime.ParamLocationQuery, *params.Asc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Branch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, *params.Branch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component", runtime.ParamLocationQuery, params.Component); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.P != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p", runtime.ParamLocationQuery, *params.P); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PullRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pullRequest", runtime.ParamLocationQuery, *params.PullRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Qualifiers != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "qualifiers", runtime.ParamLocationQuery, *params.Qualifiers); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.S != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "s", runtime.ParamLocationQuery, *params.S); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Strategy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "strategy", runtime.ParamLocationQuery, *params.Strategy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiDuplicationsShowRequest generates requests for ApiDuplicationsShow
func NewApiDuplicationsShowRequest(server string, params *ApiDuplicationsShowParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/duplications/show")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiFavoritesAddRequest generates requests for ApiFavoritesAdd
func NewApiFavoritesAddRequest(server string, params *ApiFavoritesAddParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/favorites/add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component", runtime.ParamLocationQuery, params.Component); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiFavoritesRemoveRequest generates requests for ApiFavoritesRemove
func NewApiFavoritesRemoveRequest(server string, params *ApiFavoritesRemoveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/favorites/remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component", runtime.ParamLocationQuery, params.Component); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiFavoritesSearchRequest generates requests for ApiFavoritesSearch
func NewApiFavoritesSearchRequest(server string, params *ApiFavoritesSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/favorites/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.P != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p", runtime.ParamLocationQuery, *params.P); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiHotspotsSearchRequest generates requests for ApiHotspotsSearch
func NewApiHotspotsSearchRequest(server string, params *ApiHotspotsSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hotspots/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Branch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, *params.Branch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cwe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cwe", runtime.ParamLocationQuery, *params.Cwe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Files != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "files", runtime.ParamLocationQuery, *params.Files); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hotspots != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hotspots", runtime.ParamLocationQuery, *params.Hotspots); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InNewCodePeriod != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inNewCodePeriod", runtime.ParamLocationQuery, *params.InNewCodePeriod); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OnlyMine != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "onlyMine", runtime.ParamLocationQuery, *params.OnlyMine); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OwaspAsvs40 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owaspAsvs-4.0", runtime.ParamLocationQuery, *params.OwaspAsvs40); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OwaspAsvsLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owaspAsvsLevel", runtime.ParamLocationQuery, *params.OwaspAsvsLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OwaspTop10 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owaspTop10", runtime.ParamLocationQuery, *params.OwaspTop10); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OwaspTop102021 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owaspTop10-2021", runtime.ParamLocationQuery, *params.OwaspTop102021); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.P != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p", runtime.ParamLocationQuery, *params.P); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PciDss32 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pciDss-3.2", runtime.ParamLocationQuery, *params.PciDss32); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PciDss40 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pciDss-4.0", runtime.ParamLocationQuery, *params.PciDss40); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectKey", runtime.ParamLocationQuery, *params.ProjectKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PullRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pullRequest", runtime.ParamLocationQuery, *params.PullRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Resolution != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resolution", runtime.ParamLocationQuery, *params.Resolution); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SansTop25 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sansTop25", runtime.ParamLocationQuery, *params.SansTop25); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SonarsourceSecurity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sonarsourceSecurity", runtime.ParamLocationQuery, *params.SonarsourceSecurity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiHotspotsShowRequest generates requests for ApiHotspotsShow
func NewApiHotspotsShowRequest(server string, params *ApiHotspotsShowParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hotspots/show")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hotspot", runtime.ParamLocationQuery, params.Hotspot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiIssuesAddCommentRequest generates requests for ApiIssuesAddComment
func NewApiIssuesAddCommentRequest(server string, params *ApiIssuesAddCommentParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/issues/add_comment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "issue", runtime.ParamLocationQuery, params.Issue); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text", runtime.ParamLocationQuery, params.Text); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiIssuesAssignRequest generates requests for ApiIssuesAssign
func NewApiIssuesAssignRequest(server string, params *ApiIssuesAssignParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/issues/assign")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Assignee != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assignee", runtime.ParamLocationQuery, *params.Assignee); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "issue", runtime.ParamLocationQuery, params.Issue); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiIssuesAuthorsRequest generates requests for ApiIssuesAuthors
func NewApiIssuesAuthorsRequest(server string, params *ApiIssuesAuthorsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/issues/authors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Project != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, *params.Project); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiIssuesBulkChangeRequest generates requests for ApiIssuesBulkChange
func NewApiIssuesBulkChangeRequest(server string, params *ApiIssuesBulkChangeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/issues/bulk_change")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AddTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "add_tags", runtime.ParamLocationQuery, *params.AddTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Assign != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assign", runtime.ParamLocationQuery, *params.Assign); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Comment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "comment", runtime.ParamLocationQuery, *params.Comment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DoTransition != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "do_transition", runtime.ParamLocationQuery, *params.DoTransition); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "issues", runtime.ParamLocationQuery, params.Issues); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.RemoveTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remove_tags", runtime.ParamLocationQuery, *params.RemoveTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SendNotifications != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sendNotifications", runtime.ParamLocationQuery, *params.SendNotifications); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SetSeverity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "set_severity", runtime.ParamLocationQuery, *params.SetSeverity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SetType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "set_type", runtime.ParamLocationQuery, *params.SetType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiIssuesChangelogRequest generates requests for ApiIssuesChangelog
func NewApiIssuesChangelogRequest(server string, params *ApiIssuesChangelogParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/issues/changelog")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "issue", runtime.ParamLocationQuery, params.Issue); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiIssuesDeleteCommentRequest generates requests for ApiIssuesDeleteComment
func NewApiIssuesDeleteCommentRequest(server string, params *ApiIssuesDeleteCommentParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/issues/delete_comment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "comment", runtime.ParamLocationQuery, params.Comment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiIssuesDoTransitionRequest generates requests for ApiIssuesDoTransition
func NewApiIssuesDoTransitionRequest(server string, params *ApiIssuesDoTransitionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/issues/do_transition")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "issue", runtime.ParamLocationQuery, params.Issue); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transition", runtime.ParamLocationQuery, params.Transition); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiIssuesEditCommentRequest generates requests for ApiIssuesEditComment
func NewApiIssuesEditCommentRequest(server string, params *ApiIssuesEditCommentParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/issues/edit_comment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "comment", runtime.ParamLocationQuery, params.Comment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text", runtime.ParamLocationQuery, params.Text); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiIssuesReindexRequest generates requests for ApiIssuesReindex
func NewApiIssuesReindexRequest(server string, params *ApiIssuesReindexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/issues/reindex")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiIssuesSearchRequest generates requests for ApiIssuesSearch
func NewApiIssuesSearchRequest(server string, params *ApiIssuesSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/issues/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AdditionalFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Asc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asc", runtime.ParamLocationQuery, *params.Asc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Assigned != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assigned", runtime.ParamLocationQuery, *params.Assigned); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Assignees != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assignees", runtime.ParamLocationQuery, *params.Assignees); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Author != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "author", runtime.ParamLocationQuery, *params.Author); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Branch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, *params.Branch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ComponentKeys != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "componentKeys", runtime.ParamLocationQuery, *params.ComponentKeys); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, *params.CreatedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, *params.CreatedBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedInLast != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdInLast", runtime.ParamLocationQuery, *params.CreatedInLast); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cwe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cwe", runtime.ParamLocationQuery, *params.Cwe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Facets != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "facets", runtime.ParamLocationQuery, *params.Facets); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InNewCodePeriod != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inNewCodePeriod", runtime.ParamLocationQuery, *params.InNewCodePeriod); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Issues != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "issues", runtime.ParamLocationQuery, *params.Issues); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Languages != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "languages", runtime.ParamLocationQuery, *params.Languages); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OnComponentOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "onComponentOnly", runtime.ParamLocationQuery, *params.OnComponentOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OwaspAsvs40 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owaspAsvs-4.0", runtime.ParamLocationQuery, *params.OwaspAsvs40); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OwaspAsvsLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owaspAsvsLevel", runtime.ParamLocationQuery, *params.OwaspAsvsLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OwaspTop10 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owaspTop10", runtime.ParamLocationQuery, *params.OwaspTop10); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OwaspTop102021 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owaspTop10-2021", runtime.ParamLocationQuery, *params.OwaspTop102021); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.P != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p", runtime.ParamLocationQuery, *params.P); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PciDss32 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pciDss-3.2", runtime.ParamLocationQuery, *params.PciDss32); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PciDss40 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pciDss-4.0", runtime.ParamLocationQuery, *params.PciDss40); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PullRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pullRequest", runtime.ParamLocationQuery, *params.PullRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Resolutions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resolutions", runtime.ParamLocationQuery, *params.Resolutions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Resolved != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resolved", runtime.ParamLocationQuery, *params.Resolved); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Rules != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rules", runtime.ParamLocationQuery, *params.Rules); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.S != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "s", runtime.ParamLocationQuery, *params.S); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SansTop25 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sansTop25", runtime.ParamLocationQuery, *params.SansTop25); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Scopes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scopes", runtime.ParamLocationQuery, *params.Scopes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Severities != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severities", runtime.ParamLocationQuery, *params.Severities); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SinceLeakPeriod != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sinceLeakPeriod", runtime.ParamLocationQuery, *params.SinceLeakPeriod); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SonarsourceSecurity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sonarsourceSecurity", runtime.ParamLocationQuery, *params.SonarsourceSecurity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Statuses != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statuses", runtime.ParamLocationQuery, *params.Statuses); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimeZone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timeZone", runtime.ParamLocationQuery, *params.TimeZone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Types != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "types", runtime.ParamLocationQuery, *params.Types); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiIssuesSetSeverityRequest generates requests for ApiIssuesSetSeverity
func NewApiIssuesSetSeverityRequest(server string, params *ApiIssuesSetSeverityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/issues/set_severity")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "issue", runtime.ParamLocationQuery, params.Issue); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severity", runtime.ParamLocationQuery, params.Severity); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiIssuesSetTagsRequest generates requests for ApiIssuesSetTags
func NewApiIssuesSetTagsRequest(server string, params *ApiIssuesSetTagsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/issues/set_tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "issue", runtime.ParamLocationQuery, params.Issue); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiIssuesSetTypeRequest generates requests for ApiIssuesSetType
func NewApiIssuesSetTypeRequest(server string, params *ApiIssuesSetTypeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/issues/set_type")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "issue", runtime.ParamLocationQuery, params.Issue); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiIssuesTagsRequest generates requests for ApiIssuesTags
func NewApiIssuesTagsRequest(server string, params *ApiIssuesTagsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/issues/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.All != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "all", runtime.ParamLocationQuery, *params.All); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Branch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, *params.Branch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Project != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, *params.Project); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiLanguagesListRequest generates requests for ApiLanguagesList
func NewApiLanguagesListRequest(server string, params *ApiLanguagesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/languages/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiMeasuresComponentRequest generates requests for ApiMeasuresComponent
func NewApiMeasuresComponentRequest(server string, params *ApiMeasuresComponentParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/measures/component")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AdditionalFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Branch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, *params.Branch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component", runtime.ParamLocationQuery, params.Component); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metricKeys", runtime.ParamLocationQuery, params.MetricKeys); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PullRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pullRequest", runtime.ParamLocationQuery, *params.PullRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiMeasuresComponentTreeRequest generates requests for ApiMeasuresComponentTree
func NewApiMeasuresComponentTreeRequest(server string, params *ApiMeasuresComponentTreeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/measures/component_tree")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AdditionalFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "additionalFields", runtime.ParamLocationQuery, *params.AdditionalFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Asc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asc", runtime.ParamLocationQuery, *params.Asc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Branch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, *params.Branch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component", runtime.ParamLocationQuery, params.Component); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metricKeys", runtime.ParamLocationQuery, params.MetricKeys); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.MetricPeriodSort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metricPeriodSort", runtime.ParamLocationQuery, *params.MetricPeriodSort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MetricSort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metricSort", runtime.ParamLocationQuery, *params.MetricSort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MetricSortFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metricSortFilter", runtime.ParamLocationQuery, *params.MetricSortFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.P != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p", runtime.ParamLocationQuery, *params.P); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PullRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pullRequest", runtime.ParamLocationQuery, *params.PullRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Qualifiers != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "qualifiers", runtime.ParamLocationQuery, *params.Qualifiers); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.S != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "s", runtime.ParamLocationQuery, *params.S); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Strategy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "strategy", runtime.ParamLocationQuery, *params.Strategy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiMeasuresSearchHistoryRequest generates requests for ApiMeasuresSearchHistory
func NewApiMeasuresSearchHistoryRequest(server string, params *ApiMeasuresSearchHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/measures/search_history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Branch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, *params.Branch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component", runtime.ParamLocationQuery, params.Component); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metrics", runtime.ParamLocationQuery, params.Metrics); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.P != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p", runtime.ParamLocationQuery, *params.P); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PullRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pullRequest", runtime.ParamLocationQuery, *params.PullRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiMetricsSearchRequest generates requests for ApiMetricsSearch
func NewApiMetricsSearchRequest(server string, params *ApiMetricsSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/metrics/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.P != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p", runtime.ParamLocationQuery, *params.P); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiMetricsTypesRequest generates requests for ApiMetricsTypes
func NewApiMetricsTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/metrics/types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiMonitoringMetricsRequest generates requests for ApiMonitoringMetrics
func NewApiMonitoringMetricsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/monitoring/metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiNewCodePeriodsListRequest generates requests for ApiNewCodePeriodsList
func NewApiNewCodePeriodsListRequest(server string, params *ApiNewCodePeriodsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/new_code_periods/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiNewCodePeriodsSetRequest generates requests for ApiNewCodePeriodsSet
func NewApiNewCodePeriodsSetRequest(server string, params *ApiNewCodePeriodsSetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/new_code_periods/set")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Branch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, *params.Branch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Project != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, *params.Project); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Value != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, *params.Value); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiNewCodePeriodsShowRequest generates requests for ApiNewCodePeriodsShow
func NewApiNewCodePeriodsShowRequest(server string, params *ApiNewCodePeriodsShowParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/new_code_periods/show")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Branch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, *params.Branch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Project != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, *params.Project); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiNewCodePeriodsUnsetRequest generates requests for ApiNewCodePeriodsUnset
func NewApiNewCodePeriodsUnsetRequest(server string, params *ApiNewCodePeriodsUnsetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/new_code_periods/unset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Branch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, *params.Branch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Project != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, *params.Project); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiNotificationsAddRequest generates requests for ApiNotificationsAdd
func NewApiNotificationsAddRequest(server string, params *ApiNotificationsAddParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/notifications/add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Channel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel", runtime.ParamLocationQuery, *params.Channel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Login != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "login", runtime.ParamLocationQuery, *params.Login); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Project != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, *params.Project); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiNotificationsListRequest generates requests for ApiNotificationsList
func NewApiNotificationsListRequest(server string, params *ApiNotificationsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/notifications/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Login != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "login", runtime.ParamLocationQuery, *params.Login); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiNotificationsRemoveRequest generates requests for ApiNotificationsRemove
func NewApiNotificationsRemoveRequest(server string, params *ApiNotificationsRemoveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/notifications/remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Channel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel", runtime.ParamLocationQuery, *params.Channel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Login != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "login", runtime.ParamLocationQuery, *params.Login); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Project != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, *params.Project); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPermissionsAddGroupRequest generates requests for ApiPermissionsAddGroup
func NewApiPermissionsAddGroupRequest(server string, params *ApiPermissionsAddGroupParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/permissions/add_group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "groupId", runtime.ParamLocationQuery, *params.GroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GroupName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "groupName", runtime.ParamLocationQuery, *params.GroupName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "permission", runtime.ParamLocationQuery, params.Permission); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectId", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectKey", runtime.ParamLocationQuery, *params.ProjectKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPermissionsAddGroupToTemplateRequest generates requests for ApiPermissionsAddGroupToTemplate
func NewApiPermissionsAddGroupToTemplateRequest(server string, params *ApiPermissionsAddGroupToTemplateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/permissions/add_group_to_template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "groupId", runtime.ParamLocationQuery, *params.GroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GroupName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "groupName", runtime.ParamLocationQuery, *params.GroupName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "permission", runtime.ParamLocationQuery, params.Permission); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TemplateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateId", runtime.ParamLocationQuery, *params.TemplateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TemplateName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateName", runtime.ParamLocationQuery, *params.TemplateName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPermissionsAddProjectCreatorToTemplateRequest generates requests for ApiPermissionsAddProjectCreatorToTemplate
func NewApiPermissionsAddProjectCreatorToTemplateRequest(server string, params *ApiPermissionsAddProjectCreatorToTemplateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/permissions/add_project_creator_to_template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "permission", runtime.ParamLocationQuery, params.Permission); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TemplateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateId", runtime.ParamLocationQuery, *params.TemplateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TemplateName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateName", runtime.ParamLocationQuery, *params.TemplateName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPermissionsAddUserRequest generates requests for ApiPermissionsAddUser
func NewApiPermissionsAddUserRequest(server string, params *ApiPermissionsAddUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/permissions/add_user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "login", runtime.ParamLocationQuery, params.Login); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "permission", runtime.ParamLocationQuery, params.Permission); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectId", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectKey", runtime.ParamLocationQuery, *params.ProjectKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPermissionsAddUserToTemplateRequest generates requests for ApiPermissionsAddUserToTemplate
func NewApiPermissionsAddUserToTemplateRequest(server string, params *ApiPermissionsAddUserToTemplateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/permissions/add_user_to_template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "login", runtime.ParamLocationQuery, params.Login); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "permission", runtime.ParamLocationQuery, params.Permission); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TemplateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateId", runtime.ParamLocationQuery, *params.TemplateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TemplateName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateName", runtime.ParamLocationQuery, *params.TemplateName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPermissionsApplyTemplateRequest generates requests for ApiPermissionsApplyTemplate
func NewApiPermissionsApplyTemplateRequest(server string, params *ApiPermissionsApplyTemplateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/permissions/apply_template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectId", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectKey", runtime.ParamLocationQuery, *params.ProjectKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TemplateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateId", runtime.ParamLocationQuery, *params.TemplateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TemplateName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateName", runtime.ParamLocationQuery, *params.TemplateName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPermissionsBulkApplyTemplateRequest generates requests for ApiPermissionsBulkApplyTemplate
func NewApiPermissionsBulkApplyTemplateRequest(server string, params *ApiPermissionsBulkApplyTemplateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/permissions/bulk_apply_template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AnalyzedBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "analyzedBefore", runtime.ParamLocationQuery, *params.AnalyzedBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OnProvisionedOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "onProvisionedOnly", runtime.ParamLocationQuery, *params.OnProvisionedOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Projects != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projects", runtime.ParamLocationQuery, *params.Projects); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Qualifiers != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "qualifiers", runtime.ParamLocationQuery, *params.Qualifiers); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TemplateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateId", runtime.ParamLocationQuery, *params.TemplateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TemplateName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateName", runtime.ParamLocationQuery, *params.TemplateName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPermissionsCreateTemplateRequest generates requests for ApiPermissionsCreateTemplate
func NewApiPermissionsCreateTemplateRequest(server string, params *ApiPermissionsCreateTemplateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/permissions/create_template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ProjectKeyPattern != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectKeyPattern", runtime.ParamLocationQuery, *params.ProjectKeyPattern); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPermissionsDeleteTemplateRequest generates requests for ApiPermissionsDeleteTemplate
func NewApiPermissionsDeleteTemplateRequest(server string, params *ApiPermissionsDeleteTemplateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/permissions/delete_template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TemplateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateId", runtime.ParamLocationQuery, *params.TemplateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TemplateName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateName", runtime.ParamLocationQuery, *params.TemplateName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPermissionsRemoveGroupRequest generates requests for ApiPermissionsRemoveGroup
func NewApiPermissionsRemoveGroupRequest(server string, params *ApiPermissionsRemoveGroupParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/permissions/remove_group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "groupId", runtime.ParamLocationQuery, *params.GroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GroupName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "groupName", runtime.ParamLocationQuery, *params.GroupName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "permission", runtime.ParamLocationQuery, params.Permission); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectId", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectKey", runtime.ParamLocationQuery, *params.ProjectKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPermissionsRemoveGroupFromTemplateRequest generates requests for ApiPermissionsRemoveGroupFromTemplate
func NewApiPermissionsRemoveGroupFromTemplateRequest(server string, params *ApiPermissionsRemoveGroupFromTemplateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/permissions/remove_group_from_template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "groupId", runtime.ParamLocationQuery, *params.GroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GroupName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "groupName", runtime.ParamLocationQuery, *params.GroupName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "permission", runtime.ParamLocationQuery, params.Permission); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TemplateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateId", runtime.ParamLocationQuery, *params.TemplateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TemplateName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateName", runtime.ParamLocationQuery, *params.TemplateName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPermissionsRemoveProjectCreatorFromTemplateRequest generates requests for ApiPermissionsRemoveProjectCreatorFromTemplate
func NewApiPermissionsRemoveProjectCreatorFromTemplateRequest(server string, params *ApiPermissionsRemoveProjectCreatorFromTemplateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/permissions/remove_project_creator_from_template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "permission", runtime.ParamLocationQuery, params.Permission); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TemplateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateId", runtime.ParamLocationQuery, *params.TemplateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TemplateName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateName", runtime.ParamLocationQuery, *params.TemplateName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPermissionsRemoveUserRequest generates requests for ApiPermissionsRemoveUser
func NewApiPermissionsRemoveUserRequest(server string, params *ApiPermissionsRemoveUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/permissions/remove_user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "login", runtime.ParamLocationQuery, params.Login); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "permission", runtime.ParamLocationQuery, params.Permission); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectId", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectKey", runtime.ParamLocationQuery, *params.ProjectKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPermissionsRemoveUserFromTemplateRequest generates requests for ApiPermissionsRemoveUserFromTemplate
func NewApiPermissionsRemoveUserFromTemplateRequest(server string, params *ApiPermissionsRemoveUserFromTemplateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/permissions/remove_user_from_template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "login", runtime.ParamLocationQuery, params.Login); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "permission", runtime.ParamLocationQuery, params.Permission); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TemplateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateId", runtime.ParamLocationQuery, *params.TemplateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TemplateName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateName", runtime.ParamLocationQuery, *params.TemplateName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPermissionsSearchTemplatesRequest generates requests for ApiPermissionsSearchTemplates
func NewApiPermissionsSearchTemplatesRequest(server string, params *ApiPermissionsSearchTemplatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/permissions/search_templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPermissionsSetDefaultTemplateRequest generates requests for ApiPermissionsSetDefaultTemplate
func NewApiPermissionsSetDefaultTemplateRequest(server string, params *ApiPermissionsSetDefaultTemplateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/permissions/set_default_template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Qualifier != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "qualifier", runtime.ParamLocationQuery, *params.Qualifier); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TemplateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateId", runtime.ParamLocationQuery, *params.TemplateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TemplateName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateName", runtime.ParamLocationQuery, *params.TemplateName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPermissionsUpdateTemplateRequest generates requests for ApiPermissionsUpdateTemplate
func NewApiPermissionsUpdateTemplateRequest(server string, params *ApiPermissionsUpdateTemplateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/permissions/update_template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectKeyPattern != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectKeyPattern", runtime.ParamLocationQuery, *params.ProjectKeyPattern); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPluginsAvailableRequest generates requests for ApiPluginsAvailable
func NewApiPluginsAvailableRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/available")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPluginsCancelAllRequest generates requests for ApiPluginsCancelAll
func NewApiPluginsCancelAllRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/cancel_all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPluginsInstallRequest generates requests for ApiPluginsInstall
func NewApiPluginsInstallRequest(server string, params *ApiPluginsInstallParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/install")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPluginsInstalledRequest generates requests for ApiPluginsInstalled
func NewApiPluginsInstalledRequest(server string, params *ApiPluginsInstalledParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/installed")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.F != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "f", runtime.ParamLocationQuery, *params.F); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPluginsPendingRequest generates requests for ApiPluginsPending
func NewApiPluginsPendingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/pending")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPluginsUninstallRequest generates requests for ApiPluginsUninstall
func NewApiPluginsUninstallRequest(server string, params *ApiPluginsUninstallParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/uninstall")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPluginsUpdateRequest generates requests for ApiPluginsUpdate
func NewApiPluginsUpdateRequest(server string, params *ApiPluginsUpdateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPluginsUpdatesRequest generates requests for ApiPluginsUpdates
func NewApiPluginsUpdatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/updates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectAnalysesCreateEventRequest generates requests for ApiProjectAnalysesCreateEvent
func NewApiProjectAnalysesCreateEventRequest(server string, params *ApiProjectAnalysesCreateEventParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project_analyses/create_event")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "analysis", runtime.ParamLocationQuery, params.Analysis); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectAnalysesDeleteRequest generates requests for ApiProjectAnalysesDelete
func NewApiProjectAnalysesDeleteRequest(server string, params *ApiProjectAnalysesDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project_analyses/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "analysis", runtime.ParamLocationQuery, params.Analysis); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectAnalysesDeleteEventRequest generates requests for ApiProjectAnalysesDeleteEvent
func NewApiProjectAnalysesDeleteEventRequest(server string, params *ApiProjectAnalysesDeleteEventParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project_analyses/delete_event")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "event", runtime.ParamLocationQuery, params.Event); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectAnalysesSearchRequest generates requests for ApiProjectAnalysesSearch
func NewApiProjectAnalysesSearchRequest(server string, params *ApiProjectAnalysesSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project_analyses/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.P != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p", runtime.ParamLocationQuery, *params.P); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectAnalysesSetBaselineRequest generates requests for ApiProjectAnalysesSetBaseline
func NewApiProjectAnalysesSetBaselineRequest(server string, params *ApiProjectAnalysesSetBaselineParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project_analyses/set_baseline")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "analysis", runtime.ParamLocationQuery, params.Analysis); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Branch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, *params.Branch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectAnalysesUnsetBaselineRequest generates requests for ApiProjectAnalysesUnsetBaseline
func NewApiProjectAnalysesUnsetBaselineRequest(server string, params *ApiProjectAnalysesUnsetBaselineParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project_analyses/unset_baseline")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Branch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, *params.Branch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectAnalysesUpdateEventRequest generates requests for ApiProjectAnalysesUpdateEvent
func NewApiProjectAnalysesUpdateEventRequest(server string, params *ApiProjectAnalysesUpdateEventParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project_analyses/update_event")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "event", runtime.ParamLocationQuery, params.Event); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectBadgesMeasureRequest generates requests for ApiProjectBadgesMeasure
func NewApiProjectBadgesMeasureRequest(server string, params *ApiProjectBadgesMeasureParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project_badges/measure")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Branch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, *params.Branch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metric", runtime.ParamLocationQuery, params.Metric); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Token != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectBadgesQualityGateRequest generates requests for ApiProjectBadgesQualityGate
func NewApiProjectBadgesQualityGateRequest(server string, params *ApiProjectBadgesQualityGateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project_badges/quality_gate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Branch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, *params.Branch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Token != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectBadgesRenewTokenRequest generates requests for ApiProjectBadgesRenewToken
func NewApiProjectBadgesRenewTokenRequest(server string, params *ApiProjectBadgesRenewTokenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project_badges/renew_token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectBadgesTokenRequest generates requests for ApiProjectBadgesToken
func NewApiProjectBadgesTokenRequest(server string, params *ApiProjectBadgesTokenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project_badges/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectBranchesDeleteRequest generates requests for ApiProjectBranchesDelete
func NewApiProjectBranchesDeleteRequest(server string, params *ApiProjectBranchesDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project_branches/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, params.Branch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectBranchesListRequest generates requests for ApiProjectBranchesList
func NewApiProjectBranchesListRequest(server string, params *ApiProjectBranchesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project_branches/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectBranchesRenameRequest generates requests for ApiProjectBranchesRename
func NewApiProjectBranchesRenameRequest(server string, params *ApiProjectBranchesRenameParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project_branches/rename")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectBranchesSetAutomaticDeletionProtectionRequest generates requests for ApiProjectBranchesSetAutomaticDeletionProtection
func NewApiProjectBranchesSetAutomaticDeletionProtectionRequest(server string, params *ApiProjectBranchesSetAutomaticDeletionProtectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project_branches/set_automatic_deletion_protection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, params.Branch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, params.Value); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectDumpExportRequest generates requests for ApiProjectDumpExport
func NewApiProjectDumpExportRequest(server string, params *ApiProjectDumpExportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project_dump/export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectLinksCreateRequest generates requests for ApiProjectLinksCreate
func NewApiProjectLinksCreateRequest(server string, params *ApiProjectLinksCreateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project_links/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectId", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectKey", runtime.ParamLocationQuery, *params.ProjectKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectLinksDeleteRequest generates requests for ApiProjectLinksDelete
func NewApiProjectLinksDeleteRequest(server string, params *ApiProjectLinksDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project_links/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectLinksSearchRequest generates requests for ApiProjectLinksSearch
func NewApiProjectLinksSearchRequest(server string, params *ApiProjectLinksSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project_links/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectId", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectKey", runtime.ParamLocationQuery, *params.ProjectKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectTagsSearchRequest generates requests for ApiProjectTagsSearch
func NewApiProjectTagsSearchRequest(server string, params *ApiProjectTagsSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project_tags/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.P != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p", runtime.ParamLocationQuery, *params.P); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectTagsSetRequest generates requests for ApiProjectTagsSet
func NewApiProjectTagsSetRequest(server string, params *ApiProjectTagsSetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project_tags/set")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, params.Tags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectsBulkDeleteRequest generates requests for ApiProjectsBulkDelete
func NewApiProjectsBulkDeleteRequest(server string, params *ApiProjectsBulkDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/projects/bulk_delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AnalyzedBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "analyzedBefore", runtime.ParamLocationQuery, *params.AnalyzedBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OnProvisionedOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "onProvisionedOnly", runtime.ParamLocationQuery, *params.OnProvisionedOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Projects != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projects", runtime.ParamLocationQuery, *params.Projects); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Qualifiers != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "qualifiers", runtime.ParamLocationQuery, *params.Qualifiers); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectsCreateRequest generates requests for ApiProjectsCreate
func NewApiProjectsCreateRequest(server string, params *ApiProjectsCreateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/projects/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MainBranch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mainBranch", runtime.ParamLocationQuery, *params.MainBranch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Visibility != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "visibility", runtime.ParamLocationQuery, *params.Visibility); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectsDeleteRequest generates requests for ApiProjectsDelete
func NewApiProjectsDeleteRequest(server string, params *ApiProjectsDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/projects/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectsSearchRequest generates requests for ApiProjectsSearch
func NewApiProjectsSearchRequest(server string, params *ApiProjectsSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/projects/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AnalyzedBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "analyzedBefore", runtime.ParamLocationQuery, *params.AnalyzedBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OnProvisionedOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "onProvisionedOnly", runtime.ParamLocationQuery, *params.OnProvisionedOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.P != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p", runtime.ParamLocationQuery, *params.P); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Projects != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projects", runtime.ParamLocationQuery, *params.Projects); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Qualifiers != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "qualifiers", runtime.ParamLocationQuery, *params.Qualifiers); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectsUpdateKeyRequest generates requests for ApiProjectsUpdateKey
func NewApiProjectsUpdateKeyRequest(server string, params *ApiProjectsUpdateKeyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/projects/update_key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, params.To); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiProjectsUpdateVisibilityRequest generates requests for ApiProjectsUpdateVisibility
func NewApiProjectsUpdateVisibilityRequest(server string, params *ApiProjectsUpdateVisibilityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/projects/update_visibility")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "visibility", runtime.ParamLocationQuery, params.Visibility); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualitygatesCopyRequest generates requests for ApiQualitygatesCopy
func NewApiQualitygatesCopyRequest(server string, params *ApiQualitygatesCopyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualitygates/copy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SourceName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sourceName", runtime.ParamLocationQuery, *params.SourceName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualitygatesCreateRequest generates requests for ApiQualitygatesCreate
func NewApiQualitygatesCreateRequest(server string, params *ApiQualitygatesCreateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualitygates/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualitygatesCreateConditionRequest generates requests for ApiQualitygatesCreateCondition
func NewApiQualitygatesCreateConditionRequest(server string, params *ApiQualitygatesCreateConditionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualitygates/create_condition")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "error", runtime.ParamLocationQuery, params.Error); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.GateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gateId", runtime.ParamLocationQuery, *params.GateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GateName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gateName", runtime.ParamLocationQuery, *params.GateName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metric", runtime.ParamLocationQuery, params.Metric); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Op != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "op", runtime.ParamLocationQuery, *params.Op); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualitygatesDeleteConditionRequest generates requests for ApiQualitygatesDeleteCondition
func NewApiQualitygatesDeleteConditionRequest(server string, params *ApiQualitygatesDeleteConditionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualitygates/delete_condition")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualitygatesDeselectRequest generates requests for ApiQualitygatesDeselect
func NewApiQualitygatesDeselectRequest(server string, params *ApiQualitygatesDeselectParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualitygates/deselect")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectKey", runtime.ParamLocationQuery, params.ProjectKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualitygatesDestroyRequest generates requests for ApiQualitygatesDestroy
func NewApiQualitygatesDestroyRequest(server string, params *ApiQualitygatesDestroyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualitygates/destroy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualitygatesGetByProjectRequest generates requests for ApiQualitygatesGetByProject
func NewApiQualitygatesGetByProjectRequest(server string, params *ApiQualitygatesGetByProjectParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualitygates/get_by_project")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualitygatesListRequest generates requests for ApiQualitygatesList
func NewApiQualitygatesListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualitygates/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualitygatesProjectStatusRequest generates requests for ApiQualitygatesProjectStatus
func NewApiQualitygatesProjectStatusRequest(server string, params *ApiQualitygatesProjectStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualitygates/project_status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AnalysisId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "analysisId", runtime.ParamLocationQuery, *params.AnalysisId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Branch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, *params.Branch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectId", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectKey", runtime.ParamLocationQuery, *params.ProjectKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PullRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pullRequest", runtime.ParamLocationQuery, *params.PullRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualitygatesRenameRequest generates requests for ApiQualitygatesRename
func NewApiQualitygatesRenameRequest(server string, params *ApiQualitygatesRenameParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualitygates/rename")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CurrentName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "currentName", runtime.ParamLocationQuery, *params.CurrentName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualitygatesSearchRequest generates requests for ApiQualitygatesSearch
func NewApiQualitygatesSearchRequest(server string, params *ApiQualitygatesSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualitygates/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gateId", runtime.ParamLocationQuery, *params.GateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GateName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gateName", runtime.ParamLocationQuery, *params.GateName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Selected != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "selected", runtime.ParamLocationQuery, *params.Selected); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualitygatesSelectRequest generates requests for ApiQualitygatesSelect
func NewApiQualitygatesSelectRequest(server string, params *ApiQualitygatesSelectParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualitygates/select")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gateId", runtime.ParamLocationQuery, *params.GateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GateName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gateName", runtime.ParamLocationQuery, *params.GateName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectKey", runtime.ParamLocationQuery, params.ProjectKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualitygatesSetAsDefaultRequest generates requests for ApiQualitygatesSetAsDefault
func NewApiQualitygatesSetAsDefaultRequest(server string, params *ApiQualitygatesSetAsDefaultParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualitygates/set_as_default")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualitygatesShowRequest generates requests for ApiQualitygatesShow
func NewApiQualitygatesShowRequest(server string, params *ApiQualitygatesShowParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualitygates/show")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualitygatesUpdateConditionRequest generates requests for ApiQualitygatesUpdateCondition
func NewApiQualitygatesUpdateConditionRequest(server string, params *ApiQualitygatesUpdateConditionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualitygates/update_condition")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "error", runtime.ParamLocationQuery, params.Error); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metric", runtime.ParamLocationQuery, params.Metric); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Op != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "op", runtime.ParamLocationQuery, *params.Op); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualityprofilesActivateRuleRequest generates requests for ApiQualityprofilesActivateRule
func NewApiQualityprofilesActivateRuleRequest(server string, params *ApiQualityprofilesActivateRuleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualityprofiles/activate_rule")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Params != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "params", runtime.ParamLocationQuery, *params.Params); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reset", runtime.ParamLocationQuery, *params.Reset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rule", runtime.ParamLocationQuery, params.Rule); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Severity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severity", runtime.ParamLocationQuery, *params.Severity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualityprofilesActivateRulesRequest generates requests for ApiQualityprofilesActivateRules
func NewApiQualityprofilesActivateRulesRequest(server string, params *ApiQualityprofilesActivateRulesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualityprofiles/activate_rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Activation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "activation", runtime.ParamLocationQuery, *params.Activation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ActiveSeverities != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active_severities", runtime.ParamLocationQuery, *params.ActiveSeverities); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Asc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asc", runtime.ParamLocationQuery, *params.Asc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AvailableSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "available_since", runtime.ParamLocationQuery, *params.AvailableSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cwe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cwe", runtime.ParamLocationQuery, *params.Cwe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Inheritance != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inheritance", runtime.ParamLocationQuery, *params.Inheritance); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsTemplate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_template", runtime.ParamLocationQuery, *params.IsTemplate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Languages != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "languages", runtime.ParamLocationQuery, *params.Languages); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OwaspTop10 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owaspTop10", runtime.ParamLocationQuery, *params.OwaspTop10); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OwaspTop102021 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owaspTop10-2021", runtime.ParamLocationQuery, *params.OwaspTop102021); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Qprofile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "qprofile", runtime.ParamLocationQuery, *params.Qprofile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Repositories != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "repositories", runtime.ParamLocationQuery, *params.Repositories); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RuleKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rule_key", runtime.ParamLocationQuery, *params.RuleKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.S != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "s", runtime.ParamLocationQuery, *params.S); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SansTop25 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sansTop25", runtime.ParamLocationQuery, *params.SansTop25); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Severities != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severities", runtime.ParamLocationQuery, *params.Severities); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SonarsourceSecurity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sonarsourceSecurity", runtime.ParamLocationQuery, *params.SonarsourceSecurity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Statuses != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statuses", runtime.ParamLocationQuery, *params.Statuses); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetKey", runtime.ParamLocationQuery, params.TargetKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TargetSeverity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetSeverity", runtime.ParamLocationQuery, *params.TargetSeverity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TemplateKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "template_key", runtime.ParamLocationQuery, *params.TemplateKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Types != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "types", runtime.ParamLocationQuery, *params.Types); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualityprofilesAddProjectRequest generates requests for ApiQualityprofilesAddProject
func NewApiQualityprofilesAddProjectRequest(server string, params *ApiQualityprofilesAddProjectParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualityprofiles/add_project")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, params.Language); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "qualityProfile", runtime.ParamLocationQuery, params.QualityProfile); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualityprofilesBackupRequest generates requests for ApiQualityprofilesBackup
func NewApiQualityprofilesBackupRequest(server string, params *ApiQualityprofilesBackupParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualityprofiles/backup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, params.Language); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "qualityProfile", runtime.ParamLocationQuery, params.QualityProfile); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualityprofilesChangeParentRequest generates requests for ApiQualityprofilesChangeParent
func NewApiQualityprofilesChangeParentRequest(server string, params *ApiQualityprofilesChangeParentParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualityprofiles/change_parent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, params.Language); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ParentQualityProfile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parentQualityProfile", runtime.ParamLocationQuery, *params.ParentQualityProfile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "qualityProfile", runtime.ParamLocationQuery, params.QualityProfile); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualityprofilesChangelogRequest generates requests for ApiQualityprofilesChangelog
func NewApiQualityprofilesChangelogRequest(server string, params *ApiQualityprofilesChangelogParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualityprofiles/changelog")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, params.Language); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.P != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p", runtime.ParamLocationQuery, *params.P); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "qualityProfile", runtime.ParamLocationQuery, params.QualityProfile); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Since != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, *params.Since); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualityprofilesCopyRequest generates requests for ApiQualityprofilesCopy
func NewApiQualityprofilesCopyRequest(server string, params *ApiQualityprofilesCopyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualityprofiles/copy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromKey", runtime.ParamLocationQuery, params.FromKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toName", runtime.ParamLocationQuery, params.ToName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualityprofilesCreateRequest generates requests for ApiQualityprofilesCreate
func NewApiQualityprofilesCreateRequest(server string, params *ApiQualityprofilesCreateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualityprofiles/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, params.Language); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualityprofilesDeactivateRuleRequest generates requests for ApiQualityprofilesDeactivateRule
func NewApiQualityprofilesDeactivateRuleRequest(server string, params *ApiQualityprofilesDeactivateRuleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualityprofiles/deactivate_rule")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rule", runtime.ParamLocationQuery, params.Rule); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualityprofilesDeactivateRulesRequest generates requests for ApiQualityprofilesDeactivateRules
func NewApiQualityprofilesDeactivateRulesRequest(server string, params *ApiQualityprofilesDeactivateRulesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualityprofiles/deactivate_rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Activation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "activation", runtime.ParamLocationQuery, *params.Activation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ActiveSeverities != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active_severities", runtime.ParamLocationQuery, *params.ActiveSeverities); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Asc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asc", runtime.ParamLocationQuery, *params.Asc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AvailableSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "available_since", runtime.ParamLocationQuery, *params.AvailableSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cwe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cwe", runtime.ParamLocationQuery, *params.Cwe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Inheritance != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inheritance", runtime.ParamLocationQuery, *params.Inheritance); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsTemplate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_template", runtime.ParamLocationQuery, *params.IsTemplate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Languages != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "languages", runtime.ParamLocationQuery, *params.Languages); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OwaspTop10 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owaspTop10", runtime.ParamLocationQuery, *params.OwaspTop10); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OwaspTop102021 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owaspTop10-2021", runtime.ParamLocationQuery, *params.OwaspTop102021); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Qprofile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "qprofile", runtime.ParamLocationQuery, *params.Qprofile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Repositories != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "repositories", runtime.ParamLocationQuery, *params.Repositories); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RuleKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rule_key", runtime.ParamLocationQuery, *params.RuleKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.S != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "s", runtime.ParamLocationQuery, *params.S); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SansTop25 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sansTop25", runtime.ParamLocationQuery, *params.SansTop25); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Severities != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severities", runtime.ParamLocationQuery, *params.Severities); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SonarsourceSecurity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sonarsourceSecurity", runtime.ParamLocationQuery, *params.SonarsourceSecurity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Statuses != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statuses", runtime.ParamLocationQuery, *params.Statuses); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetKey", runtime.ParamLocationQuery, params.TargetKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TemplateKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "template_key", runtime.ParamLocationQuery, *params.TemplateKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Types != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "types", runtime.ParamLocationQuery, *params.Types); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualityprofilesDeleteRequest generates requests for ApiQualityprofilesDelete
func NewApiQualityprofilesDeleteRequest(server string, params *ApiQualityprofilesDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualityprofiles/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, params.Language); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "qualityProfile", runtime.ParamLocationQuery, params.QualityProfile); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualityprofilesExportRequest generates requests for ApiQualityprofilesExport
func NewApiQualityprofilesExportRequest(server string, params *ApiQualityprofilesExportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualityprofiles/export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExporterKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exporterKey", runtime.ParamLocationQuery, *params.ExporterKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, params.Language); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.QualityProfile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "qualityProfile", runtime.ParamLocationQuery, *params.QualityProfile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualityprofilesExportersRequest generates requests for ApiQualityprofilesExporters
func NewApiQualityprofilesExportersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualityprofiles/exporters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualityprofilesImportersRequest generates requests for ApiQualityprofilesImporters
func NewApiQualityprofilesImportersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualityprofiles/importers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualityprofilesInheritanceRequest generates requests for ApiQualityprofilesInheritance
func NewApiQualityprofilesInheritanceRequest(server string, params *ApiQualityprofilesInheritanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualityprofiles/inheritance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, params.Language); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "qualityProfile", runtime.ParamLocationQuery, params.QualityProfile); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualityprofilesProjectsRequest generates requests for ApiQualityprofilesProjects
func NewApiQualityprofilesProjectsRequest(server string, params *ApiQualityprofilesProjectsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualityprofiles/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.P != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p", runtime.ParamLocationQuery, *params.P); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Selected != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "selected", runtime.ParamLocationQuery, *params.Selected); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualityprofilesRemoveProjectRequest generates requests for ApiQualityprofilesRemoveProject
func NewApiQualityprofilesRemoveProjectRequest(server string, params *ApiQualityprofilesRemoveProjectParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualityprofiles/remove_project")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, params.Language); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "qualityProfile", runtime.ParamLocationQuery, params.QualityProfile); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualityprofilesRenameRequest generates requests for ApiQualityprofilesRename
func NewApiQualityprofilesRenameRequest(server string, params *ApiQualityprofilesRenameParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualityprofiles/rename")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualityprofilesRestoreRequest generates requests for ApiQualityprofilesRestore
func NewApiQualityprofilesRestoreRequest(server string, params *ApiQualityprofilesRestoreParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualityprofiles/restore")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "backup", runtime.ParamLocationQuery, params.Backup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualityprofilesSearchRequest generates requests for ApiQualityprofilesSearch
func NewApiQualityprofilesSearchRequest(server string, params *ApiQualityprofilesSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualityprofiles/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Defaults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "defaults", runtime.ParamLocationQuery, *params.Defaults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Project != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, *params.Project); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QualityProfile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "qualityProfile", runtime.ParamLocationQuery, *params.QualityProfile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiQualityprofilesSetDefaultRequest generates requests for ApiQualityprofilesSetDefault
func NewApiQualityprofilesSetDefaultRequest(server string, params *ApiQualityprofilesSetDefaultParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/qualityprofiles/set_default")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, params.Language); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "qualityProfile", runtime.ParamLocationQuery, params.QualityProfile); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiRulesCreateRequest generates requests for ApiRulesCreate
func NewApiRulesCreateRequest(server string, params *ApiRulesCreateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rules/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customKey", runtime.ParamLocationQuery, params.CustomKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "markdownDescription", runtime.ParamLocationQuery, params.MarkdownDescription); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Params != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "params", runtime.ParamLocationQuery, *params.Params); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreventReactivation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preventReactivation", runtime.ParamLocationQuery, *params.PreventReactivation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Severity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severity", runtime.ParamLocationQuery, *params.Severity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateKey", runtime.ParamLocationQuery, params.TemplateKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiRulesDeleteRequest generates requests for ApiRulesDelete
func NewApiRulesDeleteRequest(server string, params *ApiRulesDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rules/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiRulesRepositoriesRequest generates requests for ApiRulesRepositories
func NewApiRulesRepositoriesRequest(server string, params *ApiRulesRepositoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rules/repositories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiRulesSearchRequest generates requests for ApiRulesSearch
func NewApiRulesSearchRequest(server string, params *ApiRulesSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rules/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Activation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "activation", runtime.ParamLocationQuery, *params.Activation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ActiveSeverities != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active_severities", runtime.ParamLocationQuery, *params.ActiveSeverities); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Asc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asc", runtime.ParamLocationQuery, *params.Asc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AvailableSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "available_since", runtime.ParamLocationQuery, *params.AvailableSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cwe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cwe", runtime.ParamLocationQuery, *params.Cwe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.F != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "f", runtime.ParamLocationQuery, *params.F); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Facets != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "facets", runtime.ParamLocationQuery, *params.Facets); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeExternal != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_external", runtime.ParamLocationQuery, *params.IncludeExternal); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Inheritance != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inheritance", runtime.ParamLocationQuery, *params.Inheritance); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsTemplate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_template", runtime.ParamLocationQuery, *params.IsTemplate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Languages != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "languages", runtime.ParamLocationQuery, *params.Languages); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OwaspTop10 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owaspTop10", runtime.ParamLocationQuery, *params.OwaspTop10); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OwaspTop102021 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owaspTop10-2021", runtime.ParamLocationQuery, *params.OwaspTop102021); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.P != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p", runtime.ParamLocationQuery, *params.P); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Qprofile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "qprofile", runtime.ParamLocationQuery, *params.Qprofile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Repositories != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "repositories", runtime.ParamLocationQuery, *params.Repositories); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RuleKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rule_key", runtime.ParamLocationQuery, *params.RuleKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.S != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "s", runtime.ParamLocationQuery, *params.S); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SansTop25 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sansTop25", runtime.ParamLocationQuery, *params.SansTop25); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Severities != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severities", runtime.ParamLocationQuery, *params.Severities); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SonarsourceSecurity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sonarsourceSecurity", runtime.ParamLocationQuery, *params.SonarsourceSecurity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Statuses != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statuses", runtime.ParamLocationQuery, *params.Statuses); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TemplateKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "template_key", runtime.ParamLocationQuery, *params.TemplateKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Types != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "types", runtime.ParamLocationQuery, *params.Types); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiRulesShowRequest generates requests for ApiRulesShow
func NewApiRulesShowRequest(server string, params *ApiRulesShowParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rules/show")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Actives != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "actives", runtime.ParamLocationQuery, *params.Actives); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiRulesTagsRequest generates requests for ApiRulesTags
func NewApiRulesTagsRequest(server string, params *ApiRulesTagsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rules/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiRulesUpdateRequest generates requests for ApiRulesUpdate
func NewApiRulesUpdateRequest(server string, params *ApiRulesUpdateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rules/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.MarkdownDescription != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "markdown_description", runtime.ParamLocationQuery, *params.MarkdownDescription); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MarkdownNote != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "markdown_note", runtime.ParamLocationQuery, *params.MarkdownNote); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Params != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "params", runtime.ParamLocationQuery, *params.Params); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RemediationFnBaseEffort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remediation_fn_base_effort", runtime.ParamLocationQuery, *params.RemediationFnBaseEffort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RemediationFnType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remediation_fn_type", runtime.ParamLocationQuery, *params.RemediationFnType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RemediationFyGapMultiplier != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remediation_fy_gap_multiplier", runtime.ParamLocationQuery, *params.RemediationFyGapMultiplier); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Severity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severity", runtime.ParamLocationQuery, *params.Severity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiServerVersionRequest generates requests for ApiServerVersion
func NewApiServerVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/server/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSettingsListDefinitionsRequest generates requests for ApiSettingsListDefinitions
func NewApiSettingsListDefinitionsRequest(server string, params *ApiSettingsListDefinitionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/settings/list_definitions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Component != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component", runtime.ParamLocationQuery, *params.Component); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSettingsResetRequest generates requests for ApiSettingsReset
func NewApiSettingsResetRequest(server string, params *ApiSettingsResetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/settings/reset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Component != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component", runtime.ParamLocationQuery, *params.Component); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keys", runtime.ParamLocationQuery, params.Keys); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSettingsSetRequest generates requests for ApiSettingsSet
func NewApiSettingsSetRequest(server string, params *ApiSettingsSetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/settings/set")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Component != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component", runtime.ParamLocationQuery, *params.Component); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldValues != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fieldValues", runtime.ParamLocationQuery, *params.FieldValues); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Value != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, *params.Value); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Values != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "values", runtime.ParamLocationQuery, *params.Values); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSettingsValuesRequest generates requests for ApiSettingsValues
func NewApiSettingsValuesRequest(server string, params *ApiSettingsValuesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/settings/values")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Component != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component", runtime.ParamLocationQuery, *params.Component); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Keys != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keys", runtime.ParamLocationQuery, *params.Keys); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSourcesRawRequest generates requests for ApiSourcesRaw
func NewApiSourcesRawRequest(server string, params *ApiSourcesRawParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sources/raw")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSourcesScmRequest generates requests for ApiSourcesScm
func NewApiSourcesScmRequest(server string, params *ApiSourcesScmParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sources/scm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CommitsByLine != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "commits_by_line", runtime.ParamLocationQuery, *params.CommitsByLine); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSourcesShowRequest generates requests for ApiSourcesShow
func NewApiSourcesShowRequest(server string, params *ApiSourcesShowParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sources/show")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSystemChangeLogLevelRequest generates requests for ApiSystemChangeLogLevel
func NewApiSystemChangeLogLevelRequest(server string, params *ApiSystemChangeLogLevelParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/system/change_log_level")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "level", runtime.ParamLocationQuery, params.Level); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSystemDbMigrationStatusRequest generates requests for ApiSystemDbMigrationStatus
func NewApiSystemDbMigrationStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/system/db_migration_status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSystemHealthRequest generates requests for ApiSystemHealth
func NewApiSystemHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/system/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSystemInfoRequest generates requests for ApiSystemInfo
func NewApiSystemInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/system/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSystemLogsRequest generates requests for ApiSystemLogs
func NewApiSystemLogsRequest(server string, params *ApiSystemLogsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/system/logs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Process != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "process", runtime.ParamLocationQuery, *params.Process); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSystemMigrateDbRequest generates requests for ApiSystemMigrateDb
func NewApiSystemMigrateDbRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/system/migrate_db")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSystemPingRequest generates requests for ApiSystemPing
func NewApiSystemPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/system/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSystemRestartRequest generates requests for ApiSystemRestart
func NewApiSystemRestartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/system/restart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSystemStatusRequest generates requests for ApiSystemStatus
func NewApiSystemStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/system/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSystemUpgradesRequest generates requests for ApiSystemUpgrades
func NewApiSystemUpgradesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/system/upgrades")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUserGroupsAddUserRequest generates requests for ApiUserGroupsAddUser
func NewApiUserGroupsAddUserRequest(server string, params *ApiUserGroupsAddUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user_groups/add_user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Login != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "login", runtime.ParamLocationQuery, *params.Login); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUserGroupsCreateRequest generates requests for ApiUserGroupsCreate
func NewApiUserGroupsCreateRequest(server string, params *ApiUserGroupsCreateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user_groups/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUserGroupsDeleteRequest generates requests for ApiUserGroupsDelete
func NewApiUserGroupsDeleteRequest(server string, params *ApiUserGroupsDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user_groups/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUserGroupsRemoveUserRequest generates requests for ApiUserGroupsRemoveUser
func NewApiUserGroupsRemoveUserRequest(server string, params *ApiUserGroupsRemoveUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user_groups/remove_user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Login != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "login", runtime.ParamLocationQuery, *params.Login); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUserGroupsSearchRequest generates requests for ApiUserGroupsSearch
func NewApiUserGroupsSearchRequest(server string, params *ApiUserGroupsSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user_groups/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.F != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "f", runtime.ParamLocationQuery, *params.F); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.P != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p", runtime.ParamLocationQuery, *params.P); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUserGroupsUpdateRequest generates requests for ApiUserGroupsUpdate
func NewApiUserGroupsUpdateRequest(server string, params *ApiUserGroupsUpdateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user_groups/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CurrentName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "currentName", runtime.ParamLocationQuery, *params.CurrentName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUserGroupsUsersRequest generates requests for ApiUserGroupsUsers
func NewApiUserGroupsUsersRequest(server string, params *ApiUserGroupsUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user_groups/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.P != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p", runtime.ParamLocationQuery, *params.P); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Selected != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "selected", runtime.ParamLocationQuery, *params.Selected); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUserTokensGenerateRequest generates requests for ApiUserTokensGenerate
func NewApiUserTokensGenerateRequest(server string, params *ApiUserTokensGenerateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user_tokens/generate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExpirationDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expirationDate", runtime.ParamLocationQuery, *params.ExpirationDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Login != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "login", runtime.ParamLocationQuery, *params.Login); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ProjectKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectKey", runtime.ParamLocationQuery, *params.ProjectKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUserTokensRevokeRequest generates requests for ApiUserTokensRevoke
func NewApiUserTokensRevokeRequest(server string, params *ApiUserTokensRevokeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user_tokens/revoke")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Login != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "login", runtime.ParamLocationQuery, *params.Login); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUserTokensSearchRequest generates requests for ApiUserTokensSearch
func NewApiUserTokensSearchRequest(server string, params *ApiUserTokensSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user_tokens/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Login != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "login", runtime.ParamLocationQuery, *params.Login); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUsersAnonymizeRequest generates requests for ApiUsersAnonymize
func NewApiUsersAnonymizeRequest(server string, params *ApiUsersAnonymizeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/anonymize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "login", runtime.ParamLocationQuery, params.Login); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUsersChangePasswordRequest generates requests for ApiUsersChangePassword
func NewApiUsersChangePasswordRequest(server string, params *ApiUsersChangePasswordParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/change_password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "login", runtime.ParamLocationQuery, params.Login); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "password", runtime.ParamLocationQuery, params.Password); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PreviousPassword != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "previousPassword", runtime.ParamLocationQuery, *params.PreviousPassword); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUsersCreateRequest generates requests for ApiUsersCreate
func NewApiUsersCreateRequest(server string, params *ApiUsersCreateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Local != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "local", runtime.ParamLocationQuery, *params.Local); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "login", runtime.ParamLocationQuery, params.Login); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Password != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "password", runtime.ParamLocationQuery, *params.Password); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScmAccount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scmAccount", runtime.ParamLocationQuery, *params.ScmAccount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUsersDeactivateRequest generates requests for ApiUsersDeactivate
func NewApiUsersDeactivateRequest(server string, params *ApiUsersDeactivateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/deactivate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Anonymize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "anonymize", runtime.ParamLocationQuery, *params.Anonymize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "login", runtime.ParamLocationQuery, params.Login); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUsersDismissSonarlintAdRequest generates requests for ApiUsersDismissSonarlintAd
func NewApiUsersDismissSonarlintAdRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/dismiss_sonarlint_ad")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUsersGroupsRequest generates requests for ApiUsersGroups
func NewApiUsersGroupsRequest(server string, params *ApiUsersGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "login", runtime.ParamLocationQuery, params.Login); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.P != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p", runtime.ParamLocationQuery, *params.P); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Selected != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "selected", runtime.ParamLocationQuery, *params.Selected); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUsersSearchRequest generates requests for ApiUsersSearch
func NewApiUsersSearchRequest(server string, params *ApiUsersSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Deactivated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deactivated", runtime.ParamLocationQuery, *params.Deactivated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdentity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "externalIdentity", runtime.ParamLocationQuery, *params.ExternalIdentity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.P != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p", runtime.ParamLocationQuery, *params.P); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUsersUpdateRequest generates requests for ApiUsersUpdate
func NewApiUsersUpdateRequest(server string, params *ApiUsersUpdateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "login", runtime.ParamLocationQuery, params.Login); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScmAccount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scmAccount", runtime.ParamLocationQuery, *params.ScmAccount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUsersUpdateIdentityProviderRequest generates requests for ApiUsersUpdateIdentityProvider
func NewApiUsersUpdateIdentityProviderRequest(server string, params *ApiUsersUpdateIdentityProviderParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/update_identity_provider")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "login", runtime.ParamLocationQuery, params.Login); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.NewExternalIdentity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "newExternalIdentity", runtime.ParamLocationQuery, *params.NewExternalIdentity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "newExternalProvider", runtime.ParamLocationQuery, params.NewExternalProvider); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUsersUpdateLoginRequest generates requests for ApiUsersUpdateLogin
func NewApiUsersUpdateLoginRequest(server string, params *ApiUsersUpdateLoginParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/update_login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "login", runtime.ParamLocationQuery, params.Login); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "newLogin", runtime.ParamLocationQuery, params.NewLogin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiWebhooksCreateRequest generates requests for ApiWebhooksCreate
func NewApiWebhooksCreateRequest(server string, params *ApiWebhooksCreateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/webhooks/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Project != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, *params.Project); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiWebhooksDeleteRequest generates requests for ApiWebhooksDelete
func NewApiWebhooksDeleteRequest(server string, params *ApiWebhooksDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/webhooks/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "webhook", runtime.ParamLocationQuery, params.Webhook); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiWebhooksDeliveriesRequest generates requests for ApiWebhooksDeliveries
func NewApiWebhooksDeliveriesRequest(server string, params *ApiWebhooksDeliveriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/webhooks/deliveries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CeTaskId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ceTaskId", runtime.ParamLocationQuery, *params.CeTaskId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ComponentKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "componentKey", runtime.ParamLocationQuery, *params.ComponentKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.P != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p", runtime.ParamLocationQuery, *params.P); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ps", runtime.ParamLocationQuery, *params.Ps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Webhook != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "webhook", runtime.ParamLocationQuery, *params.Webhook); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiWebhooksDeliveryRequest generates requests for ApiWebhooksDelivery
func NewApiWebhooksDeliveryRequest(server string, params *ApiWebhooksDeliveryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/webhooks/delivery")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deliveryId", runtime.ParamLocationQuery, params.DeliveryId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiWebhooksListRequest generates requests for ApiWebhooksList
func NewApiWebhooksListRequest(server string, params *ApiWebhooksListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/webhooks/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Project != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, *params.Project); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiWebhooksUpdateRequest generates requests for ApiWebhooksUpdate
func NewApiWebhooksUpdateRequest(server string, params *ApiWebhooksUpdateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/webhooks/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "webhook", runtime.ParamLocationQuery, params.Webhook); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiWebservicesListRequest generates requests for ApiWebservicesList
func NewApiWebservicesListRequest(server string, params *ApiWebservicesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/webservices/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeInternals != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_internals", runtime.ParamLocationQuery, *params.IncludeInternals); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiWebservicesResponseExampleRequest generates requests for ApiWebservicesResponseExample
func NewApiWebservicesResponseExampleRequest(server string, params *ApiWebservicesResponseExampleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/webservices/response_example")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "action", runtime.ParamLocationQuery, params.Action); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "controller", runtime.ParamLocationQuery, params.Controller); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ApiAlmIntegrationsImportGitlabProjectWithResponse request
	ApiAlmIntegrationsImportGitlabProjectWithResponse(ctx context.Context, params *ApiAlmIntegrationsImportGitlabProjectParams, reqEditors ...RequestEditorFn) (*ApiAlmIntegrationsImportGitlabProjectResponse, error)

	// ApiAlmIntegrationsListAzureProjectsWithResponse request
	ApiAlmIntegrationsListAzureProjectsWithResponse(ctx context.Context, params *ApiAlmIntegrationsListAzureProjectsParams, reqEditors ...RequestEditorFn) (*ApiAlmIntegrationsListAzureProjectsResponse, error)

	// ApiAlmIntegrationsListBitbucketserverProjectsWithResponse request
	ApiAlmIntegrationsListBitbucketserverProjectsWithResponse(ctx context.Context, params *ApiAlmIntegrationsListBitbucketserverProjectsParams, reqEditors ...RequestEditorFn) (*ApiAlmIntegrationsListBitbucketserverProjectsResponse, error)

	// ApiAlmIntegrationsSearchAzureReposWithResponse request
	ApiAlmIntegrationsSearchAzureReposWithResponse(ctx context.Context, params *ApiAlmIntegrationsSearchAzureReposParams, reqEditors ...RequestEditorFn) (*ApiAlmIntegrationsSearchAzureReposResponse, error)

	// ApiAlmIntegrationsSearchBitbucketcloudReposWithResponse request
	ApiAlmIntegrationsSearchBitbucketcloudReposWithResponse(ctx context.Context, params *ApiAlmIntegrationsSearchBitbucketcloudReposParams, reqEditors ...RequestEditorFn) (*ApiAlmIntegrationsSearchBitbucketcloudReposResponse, error)

	// ApiAlmIntegrationsSearchBitbucketserverReposWithResponse request
	ApiAlmIntegrationsSearchBitbucketserverReposWithResponse(ctx context.Context, params *ApiAlmIntegrationsSearchBitbucketserverReposParams, reqEditors ...RequestEditorFn) (*ApiAlmIntegrationsSearchBitbucketserverReposResponse, error)

	// ApiAlmIntegrationsSearchGitlabReposWithResponse request
	ApiAlmIntegrationsSearchGitlabReposWithResponse(ctx context.Context, params *ApiAlmIntegrationsSearchGitlabReposParams, reqEditors ...RequestEditorFn) (*ApiAlmIntegrationsSearchGitlabReposResponse, error)

	// ApiAlmIntegrationsSetPatWithResponse request
	ApiAlmIntegrationsSetPatWithResponse(ctx context.Context, params *ApiAlmIntegrationsSetPatParams, reqEditors ...RequestEditorFn) (*ApiAlmIntegrationsSetPatResponse, error)

	// ApiAlmSettingsCountBindingWithResponse request
	ApiAlmSettingsCountBindingWithResponse(ctx context.Context, params *ApiAlmSettingsCountBindingParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsCountBindingResponse, error)

	// ApiAlmSettingsCreateAzureWithResponse request
	ApiAlmSettingsCreateAzureWithResponse(ctx context.Context, params *ApiAlmSettingsCreateAzureParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsCreateAzureResponse, error)

	// ApiAlmSettingsCreateBitbucketWithResponse request
	ApiAlmSettingsCreateBitbucketWithResponse(ctx context.Context, params *ApiAlmSettingsCreateBitbucketParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsCreateBitbucketResponse, error)

	// ApiAlmSettingsCreateBitbucketcloudWithResponse request
	ApiAlmSettingsCreateBitbucketcloudWithResponse(ctx context.Context, params *ApiAlmSettingsCreateBitbucketcloudParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsCreateBitbucketcloudResponse, error)

	// ApiAlmSettingsCreateGithubWithResponse request
	ApiAlmSettingsCreateGithubWithResponse(ctx context.Context, params *ApiAlmSettingsCreateGithubParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsCreateGithubResponse, error)

	// ApiAlmSettingsCreateGitlabWithResponse request
	ApiAlmSettingsCreateGitlabWithResponse(ctx context.Context, params *ApiAlmSettingsCreateGitlabParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsCreateGitlabResponse, error)

	// ApiAlmSettingsDeleteWithResponse request
	ApiAlmSettingsDeleteWithResponse(ctx context.Context, params *ApiAlmSettingsDeleteParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsDeleteResponse, error)

	// ApiAlmSettingsGetBindingWithResponse request
	ApiAlmSettingsGetBindingWithResponse(ctx context.Context, params *ApiAlmSettingsGetBindingParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsGetBindingResponse, error)

	// ApiAlmSettingsListWithResponse request
	ApiAlmSettingsListWithResponse(ctx context.Context, params *ApiAlmSettingsListParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsListResponse, error)

	// ApiAlmSettingsListDefinitionsWithResponse request
	ApiAlmSettingsListDefinitionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiAlmSettingsListDefinitionsResponse, error)

	// ApiAlmSettingsUpdateAzureWithResponse request
	ApiAlmSettingsUpdateAzureWithResponse(ctx context.Context, params *ApiAlmSettingsUpdateAzureParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsUpdateAzureResponse, error)

	// ApiAlmSettingsUpdateBitbucketWithResponse request
	ApiAlmSettingsUpdateBitbucketWithResponse(ctx context.Context, params *ApiAlmSettingsUpdateBitbucketParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsUpdateBitbucketResponse, error)

	// ApiAlmSettingsUpdateBitbucketcloudWithResponse request
	ApiAlmSettingsUpdateBitbucketcloudWithResponse(ctx context.Context, params *ApiAlmSettingsUpdateBitbucketcloudParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsUpdateBitbucketcloudResponse, error)

	// ApiAlmSettingsUpdateGithubWithResponse request
	ApiAlmSettingsUpdateGithubWithResponse(ctx context.Context, params *ApiAlmSettingsUpdateGithubParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsUpdateGithubResponse, error)

	// ApiAlmSettingsUpdateGitlabWithResponse request
	ApiAlmSettingsUpdateGitlabWithResponse(ctx context.Context, params *ApiAlmSettingsUpdateGitlabParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsUpdateGitlabResponse, error)

	// ApiAlmSettingsValidateWithResponse request
	ApiAlmSettingsValidateWithResponse(ctx context.Context, params *ApiAlmSettingsValidateParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsValidateResponse, error)

	// ApiAnalysisCacheGetWithResponse request
	ApiAnalysisCacheGetWithResponse(ctx context.Context, params *ApiAnalysisCacheGetParams, reqEditors ...RequestEditorFn) (*ApiAnalysisCacheGetResponse, error)

	// ApiAuthenticationLoginWithResponse request
	ApiAuthenticationLoginWithResponse(ctx context.Context, params *ApiAuthenticationLoginParams, reqEditors ...RequestEditorFn) (*ApiAuthenticationLoginResponse, error)

	// ApiAuthenticationLogoutWithResponse request
	ApiAuthenticationLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiAuthenticationLogoutResponse, error)

	// ApiAuthenticationValidateWithResponse request
	ApiAuthenticationValidateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiAuthenticationValidateResponse, error)

	// ApiCeActivityWithResponse request
	ApiCeActivityWithResponse(ctx context.Context, params *ApiCeActivityParams, reqEditors ...RequestEditorFn) (*ApiCeActivityResponse, error)

	// ApiCeActivityStatusWithResponse request
	ApiCeActivityStatusWithResponse(ctx context.Context, params *ApiCeActivityStatusParams, reqEditors ...RequestEditorFn) (*ApiCeActivityStatusResponse, error)

	// ApiCeComponentWithResponse request
	ApiCeComponentWithResponse(ctx context.Context, params *ApiCeComponentParams, reqEditors ...RequestEditorFn) (*ApiCeComponentResponse, error)

	// ApiCeTaskWithResponse request
	ApiCeTaskWithResponse(ctx context.Context, params *ApiCeTaskParams, reqEditors ...RequestEditorFn) (*ApiCeTaskResponse, error)

	// ApiComponentsSearchWithResponse request
	ApiComponentsSearchWithResponse(ctx context.Context, params *ApiComponentsSearchParams, reqEditors ...RequestEditorFn) (*ApiComponentsSearchResponse, error)

	// ApiComponentsShowWithResponse request
	ApiComponentsShowWithResponse(ctx context.Context, params *ApiComponentsShowParams, reqEditors ...RequestEditorFn) (*ApiComponentsShowResponse, error)

	// ApiComponentsTreeWithResponse request
	ApiComponentsTreeWithResponse(ctx context.Context, params *ApiComponentsTreeParams, reqEditors ...RequestEditorFn) (*ApiComponentsTreeResponse, error)

	// ApiDuplicationsShowWithResponse request
	ApiDuplicationsShowWithResponse(ctx context.Context, params *ApiDuplicationsShowParams, reqEditors ...RequestEditorFn) (*ApiDuplicationsShowResponse, error)

	// ApiFavoritesAddWithResponse request
	ApiFavoritesAddWithResponse(ctx context.Context, params *ApiFavoritesAddParams, reqEditors ...RequestEditorFn) (*ApiFavoritesAddResponse, error)

	// ApiFavoritesRemoveWithResponse request
	ApiFavoritesRemoveWithResponse(ctx context.Context, params *ApiFavoritesRemoveParams, reqEditors ...RequestEditorFn) (*ApiFavoritesRemoveResponse, error)

	// ApiFavoritesSearchWithResponse request
	ApiFavoritesSearchWithResponse(ctx context.Context, params *ApiFavoritesSearchParams, reqEditors ...RequestEditorFn) (*ApiFavoritesSearchResponse, error)

	// ApiHotspotsSearchWithResponse request
	ApiHotspotsSearchWithResponse(ctx context.Context, params *ApiHotspotsSearchParams, reqEditors ...RequestEditorFn) (*ApiHotspotsSearchResponse, error)

	// ApiHotspotsShowWithResponse request
	ApiHotspotsShowWithResponse(ctx context.Context, params *ApiHotspotsShowParams, reqEditors ...RequestEditorFn) (*ApiHotspotsShowResponse, error)

	// ApiIssuesAddCommentWithResponse request
	ApiIssuesAddCommentWithResponse(ctx context.Context, params *ApiIssuesAddCommentParams, reqEditors ...RequestEditorFn) (*ApiIssuesAddCommentResponse, error)

	// ApiIssuesAssignWithResponse request
	ApiIssuesAssignWithResponse(ctx context.Context, params *ApiIssuesAssignParams, reqEditors ...RequestEditorFn) (*ApiIssuesAssignResponse, error)

	// ApiIssuesAuthorsWithResponse request
	ApiIssuesAuthorsWithResponse(ctx context.Context, params *ApiIssuesAuthorsParams, reqEditors ...RequestEditorFn) (*ApiIssuesAuthorsResponse, error)

	// ApiIssuesBulkChangeWithResponse request
	ApiIssuesBulkChangeWithResponse(ctx context.Context, params *ApiIssuesBulkChangeParams, reqEditors ...RequestEditorFn) (*ApiIssuesBulkChangeResponse, error)

	// ApiIssuesChangelogWithResponse request
	ApiIssuesChangelogWithResponse(ctx context.Context, params *ApiIssuesChangelogParams, reqEditors ...RequestEditorFn) (*ApiIssuesChangelogResponse, error)

	// ApiIssuesDeleteCommentWithResponse request
	ApiIssuesDeleteCommentWithResponse(ctx context.Context, params *ApiIssuesDeleteCommentParams, reqEditors ...RequestEditorFn) (*ApiIssuesDeleteCommentResponse, error)

	// ApiIssuesDoTransitionWithResponse request
	ApiIssuesDoTransitionWithResponse(ctx context.Context, params *ApiIssuesDoTransitionParams, reqEditors ...RequestEditorFn) (*ApiIssuesDoTransitionResponse, error)

	// ApiIssuesEditCommentWithResponse request
	ApiIssuesEditCommentWithResponse(ctx context.Context, params *ApiIssuesEditCommentParams, reqEditors ...RequestEditorFn) (*ApiIssuesEditCommentResponse, error)

	// ApiIssuesReindexWithResponse request
	ApiIssuesReindexWithResponse(ctx context.Context, params *ApiIssuesReindexParams, reqEditors ...RequestEditorFn) (*ApiIssuesReindexResponse, error)

	// ApiIssuesSearchWithResponse request
	ApiIssuesSearchWithResponse(ctx context.Context, params *ApiIssuesSearchParams, reqEditors ...RequestEditorFn) (*ApiIssuesSearchResponse, error)

	// ApiIssuesSetSeverityWithResponse request
	ApiIssuesSetSeverityWithResponse(ctx context.Context, params *ApiIssuesSetSeverityParams, reqEditors ...RequestEditorFn) (*ApiIssuesSetSeverityResponse, error)

	// ApiIssuesSetTagsWithResponse request
	ApiIssuesSetTagsWithResponse(ctx context.Context, params *ApiIssuesSetTagsParams, reqEditors ...RequestEditorFn) (*ApiIssuesSetTagsResponse, error)

	// ApiIssuesSetTypeWithResponse request
	ApiIssuesSetTypeWithResponse(ctx context.Context, params *ApiIssuesSetTypeParams, reqEditors ...RequestEditorFn) (*ApiIssuesSetTypeResponse, error)

	// ApiIssuesTagsWithResponse request
	ApiIssuesTagsWithResponse(ctx context.Context, params *ApiIssuesTagsParams, reqEditors ...RequestEditorFn) (*ApiIssuesTagsResponse, error)

	// ApiLanguagesListWithResponse request
	ApiLanguagesListWithResponse(ctx context.Context, params *ApiLanguagesListParams, reqEditors ...RequestEditorFn) (*ApiLanguagesListResponse, error)

	// ApiMeasuresComponentWithResponse request
	ApiMeasuresComponentWithResponse(ctx context.Context, params *ApiMeasuresComponentParams, reqEditors ...RequestEditorFn) (*ApiMeasuresComponentResponse, error)

	// ApiMeasuresComponentTreeWithResponse request
	ApiMeasuresComponentTreeWithResponse(ctx context.Context, params *ApiMeasuresComponentTreeParams, reqEditors ...RequestEditorFn) (*ApiMeasuresComponentTreeResponse, error)

	// ApiMeasuresSearchHistoryWithResponse request
	ApiMeasuresSearchHistoryWithResponse(ctx context.Context, params *ApiMeasuresSearchHistoryParams, reqEditors ...RequestEditorFn) (*ApiMeasuresSearchHistoryResponse, error)

	// ApiMetricsSearchWithResponse request
	ApiMetricsSearchWithResponse(ctx context.Context, params *ApiMetricsSearchParams, reqEditors ...RequestEditorFn) (*ApiMetricsSearchResponse, error)

	// ApiMetricsTypesWithResponse request
	ApiMetricsTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiMetricsTypesResponse, error)

	// ApiMonitoringMetricsWithResponse request
	ApiMonitoringMetricsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiMonitoringMetricsResponse, error)

	// ApiNewCodePeriodsListWithResponse request
	ApiNewCodePeriodsListWithResponse(ctx context.Context, params *ApiNewCodePeriodsListParams, reqEditors ...RequestEditorFn) (*ApiNewCodePeriodsListResponse, error)

	// ApiNewCodePeriodsSetWithResponse request
	ApiNewCodePeriodsSetWithResponse(ctx context.Context, params *ApiNewCodePeriodsSetParams, reqEditors ...RequestEditorFn) (*ApiNewCodePeriodsSetResponse, error)

	// ApiNewCodePeriodsShowWithResponse request
	ApiNewCodePeriodsShowWithResponse(ctx context.Context, params *ApiNewCodePeriodsShowParams, reqEditors ...RequestEditorFn) (*ApiNewCodePeriodsShowResponse, error)

	// ApiNewCodePeriodsUnsetWithResponse request
	ApiNewCodePeriodsUnsetWithResponse(ctx context.Context, params *ApiNewCodePeriodsUnsetParams, reqEditors ...RequestEditorFn) (*ApiNewCodePeriodsUnsetResponse, error)

	// ApiNotificationsAddWithResponse request
	ApiNotificationsAddWithResponse(ctx context.Context, params *ApiNotificationsAddParams, reqEditors ...RequestEditorFn) (*ApiNotificationsAddResponse, error)

	// ApiNotificationsListWithResponse request
	ApiNotificationsListWithResponse(ctx context.Context, params *ApiNotificationsListParams, reqEditors ...RequestEditorFn) (*ApiNotificationsListResponse, error)

	// ApiNotificationsRemoveWithResponse request
	ApiNotificationsRemoveWithResponse(ctx context.Context, params *ApiNotificationsRemoveParams, reqEditors ...RequestEditorFn) (*ApiNotificationsRemoveResponse, error)

	// ApiPermissionsAddGroupWithResponse request
	ApiPermissionsAddGroupWithResponse(ctx context.Context, params *ApiPermissionsAddGroupParams, reqEditors ...RequestEditorFn) (*ApiPermissionsAddGroupResponse, error)

	// ApiPermissionsAddGroupToTemplateWithResponse request
	ApiPermissionsAddGroupToTemplateWithResponse(ctx context.Context, params *ApiPermissionsAddGroupToTemplateParams, reqEditors ...RequestEditorFn) (*ApiPermissionsAddGroupToTemplateResponse, error)

	// ApiPermissionsAddProjectCreatorToTemplateWithResponse request
	ApiPermissionsAddProjectCreatorToTemplateWithResponse(ctx context.Context, params *ApiPermissionsAddProjectCreatorToTemplateParams, reqEditors ...RequestEditorFn) (*ApiPermissionsAddProjectCreatorToTemplateResponse, error)

	// ApiPermissionsAddUserWithResponse request
	ApiPermissionsAddUserWithResponse(ctx context.Context, params *ApiPermissionsAddUserParams, reqEditors ...RequestEditorFn) (*ApiPermissionsAddUserResponse, error)

	// ApiPermissionsAddUserToTemplateWithResponse request
	ApiPermissionsAddUserToTemplateWithResponse(ctx context.Context, params *ApiPermissionsAddUserToTemplateParams, reqEditors ...RequestEditorFn) (*ApiPermissionsAddUserToTemplateResponse, error)

	// ApiPermissionsApplyTemplateWithResponse request
	ApiPermissionsApplyTemplateWithResponse(ctx context.Context, params *ApiPermissionsApplyTemplateParams, reqEditors ...RequestEditorFn) (*ApiPermissionsApplyTemplateResponse, error)

	// ApiPermissionsBulkApplyTemplateWithResponse request
	ApiPermissionsBulkApplyTemplateWithResponse(ctx context.Context, params *ApiPermissionsBulkApplyTemplateParams, reqEditors ...RequestEditorFn) (*ApiPermissionsBulkApplyTemplateResponse, error)

	// ApiPermissionsCreateTemplateWithResponse request
	ApiPermissionsCreateTemplateWithResponse(ctx context.Context, params *ApiPermissionsCreateTemplateParams, reqEditors ...RequestEditorFn) (*ApiPermissionsCreateTemplateResponse, error)

	// ApiPermissionsDeleteTemplateWithResponse request
	ApiPermissionsDeleteTemplateWithResponse(ctx context.Context, params *ApiPermissionsDeleteTemplateParams, reqEditors ...RequestEditorFn) (*ApiPermissionsDeleteTemplateResponse, error)

	// ApiPermissionsRemoveGroupWithResponse request
	ApiPermissionsRemoveGroupWithResponse(ctx context.Context, params *ApiPermissionsRemoveGroupParams, reqEditors ...RequestEditorFn) (*ApiPermissionsRemoveGroupResponse, error)

	// ApiPermissionsRemoveGroupFromTemplateWithResponse request
	ApiPermissionsRemoveGroupFromTemplateWithResponse(ctx context.Context, params *ApiPermissionsRemoveGroupFromTemplateParams, reqEditors ...RequestEditorFn) (*ApiPermissionsRemoveGroupFromTemplateResponse, error)

	// ApiPermissionsRemoveProjectCreatorFromTemplateWithResponse request
	ApiPermissionsRemoveProjectCreatorFromTemplateWithResponse(ctx context.Context, params *ApiPermissionsRemoveProjectCreatorFromTemplateParams, reqEditors ...RequestEditorFn) (*ApiPermissionsRemoveProjectCreatorFromTemplateResponse, error)

	// ApiPermissionsRemoveUserWithResponse request
	ApiPermissionsRemoveUserWithResponse(ctx context.Context, params *ApiPermissionsRemoveUserParams, reqEditors ...RequestEditorFn) (*ApiPermissionsRemoveUserResponse, error)

	// ApiPermissionsRemoveUserFromTemplateWithResponse request
	ApiPermissionsRemoveUserFromTemplateWithResponse(ctx context.Context, params *ApiPermissionsRemoveUserFromTemplateParams, reqEditors ...RequestEditorFn) (*ApiPermissionsRemoveUserFromTemplateResponse, error)

	// ApiPermissionsSearchTemplatesWithResponse request
	ApiPermissionsSearchTemplatesWithResponse(ctx context.Context, params *ApiPermissionsSearchTemplatesParams, reqEditors ...RequestEditorFn) (*ApiPermissionsSearchTemplatesResponse, error)

	// ApiPermissionsSetDefaultTemplateWithResponse request
	ApiPermissionsSetDefaultTemplateWithResponse(ctx context.Context, params *ApiPermissionsSetDefaultTemplateParams, reqEditors ...RequestEditorFn) (*ApiPermissionsSetDefaultTemplateResponse, error)

	// ApiPermissionsUpdateTemplateWithResponse request
	ApiPermissionsUpdateTemplateWithResponse(ctx context.Context, params *ApiPermissionsUpdateTemplateParams, reqEditors ...RequestEditorFn) (*ApiPermissionsUpdateTemplateResponse, error)

	// ApiPluginsAvailableWithResponse request
	ApiPluginsAvailableWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiPluginsAvailableResponse, error)

	// ApiPluginsCancelAllWithResponse request
	ApiPluginsCancelAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiPluginsCancelAllResponse, error)

	// ApiPluginsInstallWithResponse request
	ApiPluginsInstallWithResponse(ctx context.Context, params *ApiPluginsInstallParams, reqEditors ...RequestEditorFn) (*ApiPluginsInstallResponse, error)

	// ApiPluginsInstalledWithResponse request
	ApiPluginsInstalledWithResponse(ctx context.Context, params *ApiPluginsInstalledParams, reqEditors ...RequestEditorFn) (*ApiPluginsInstalledResponse, error)

	// ApiPluginsPendingWithResponse request
	ApiPluginsPendingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiPluginsPendingResponse, error)

	// ApiPluginsUninstallWithResponse request
	ApiPluginsUninstallWithResponse(ctx context.Context, params *ApiPluginsUninstallParams, reqEditors ...RequestEditorFn) (*ApiPluginsUninstallResponse, error)

	// ApiPluginsUpdateWithResponse request
	ApiPluginsUpdateWithResponse(ctx context.Context, params *ApiPluginsUpdateParams, reqEditors ...RequestEditorFn) (*ApiPluginsUpdateResponse, error)

	// ApiPluginsUpdatesWithResponse request
	ApiPluginsUpdatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiPluginsUpdatesResponse, error)

	// ApiProjectAnalysesCreateEventWithResponse request
	ApiProjectAnalysesCreateEventWithResponse(ctx context.Context, params *ApiProjectAnalysesCreateEventParams, reqEditors ...RequestEditorFn) (*ApiProjectAnalysesCreateEventResponse, error)

	// ApiProjectAnalysesDeleteWithResponse request
	ApiProjectAnalysesDeleteWithResponse(ctx context.Context, params *ApiProjectAnalysesDeleteParams, reqEditors ...RequestEditorFn) (*ApiProjectAnalysesDeleteResponse, error)

	// ApiProjectAnalysesDeleteEventWithResponse request
	ApiProjectAnalysesDeleteEventWithResponse(ctx context.Context, params *ApiProjectAnalysesDeleteEventParams, reqEditors ...RequestEditorFn) (*ApiProjectAnalysesDeleteEventResponse, error)

	// ApiProjectAnalysesSearchWithResponse request
	ApiProjectAnalysesSearchWithResponse(ctx context.Context, params *ApiProjectAnalysesSearchParams, reqEditors ...RequestEditorFn) (*ApiProjectAnalysesSearchResponse, error)

	// ApiProjectAnalysesSetBaselineWithResponse request
	ApiProjectAnalysesSetBaselineWithResponse(ctx context.Context, params *ApiProjectAnalysesSetBaselineParams, reqEditors ...RequestEditorFn) (*ApiProjectAnalysesSetBaselineResponse, error)

	// ApiProjectAnalysesUnsetBaselineWithResponse request
	ApiProjectAnalysesUnsetBaselineWithResponse(ctx context.Context, params *ApiProjectAnalysesUnsetBaselineParams, reqEditors ...RequestEditorFn) (*ApiProjectAnalysesUnsetBaselineResponse, error)

	// ApiProjectAnalysesUpdateEventWithResponse request
	ApiProjectAnalysesUpdateEventWithResponse(ctx context.Context, params *ApiProjectAnalysesUpdateEventParams, reqEditors ...RequestEditorFn) (*ApiProjectAnalysesUpdateEventResponse, error)

	// ApiProjectBadgesMeasureWithResponse request
	ApiProjectBadgesMeasureWithResponse(ctx context.Context, params *ApiProjectBadgesMeasureParams, reqEditors ...RequestEditorFn) (*ApiProjectBadgesMeasureResponse, error)

	// ApiProjectBadgesQualityGateWithResponse request
	ApiProjectBadgesQualityGateWithResponse(ctx context.Context, params *ApiProjectBadgesQualityGateParams, reqEditors ...RequestEditorFn) (*ApiProjectBadgesQualityGateResponse, error)

	// ApiProjectBadgesRenewTokenWithResponse request
	ApiProjectBadgesRenewTokenWithResponse(ctx context.Context, params *ApiProjectBadgesRenewTokenParams, reqEditors ...RequestEditorFn) (*ApiProjectBadgesRenewTokenResponse, error)

	// ApiProjectBadgesTokenWithResponse request
	ApiProjectBadgesTokenWithResponse(ctx context.Context, params *ApiProjectBadgesTokenParams, reqEditors ...RequestEditorFn) (*ApiProjectBadgesTokenResponse, error)

	// ApiProjectBranchesDeleteWithResponse request
	ApiProjectBranchesDeleteWithResponse(ctx context.Context, params *ApiProjectBranchesDeleteParams, reqEditors ...RequestEditorFn) (*ApiProjectBranchesDeleteResponse, error)

	// ApiProjectBranchesListWithResponse request
	ApiProjectBranchesListWithResponse(ctx context.Context, params *ApiProjectBranchesListParams, reqEditors ...RequestEditorFn) (*ApiProjectBranchesListResponse, error)

	// ApiProjectBranchesRenameWithResponse request
	ApiProjectBranchesRenameWithResponse(ctx context.Context, params *ApiProjectBranchesRenameParams, reqEditors ...RequestEditorFn) (*ApiProjectBranchesRenameResponse, error)

	// ApiProjectBranchesSetAutomaticDeletionProtectionWithResponse request
	ApiProjectBranchesSetAutomaticDeletionProtectionWithResponse(ctx context.Context, params *ApiProjectBranchesSetAutomaticDeletionProtectionParams, reqEditors ...RequestEditorFn) (*ApiProjectBranchesSetAutomaticDeletionProtectionResponse, error)

	// ApiProjectDumpExportWithResponse request
	ApiProjectDumpExportWithResponse(ctx context.Context, params *ApiProjectDumpExportParams, reqEditors ...RequestEditorFn) (*ApiProjectDumpExportResponse, error)

	// ApiProjectLinksCreateWithResponse request
	ApiProjectLinksCreateWithResponse(ctx context.Context, params *ApiProjectLinksCreateParams, reqEditors ...RequestEditorFn) (*ApiProjectLinksCreateResponse, error)

	// ApiProjectLinksDeleteWithResponse request
	ApiProjectLinksDeleteWithResponse(ctx context.Context, params *ApiProjectLinksDeleteParams, reqEditors ...RequestEditorFn) (*ApiProjectLinksDeleteResponse, error)

	// ApiProjectLinksSearchWithResponse request
	ApiProjectLinksSearchWithResponse(ctx context.Context, params *ApiProjectLinksSearchParams, reqEditors ...RequestEditorFn) (*ApiProjectLinksSearchResponse, error)

	// ApiProjectTagsSearchWithResponse request
	ApiProjectTagsSearchWithResponse(ctx context.Context, params *ApiProjectTagsSearchParams, reqEditors ...RequestEditorFn) (*ApiProjectTagsSearchResponse, error)

	// ApiProjectTagsSetWithResponse request
	ApiProjectTagsSetWithResponse(ctx context.Context, params *ApiProjectTagsSetParams, reqEditors ...RequestEditorFn) (*ApiProjectTagsSetResponse, error)

	// ApiProjectsBulkDeleteWithResponse request
	ApiProjectsBulkDeleteWithResponse(ctx context.Context, params *ApiProjectsBulkDeleteParams, reqEditors ...RequestEditorFn) (*ApiProjectsBulkDeleteResponse, error)

	// ApiProjectsCreateWithResponse request
	ApiProjectsCreateWithResponse(ctx context.Context, params *ApiProjectsCreateParams, reqEditors ...RequestEditorFn) (*ApiProjectsCreateResponse, error)

	// ApiProjectsDeleteWithResponse request
	ApiProjectsDeleteWithResponse(ctx context.Context, params *ApiProjectsDeleteParams, reqEditors ...RequestEditorFn) (*ApiProjectsDeleteResponse, error)

	// ApiProjectsSearchWithResponse request
	ApiProjectsSearchWithResponse(ctx context.Context, params *ApiProjectsSearchParams, reqEditors ...RequestEditorFn) (*ApiProjectsSearchResponse, error)

	// ApiProjectsUpdateKeyWithResponse request
	ApiProjectsUpdateKeyWithResponse(ctx context.Context, params *ApiProjectsUpdateKeyParams, reqEditors ...RequestEditorFn) (*ApiProjectsUpdateKeyResponse, error)

	// ApiProjectsUpdateVisibilityWithResponse request
	ApiProjectsUpdateVisibilityWithResponse(ctx context.Context, params *ApiProjectsUpdateVisibilityParams, reqEditors ...RequestEditorFn) (*ApiProjectsUpdateVisibilityResponse, error)

	// ApiQualitygatesCopyWithResponse request
	ApiQualitygatesCopyWithResponse(ctx context.Context, params *ApiQualitygatesCopyParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesCopyResponse, error)

	// ApiQualitygatesCreateWithResponse request
	ApiQualitygatesCreateWithResponse(ctx context.Context, params *ApiQualitygatesCreateParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesCreateResponse, error)

	// ApiQualitygatesCreateConditionWithResponse request
	ApiQualitygatesCreateConditionWithResponse(ctx context.Context, params *ApiQualitygatesCreateConditionParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesCreateConditionResponse, error)

	// ApiQualitygatesDeleteConditionWithResponse request
	ApiQualitygatesDeleteConditionWithResponse(ctx context.Context, params *ApiQualitygatesDeleteConditionParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesDeleteConditionResponse, error)

	// ApiQualitygatesDeselectWithResponse request
	ApiQualitygatesDeselectWithResponse(ctx context.Context, params *ApiQualitygatesDeselectParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesDeselectResponse, error)

	// ApiQualitygatesDestroyWithResponse request
	ApiQualitygatesDestroyWithResponse(ctx context.Context, params *ApiQualitygatesDestroyParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesDestroyResponse, error)

	// ApiQualitygatesGetByProjectWithResponse request
	ApiQualitygatesGetByProjectWithResponse(ctx context.Context, params *ApiQualitygatesGetByProjectParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesGetByProjectResponse, error)

	// ApiQualitygatesListWithResponse request
	ApiQualitygatesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiQualitygatesListResponse, error)

	// ApiQualitygatesProjectStatusWithResponse request
	ApiQualitygatesProjectStatusWithResponse(ctx context.Context, params *ApiQualitygatesProjectStatusParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesProjectStatusResponse, error)

	// ApiQualitygatesRenameWithResponse request
	ApiQualitygatesRenameWithResponse(ctx context.Context, params *ApiQualitygatesRenameParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesRenameResponse, error)

	// ApiQualitygatesSearchWithResponse request
	ApiQualitygatesSearchWithResponse(ctx context.Context, params *ApiQualitygatesSearchParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesSearchResponse, error)

	// ApiQualitygatesSelectWithResponse request
	ApiQualitygatesSelectWithResponse(ctx context.Context, params *ApiQualitygatesSelectParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesSelectResponse, error)

	// ApiQualitygatesSetAsDefaultWithResponse request
	ApiQualitygatesSetAsDefaultWithResponse(ctx context.Context, params *ApiQualitygatesSetAsDefaultParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesSetAsDefaultResponse, error)

	// ApiQualitygatesShowWithResponse request
	ApiQualitygatesShowWithResponse(ctx context.Context, params *ApiQualitygatesShowParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesShowResponse, error)

	// ApiQualitygatesUpdateConditionWithResponse request
	ApiQualitygatesUpdateConditionWithResponse(ctx context.Context, params *ApiQualitygatesUpdateConditionParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesUpdateConditionResponse, error)

	// ApiQualityprofilesActivateRuleWithResponse request
	ApiQualityprofilesActivateRuleWithResponse(ctx context.Context, params *ApiQualityprofilesActivateRuleParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesActivateRuleResponse, error)

	// ApiQualityprofilesActivateRulesWithResponse request
	ApiQualityprofilesActivateRulesWithResponse(ctx context.Context, params *ApiQualityprofilesActivateRulesParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesActivateRulesResponse, error)

	// ApiQualityprofilesAddProjectWithResponse request
	ApiQualityprofilesAddProjectWithResponse(ctx context.Context, params *ApiQualityprofilesAddProjectParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesAddProjectResponse, error)

	// ApiQualityprofilesBackupWithResponse request
	ApiQualityprofilesBackupWithResponse(ctx context.Context, params *ApiQualityprofilesBackupParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesBackupResponse, error)

	// ApiQualityprofilesChangeParentWithResponse request
	ApiQualityprofilesChangeParentWithResponse(ctx context.Context, params *ApiQualityprofilesChangeParentParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesChangeParentResponse, error)

	// ApiQualityprofilesChangelogWithResponse request
	ApiQualityprofilesChangelogWithResponse(ctx context.Context, params *ApiQualityprofilesChangelogParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesChangelogResponse, error)

	// ApiQualityprofilesCopyWithResponse request
	ApiQualityprofilesCopyWithResponse(ctx context.Context, params *ApiQualityprofilesCopyParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesCopyResponse, error)

	// ApiQualityprofilesCreateWithResponse request
	ApiQualityprofilesCreateWithResponse(ctx context.Context, params *ApiQualityprofilesCreateParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesCreateResponse, error)

	// ApiQualityprofilesDeactivateRuleWithResponse request
	ApiQualityprofilesDeactivateRuleWithResponse(ctx context.Context, params *ApiQualityprofilesDeactivateRuleParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesDeactivateRuleResponse, error)

	// ApiQualityprofilesDeactivateRulesWithResponse request
	ApiQualityprofilesDeactivateRulesWithResponse(ctx context.Context, params *ApiQualityprofilesDeactivateRulesParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesDeactivateRulesResponse, error)

	// ApiQualityprofilesDeleteWithResponse request
	ApiQualityprofilesDeleteWithResponse(ctx context.Context, params *ApiQualityprofilesDeleteParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesDeleteResponse, error)

	// ApiQualityprofilesExportWithResponse request
	ApiQualityprofilesExportWithResponse(ctx context.Context, params *ApiQualityprofilesExportParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesExportResponse, error)

	// ApiQualityprofilesExportersWithResponse request
	ApiQualityprofilesExportersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiQualityprofilesExportersResponse, error)

	// ApiQualityprofilesImportersWithResponse request
	ApiQualityprofilesImportersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiQualityprofilesImportersResponse, error)

	// ApiQualityprofilesInheritanceWithResponse request
	ApiQualityprofilesInheritanceWithResponse(ctx context.Context, params *ApiQualityprofilesInheritanceParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesInheritanceResponse, error)

	// ApiQualityprofilesProjectsWithResponse request
	ApiQualityprofilesProjectsWithResponse(ctx context.Context, params *ApiQualityprofilesProjectsParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesProjectsResponse, error)

	// ApiQualityprofilesRemoveProjectWithResponse request
	ApiQualityprofilesRemoveProjectWithResponse(ctx context.Context, params *ApiQualityprofilesRemoveProjectParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesRemoveProjectResponse, error)

	// ApiQualityprofilesRenameWithResponse request
	ApiQualityprofilesRenameWithResponse(ctx context.Context, params *ApiQualityprofilesRenameParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesRenameResponse, error)

	// ApiQualityprofilesRestoreWithResponse request
	ApiQualityprofilesRestoreWithResponse(ctx context.Context, params *ApiQualityprofilesRestoreParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesRestoreResponse, error)

	// ApiQualityprofilesSearchWithResponse request
	ApiQualityprofilesSearchWithResponse(ctx context.Context, params *ApiQualityprofilesSearchParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesSearchResponse, error)

	// ApiQualityprofilesSetDefaultWithResponse request
	ApiQualityprofilesSetDefaultWithResponse(ctx context.Context, params *ApiQualityprofilesSetDefaultParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesSetDefaultResponse, error)

	// ApiRulesCreateWithResponse request
	ApiRulesCreateWithResponse(ctx context.Context, params *ApiRulesCreateParams, reqEditors ...RequestEditorFn) (*ApiRulesCreateResponse, error)

	// ApiRulesDeleteWithResponse request
	ApiRulesDeleteWithResponse(ctx context.Context, params *ApiRulesDeleteParams, reqEditors ...RequestEditorFn) (*ApiRulesDeleteResponse, error)

	// ApiRulesRepositoriesWithResponse request
	ApiRulesRepositoriesWithResponse(ctx context.Context, params *ApiRulesRepositoriesParams, reqEditors ...RequestEditorFn) (*ApiRulesRepositoriesResponse, error)

	// ApiRulesSearchWithResponse request
	ApiRulesSearchWithResponse(ctx context.Context, params *ApiRulesSearchParams, reqEditors ...RequestEditorFn) (*ApiRulesSearchResponse, error)

	// ApiRulesShowWithResponse request
	ApiRulesShowWithResponse(ctx context.Context, params *ApiRulesShowParams, reqEditors ...RequestEditorFn) (*ApiRulesShowResponse, error)

	// ApiRulesTagsWithResponse request
	ApiRulesTagsWithResponse(ctx context.Context, params *ApiRulesTagsParams, reqEditors ...RequestEditorFn) (*ApiRulesTagsResponse, error)

	// ApiRulesUpdateWithResponse request
	ApiRulesUpdateWithResponse(ctx context.Context, params *ApiRulesUpdateParams, reqEditors ...RequestEditorFn) (*ApiRulesUpdateResponse, error)

	// ApiServerVersionWithResponse request
	ApiServerVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiServerVersionResponse, error)

	// ApiSettingsListDefinitionsWithResponse request
	ApiSettingsListDefinitionsWithResponse(ctx context.Context, params *ApiSettingsListDefinitionsParams, reqEditors ...RequestEditorFn) (*ApiSettingsListDefinitionsResponse, error)

	// ApiSettingsResetWithResponse request
	ApiSettingsResetWithResponse(ctx context.Context, params *ApiSettingsResetParams, reqEditors ...RequestEditorFn) (*ApiSettingsResetResponse, error)

	// ApiSettingsSetWithResponse request
	ApiSettingsSetWithResponse(ctx context.Context, params *ApiSettingsSetParams, reqEditors ...RequestEditorFn) (*ApiSettingsSetResponse, error)

	// ApiSettingsValuesWithResponse request
	ApiSettingsValuesWithResponse(ctx context.Context, params *ApiSettingsValuesParams, reqEditors ...RequestEditorFn) (*ApiSettingsValuesResponse, error)

	// ApiSourcesRawWithResponse request
	ApiSourcesRawWithResponse(ctx context.Context, params *ApiSourcesRawParams, reqEditors ...RequestEditorFn) (*ApiSourcesRawResponse, error)

	// ApiSourcesScmWithResponse request
	ApiSourcesScmWithResponse(ctx context.Context, params *ApiSourcesScmParams, reqEditors ...RequestEditorFn) (*ApiSourcesScmResponse, error)

	// ApiSourcesShowWithResponse request
	ApiSourcesShowWithResponse(ctx context.Context, params *ApiSourcesShowParams, reqEditors ...RequestEditorFn) (*ApiSourcesShowResponse, error)

	// ApiSystemChangeLogLevelWithResponse request
	ApiSystemChangeLogLevelWithResponse(ctx context.Context, params *ApiSystemChangeLogLevelParams, reqEditors ...RequestEditorFn) (*ApiSystemChangeLogLevelResponse, error)

	// ApiSystemDbMigrationStatusWithResponse request
	ApiSystemDbMigrationStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiSystemDbMigrationStatusResponse, error)

	// ApiSystemHealthWithResponse request
	ApiSystemHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiSystemHealthResponse, error)

	// ApiSystemInfoWithResponse request
	ApiSystemInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiSystemInfoResponse, error)

	// ApiSystemLogsWithResponse request
	ApiSystemLogsWithResponse(ctx context.Context, params *ApiSystemLogsParams, reqEditors ...RequestEditorFn) (*ApiSystemLogsResponse, error)

	// ApiSystemMigrateDbWithResponse request
	ApiSystemMigrateDbWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiSystemMigrateDbResponse, error)

	// ApiSystemPingWithResponse request
	ApiSystemPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiSystemPingResponse, error)

	// ApiSystemRestartWithResponse request
	ApiSystemRestartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiSystemRestartResponse, error)

	// ApiSystemStatusWithResponse request
	ApiSystemStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiSystemStatusResponse, error)

	// ApiSystemUpgradesWithResponse request
	ApiSystemUpgradesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiSystemUpgradesResponse, error)

	// ApiUserGroupsAddUserWithResponse request
	ApiUserGroupsAddUserWithResponse(ctx context.Context, params *ApiUserGroupsAddUserParams, reqEditors ...RequestEditorFn) (*ApiUserGroupsAddUserResponse, error)

	// ApiUserGroupsCreateWithResponse request
	ApiUserGroupsCreateWithResponse(ctx context.Context, params *ApiUserGroupsCreateParams, reqEditors ...RequestEditorFn) (*ApiUserGroupsCreateResponse, error)

	// ApiUserGroupsDeleteWithResponse request
	ApiUserGroupsDeleteWithResponse(ctx context.Context, params *ApiUserGroupsDeleteParams, reqEditors ...RequestEditorFn) (*ApiUserGroupsDeleteResponse, error)

	// ApiUserGroupsRemoveUserWithResponse request
	ApiUserGroupsRemoveUserWithResponse(ctx context.Context, params *ApiUserGroupsRemoveUserParams, reqEditors ...RequestEditorFn) (*ApiUserGroupsRemoveUserResponse, error)

	// ApiUserGroupsSearchWithResponse request
	ApiUserGroupsSearchWithResponse(ctx context.Context, params *ApiUserGroupsSearchParams, reqEditors ...RequestEditorFn) (*ApiUserGroupsSearchResponse, error)

	// ApiUserGroupsUpdateWithResponse request
	ApiUserGroupsUpdateWithResponse(ctx context.Context, params *ApiUserGroupsUpdateParams, reqEditors ...RequestEditorFn) (*ApiUserGroupsUpdateResponse, error)

	// ApiUserGroupsUsersWithResponse request
	ApiUserGroupsUsersWithResponse(ctx context.Context, params *ApiUserGroupsUsersParams, reqEditors ...RequestEditorFn) (*ApiUserGroupsUsersResponse, error)

	// ApiUserTokensGenerateWithResponse request
	ApiUserTokensGenerateWithResponse(ctx context.Context, params *ApiUserTokensGenerateParams, reqEditors ...RequestEditorFn) (*ApiUserTokensGenerateResponse, error)

	// ApiUserTokensRevokeWithResponse request
	ApiUserTokensRevokeWithResponse(ctx context.Context, params *ApiUserTokensRevokeParams, reqEditors ...RequestEditorFn) (*ApiUserTokensRevokeResponse, error)

	// ApiUserTokensSearchWithResponse request
	ApiUserTokensSearchWithResponse(ctx context.Context, params *ApiUserTokensSearchParams, reqEditors ...RequestEditorFn) (*ApiUserTokensSearchResponse, error)

	// ApiUsersAnonymizeWithResponse request
	ApiUsersAnonymizeWithResponse(ctx context.Context, params *ApiUsersAnonymizeParams, reqEditors ...RequestEditorFn) (*ApiUsersAnonymizeResponse, error)

	// ApiUsersChangePasswordWithResponse request
	ApiUsersChangePasswordWithResponse(ctx context.Context, params *ApiUsersChangePasswordParams, reqEditors ...RequestEditorFn) (*ApiUsersChangePasswordResponse, error)

	// ApiUsersCreateWithResponse request
	ApiUsersCreateWithResponse(ctx context.Context, params *ApiUsersCreateParams, reqEditors ...RequestEditorFn) (*ApiUsersCreateResponse, error)

	// ApiUsersDeactivateWithResponse request
	ApiUsersDeactivateWithResponse(ctx context.Context, params *ApiUsersDeactivateParams, reqEditors ...RequestEditorFn) (*ApiUsersDeactivateResponse, error)

	// ApiUsersDismissSonarlintAdWithResponse request
	ApiUsersDismissSonarlintAdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiUsersDismissSonarlintAdResponse, error)

	// ApiUsersGroupsWithResponse request
	ApiUsersGroupsWithResponse(ctx context.Context, params *ApiUsersGroupsParams, reqEditors ...RequestEditorFn) (*ApiUsersGroupsResponse, error)

	// ApiUsersSearchWithResponse request
	ApiUsersSearchWithResponse(ctx context.Context, params *ApiUsersSearchParams, reqEditors ...RequestEditorFn) (*ApiUsersSearchResponse, error)

	// ApiUsersUpdateWithResponse request
	ApiUsersUpdateWithResponse(ctx context.Context, params *ApiUsersUpdateParams, reqEditors ...RequestEditorFn) (*ApiUsersUpdateResponse, error)

	// ApiUsersUpdateIdentityProviderWithResponse request
	ApiUsersUpdateIdentityProviderWithResponse(ctx context.Context, params *ApiUsersUpdateIdentityProviderParams, reqEditors ...RequestEditorFn) (*ApiUsersUpdateIdentityProviderResponse, error)

	// ApiUsersUpdateLoginWithResponse request
	ApiUsersUpdateLoginWithResponse(ctx context.Context, params *ApiUsersUpdateLoginParams, reqEditors ...RequestEditorFn) (*ApiUsersUpdateLoginResponse, error)

	// ApiWebhooksCreateWithResponse request
	ApiWebhooksCreateWithResponse(ctx context.Context, params *ApiWebhooksCreateParams, reqEditors ...RequestEditorFn) (*ApiWebhooksCreateResponse, error)

	// ApiWebhooksDeleteWithResponse request
	ApiWebhooksDeleteWithResponse(ctx context.Context, params *ApiWebhooksDeleteParams, reqEditors ...RequestEditorFn) (*ApiWebhooksDeleteResponse, error)

	// ApiWebhooksDeliveriesWithResponse request
	ApiWebhooksDeliveriesWithResponse(ctx context.Context, params *ApiWebhooksDeliveriesParams, reqEditors ...RequestEditorFn) (*ApiWebhooksDeliveriesResponse, error)

	// ApiWebhooksDeliveryWithResponse request
	ApiWebhooksDeliveryWithResponse(ctx context.Context, params *ApiWebhooksDeliveryParams, reqEditors ...RequestEditorFn) (*ApiWebhooksDeliveryResponse, error)

	// ApiWebhooksListWithResponse request
	ApiWebhooksListWithResponse(ctx context.Context, params *ApiWebhooksListParams, reqEditors ...RequestEditorFn) (*ApiWebhooksListResponse, error)

	// ApiWebhooksUpdateWithResponse request
	ApiWebhooksUpdateWithResponse(ctx context.Context, params *ApiWebhooksUpdateParams, reqEditors ...RequestEditorFn) (*ApiWebhooksUpdateResponse, error)

	// ApiWebservicesListWithResponse request
	ApiWebservicesListWithResponse(ctx context.Context, params *ApiWebservicesListParams, reqEditors ...RequestEditorFn) (*ApiWebservicesListResponse, error)

	// ApiWebservicesResponseExampleWithResponse request
	ApiWebservicesResponseExampleWithResponse(ctx context.Context, params *ApiWebservicesResponseExampleParams, reqEditors ...RequestEditorFn) (*ApiWebservicesResponseExampleResponse, error)
}

type ApiAlmIntegrationsImportGitlabProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAlmIntegrationsImportGitlabProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAlmIntegrationsImportGitlabProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAlmIntegrationsListAzureProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Projects *[]struct {
			Description *string `json:"description,omitempty"`
			Name        *string `json:"name,omitempty"`
		} `json:"projects,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAlmIntegrationsListAzureProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAlmIntegrationsListAzureProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAlmIntegrationsListBitbucketserverProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Projects *[]struct {
			Key  *string `json:"key,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"projects,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAlmIntegrationsListBitbucketserverProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAlmIntegrationsListBitbucketserverProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAlmIntegrationsSearchAzureReposResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Repositories *[]struct {
			Name        *string `json:"name,omitempty"`
			ProjectName *string `json:"projectName,omitempty"`
		} `json:"repositories,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAlmIntegrationsSearchAzureReposResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAlmIntegrationsSearchAzureReposResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAlmIntegrationsSearchBitbucketcloudReposResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		IsLastPage *bool `json:"isLastPage,omitempty"`
		Paging     *struct {
			PageIndex *int `json:"pageIndex,omitempty"`
			PageSize  *int `json:"pageSize,omitempty"`
		} `json:"paging,omitempty"`
		Repositories *[]struct {
			Name       *string `json:"name,omitempty"`
			ProjectKey *string `json:"projectKey,omitempty"`
			Slug       *string `json:"slug,omitempty"`
			Uuid       *string `json:"uuid,omitempty"`
			Workspace  *string `json:"workspace,omitempty"`
		} `json:"repositories,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAlmIntegrationsSearchBitbucketcloudReposResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAlmIntegrationsSearchBitbucketcloudReposResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAlmIntegrationsSearchBitbucketserverReposResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		IsLastPage   *bool `json:"isLastPage,omitempty"`
		Repositories *[]struct {
			Name       *string `json:"name,omitempty"`
			ProjectKey *string `json:"projectKey,omitempty"`
			Slug       *string `json:"slug,omitempty"`
			Uuid       *string `json:"uuid,omitempty"`
			Workspace  *string `json:"workspace,omitempty"`
		} `json:"repositories,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAlmIntegrationsSearchBitbucketserverReposResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAlmIntegrationsSearchBitbucketserverReposResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAlmIntegrationsSearchGitlabReposResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Paging *struct {
			PageIndex *int `json:"pageIndex,omitempty"`
			PageSize  *int `json:"pageSize,omitempty"`
			Total     *int `json:"total,omitempty"`
		} `json:"paging,omitempty"`
		Repositories *[]struct {
			Id       *int    `json:"id,omitempty"`
			Name     *string `json:"name,omitempty"`
			PathName *string `json:"pathName,omitempty"`
			PathSlug *string `json:"pathSlug,omitempty"`
			Slug     *string `json:"slug,omitempty"`
			Url      *string `json:"url,omitempty"`
		} `json:"repositories,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAlmIntegrationsSearchGitlabReposResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAlmIntegrationsSearchGitlabReposResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAlmIntegrationsSetPatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAlmIntegrationsSetPatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAlmIntegrationsSetPatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAlmSettingsCountBindingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Key      *string `json:"key,omitempty"`
		Projects *int    `json:"projects,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAlmSettingsCountBindingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAlmSettingsCountBindingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAlmSettingsCreateAzureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAlmSettingsCreateAzureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAlmSettingsCreateAzureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAlmSettingsCreateBitbucketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAlmSettingsCreateBitbucketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAlmSettingsCreateBitbucketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAlmSettingsCreateBitbucketcloudResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAlmSettingsCreateBitbucketcloudResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAlmSettingsCreateBitbucketcloudResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAlmSettingsCreateGithubResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAlmSettingsCreateGithubResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAlmSettingsCreateGithubResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAlmSettingsCreateGitlabResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAlmSettingsCreateGitlabResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAlmSettingsCreateGitlabResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAlmSettingsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAlmSettingsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAlmSettingsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAlmSettingsGetBindingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Alm                   *string `json:"alm,omitempty"`
		Key                   *string `json:"key,omitempty"`
		Monorepo              *bool   `json:"monorepo,omitempty"`
		Repository            *string `json:"repository,omitempty"`
		SummaryCommentEnabled *bool   `json:"summaryCommentEnabled,omitempty"`
		Url                   *string `json:"url,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAlmSettingsGetBindingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAlmSettingsGetBindingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAlmSettingsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		AlmSettings *[]struct {
			Alm *string `json:"alm,omitempty"`
			Key *string `json:"key,omitempty"`
			Url *string `json:"url,omitempty"`
		} `json:"almSettings,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAlmSettingsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAlmSettingsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAlmSettingsListDefinitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Azure *[]struct {
			AppId    *string `json:"appId,omitempty"`
			ClientId *string `json:"clientId,omitempty"`
			Key      *string `json:"key,omitempty"`
			Url      *string `json:"url,omitempty"`
		} `json:"azure,omitempty"`
		Bitbucket *[]struct {
			AppId    *string `json:"appId,omitempty"`
			ClientId *string `json:"clientId,omitempty"`
			Key      *string `json:"key,omitempty"`
			Url      *string `json:"url,omitempty"`
		} `json:"bitbucket,omitempty"`
		Bitbucketcloud *[]struct {
			AppId    *string `json:"appId,omitempty"`
			ClientId *string `json:"clientId,omitempty"`
			Key      *string `json:"key,omitempty"`
			Url      *string `json:"url,omitempty"`
		} `json:"bitbucketcloud,omitempty"`
		Github *[]struct {
			AppId    *string `json:"appId,omitempty"`
			ClientId *string `json:"clientId,omitempty"`
			Key      *string `json:"key,omitempty"`
			Url      *string `json:"url,omitempty"`
		} `json:"github,omitempty"`
		Gitlab *[]struct {
			AppId    *string `json:"appId,omitempty"`
			ClientId *string `json:"clientId,omitempty"`
			Key      *string `json:"key,omitempty"`
			Url      *string `json:"url,omitempty"`
		} `json:"gitlab,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAlmSettingsListDefinitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAlmSettingsListDefinitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAlmSettingsUpdateAzureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAlmSettingsUpdateAzureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAlmSettingsUpdateAzureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAlmSettingsUpdateBitbucketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAlmSettingsUpdateBitbucketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAlmSettingsUpdateBitbucketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAlmSettingsUpdateBitbucketcloudResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAlmSettingsUpdateBitbucketcloudResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAlmSettingsUpdateBitbucketcloudResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAlmSettingsUpdateGithubResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAlmSettingsUpdateGithubResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAlmSettingsUpdateGithubResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAlmSettingsUpdateGitlabResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAlmSettingsUpdateGitlabResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAlmSettingsUpdateGitlabResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAlmSettingsValidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAlmSettingsValidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAlmSettingsValidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAnalysisCacheGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAnalysisCacheGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAnalysisCacheGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAuthenticationLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAuthenticationLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAuthenticationLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAuthenticationLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAuthenticationLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAuthenticationLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAuthenticationValidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Valid *bool `json:"valid,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiAuthenticationValidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAuthenticationValidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiCeActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Paging *struct {
			PageIndex *int `json:"pageIndex,omitempty"`
			PageSize  *int `json:"pageSize,omitempty"`
			Total     *int `json:"total,omitempty"`
		} `json:"paging,omitempty"`
		Tasks *[]struct {
			AnalysisId         *string `json:"analysisId,omitempty"`
			ComponentId        *string `json:"componentId,omitempty"`
			ComponentKey       *string `json:"componentKey,omitempty"`
			ComponentName      *string `json:"componentName,omitempty"`
			ComponentQualifier *string `json:"componentQualifier,omitempty"`
			ExecutedAt         *string `json:"executedAt,omitempty"`
			ExecutionTimeMs    *int    `json:"executionTimeMs,omitempty"`
			HasErrorStacktrace *bool   `json:"hasErrorStacktrace,omitempty"`
			HasScannerContext  *bool   `json:"hasScannerContext,omitempty"`
			Id                 *string `json:"id,omitempty"`
			Logs               *bool   `json:"logs,omitempty"`
			Organization       *string `json:"organization,omitempty"`
			StartedAt          *string `json:"startedAt,omitempty"`
			Status             *string `json:"status,omitempty"`
			SubmittedAt        *string `json:"submittedAt,omitempty"`
			SubmitterLogin     *string `json:"submitterLogin,omitempty"`
			Type               *string `json:"type,omitempty"`
		} `json:"tasks,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiCeActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiCeActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiCeActivityStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Failing     *int `json:"failing,omitempty"`
		InProgress  *int `json:"inProgress,omitempty"`
		Pending     *int `json:"pending,omitempty"`
		PendingTime *int `json:"pendingTime,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiCeActivityStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiCeActivityStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiCeComponentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Current *struct {
			AnalysisId         *string `json:"analysisId,omitempty"`
			ComponentId        *string `json:"componentId,omitempty"`
			ComponentKey       *string `json:"componentKey,omitempty"`
			ComponentName      *string `json:"componentName,omitempty"`
			ComponentQualifier *string `json:"componentQualifier,omitempty"`
			ErrorMessage       *string `json:"errorMessage,omitempty"`
			ErrorType          *string `json:"errorType,omitempty"`
			ExecutionTimeMs    *int    `json:"executionTimeMs,omitempty"`
			FinishedAt         *string `json:"finishedAt,omitempty"`
			HasErrorStacktrace *bool   `json:"hasErrorStacktrace,omitempty"`
			HasScannerContext  *bool   `json:"hasScannerContext,omitempty"`
			Id                 *string `json:"id,omitempty"`
			Logs               *bool   `json:"logs,omitempty"`
			Organization       *string `json:"organization,omitempty"`
			StartedAt          *string `json:"startedAt,omitempty"`
			Status             *string `json:"status,omitempty"`
			SubmittedAt        *string `json:"submittedAt,omitempty"`
			Type               *string `json:"type,omitempty"`
		} `json:"current,omitempty"`
		Queue *[]struct {
			ComponentId        *string `json:"componentId,omitempty"`
			ComponentKey       *string `json:"componentKey,omitempty"`
			ComponentName      *string `json:"componentName,omitempty"`
			ComponentQualifier *string `json:"componentQualifier,omitempty"`
			Id                 *string `json:"id,omitempty"`
			Logs               *bool   `json:"logs,omitempty"`
			Organization       *string `json:"organization,omitempty"`
			Status             *string `json:"status,omitempty"`
			SubmittedAt        *string `json:"submittedAt,omitempty"`
			Type               *string `json:"type,omitempty"`
		} `json:"queue,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiCeComponentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiCeComponentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiCeTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Task *struct {
			AnalysisId         *string `json:"analysisId,omitempty"`
			ComponentId        *string `json:"componentId,omitempty"`
			ComponentKey       *string `json:"componentKey,omitempty"`
			ComponentName      *string `json:"componentName,omitempty"`
			ComponentQualifier *string `json:"componentQualifier,omitempty"`
			ErrorMessage       *string `json:"errorMessage,omitempty"`
			ErrorStacktrace    *string `json:"errorStacktrace,omitempty"`
			ExecutedAt         *string `json:"executedAt,omitempty"`
			ExecutionTimeMs    *int    `json:"executionTimeMs,omitempty"`
			HasErrorStacktrace *bool   `json:"hasErrorStacktrace,omitempty"`
			HasScannerContext  *bool   `json:"hasScannerContext,omitempty"`
			Id                 *string `json:"id,omitempty"`
			Logs               *bool   `json:"logs,omitempty"`
			Organization       *string `json:"organization,omitempty"`
			ScannerContext     *string `json:"scannerContext,omitempty"`
			StartedAt          *string `json:"startedAt,omitempty"`
			Status             *string `json:"status,omitempty"`
			SubmittedAt        *string `json:"submittedAt,omitempty"`
			Type               *string `json:"type,omitempty"`
		} `json:"task,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiCeTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiCeTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiComponentsSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Components *[]struct {
			Key       *string `json:"key,omitempty"`
			Name      *string `json:"name,omitempty"`
			Project   *string `json:"project,omitempty"`
			Qualifier *string `json:"qualifier,omitempty"`
		} `json:"components,omitempty"`
		Paging *struct {
			PageIndex *int `json:"pageIndex,omitempty"`
			PageSize  *int `json:"pageSize,omitempty"`
			Total     *int `json:"total,omitempty"`
		} `json:"paging,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiComponentsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiComponentsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiComponentsShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Ancestors *[]struct {
			AnalysisDate *string `json:"analysisDate,omitempty"`
			Key          *string `json:"key,omitempty"`
			Name         *string `json:"name,omitempty"`
			Path         *string `json:"path,omitempty"`
			Qualifier    *string `json:"qualifier,omitempty"`
			Version      *string `json:"version,omitempty"`
		} `json:"ancestors,omitempty"`
		Component *struct {
			AnalysisDate   *string `json:"analysisDate,omitempty"`
			Key            *string `json:"key,omitempty"`
			Language       *string `json:"language,omitempty"`
			LeakPeriodDate *string `json:"leakPeriodDate,omitempty"`
			Name           *string `json:"name,omitempty"`
			Path           *string `json:"path,omitempty"`
			Qualifier      *string `json:"qualifier,omitempty"`
			Version        *string `json:"version,omitempty"`
		} `json:"component,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiComponentsShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiComponentsShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiComponentsTreeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		BaseComponent *struct {
			Description *string   `json:"description,omitempty"`
			Key         *string   `json:"key,omitempty"`
			Qualifier   *string   `json:"qualifier,omitempty"`
			Tags        *[]string `json:"tags,omitempty"`
			Visibility  *string   `json:"visibility,omitempty"`
		} `json:"baseComponent,omitempty"`
		Components *[]struct {
			Key       *string `json:"key,omitempty"`
			Language  *string `json:"language,omitempty"`
			Name      *string `json:"name,omitempty"`
			Path      *string `json:"path,omitempty"`
			Qualifier *string `json:"qualifier,omitempty"`
		} `json:"components,omitempty"`
		Paging *struct {
			PageIndex *int `json:"pageIndex,omitempty"`
			PageSize  *int `json:"pageSize,omitempty"`
			Total     *int `json:"total,omitempty"`
		} `json:"paging,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiComponentsTreeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiComponentsTreeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiDuplicationsShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Duplications *[]struct {
			Blocks *[]struct {
				UnderscoreRef *string `json:"_ref,omitempty"`
				From          *int    `json:"from,omitempty"`
				Size          *int    `json:"size,omitempty"`
			} `json:"blocks,omitempty"`
		} `json:"duplications,omitempty"`
		Files *struct {
			N1 *struct {
				Key         *string `json:"key,omitempty"`
				Name        *string `json:"name,omitempty"`
				ProjectName *string `json:"projectName,omitempty"`
			} `json:"1,omitempty"`
			N2 *struct {
				Key         *string `json:"key,omitempty"`
				Name        *string `json:"name,omitempty"`
				ProjectName *string `json:"projectName,omitempty"`
			} `json:"2,omitempty"`
			N3 *struct {
				Key         *string `json:"key,omitempty"`
				Name        *string `json:"name,omitempty"`
				ProjectName *string `json:"projectName,omitempty"`
			} `json:"3,omitempty"`
		} `json:"files,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiDuplicationsShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiDuplicationsShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiFavoritesAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiFavoritesAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiFavoritesAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiFavoritesRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiFavoritesRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiFavoritesRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiFavoritesSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Favorites *[]struct {
			Key       *string `json:"key,omitempty"`
			Name      *string `json:"name,omitempty"`
			Qualifier *string `json:"qualifier,omitempty"`
		} `json:"favorites,omitempty"`
		Paging *struct {
			PageIndex *int `json:"pageIndex,omitempty"`
			PageSize  *int `json:"pageSize,omitempty"`
			Total     *int `json:"total,omitempty"`
		} `json:"paging,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiFavoritesSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiFavoritesSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiHotspotsSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Components *[]struct {
			Key       *string `json:"key,omitempty"`
			LongName  *string `json:"longName,omitempty"`
			Name      *string `json:"name,omitempty"`
			Path      *string `json:"path,omitempty"`
			Qualifier *string `json:"qualifier,omitempty"`
		} `json:"components,omitempty"`
		Hotspots *[]struct {
			Assignee     *string `json:"assignee,omitempty"`
			Author       *string `json:"author,omitempty"`
			Component    *string `json:"component,omitempty"`
			CreationDate *string `json:"creationDate,omitempty"`
			Flows        *[]struct {
				Locations *[]struct {
					Component      *string   `json:"component,omitempty"`
					Msg            *string   `json:"msg,omitempty"`
					MsgFormattings *[]string `json:"msgFormattings,omitempty"`
					TextRange      *struct {
						EndLine     *int `json:"endLine,omitempty"`
						EndOffset   *int `json:"endOffset,omitempty"`
						StartLine   *int `json:"startLine,omitempty"`
						StartOffset *int `json:"startOffset,omitempty"`
					} `json:"textRange,omitempty"`
				} `json:"locations,omitempty"`
			} `json:"flows,omitempty"`
			Key                      *string   `json:"key,omitempty"`
			Line                     *int      `json:"line,omitempty"`
			Message                  *string   `json:"message,omitempty"`
			MessageFormattings       *[]string `json:"messageFormattings,omitempty"`
			Project                  *string   `json:"project,omitempty"`
			RuleKey                  *string   `json:"ruleKey,omitempty"`
			SecurityCategory         *string   `json:"securityCategory,omitempty"`
			Status                   *string   `json:"status,omitempty"`
			UpdateDate               *string   `json:"updateDate,omitempty"`
			VulnerabilityProbability *string   `json:"vulnerabilityProbability,omitempty"`
		} `json:"hotspots,omitempty"`
		Paging *struct {
			PageIndex *int `json:"pageIndex,omitempty"`
			PageSize  *int `json:"pageSize,omitempty"`
			Total     *int `json:"total,omitempty"`
		} `json:"paging,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiHotspotsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiHotspotsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiHotspotsShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Assignee        *string `json:"assignee,omitempty"`
		Author          *string `json:"author,omitempty"`
		CanChangeStatus *bool   `json:"canChangeStatus,omitempty"`
		Changelog       *[]struct {
			Avatar       *string `json:"avatar,omitempty"`
			CreationDate *string `json:"creationDate,omitempty"`
			Diffs        *[]struct {
				Key      *string `json:"key,omitempty"`
				NewValue *string `json:"newValue,omitempty"`
				OldValue *string `json:"oldValue,omitempty"`
			} `json:"diffs,omitempty"`
			IsUserActive *bool   `json:"isUserActive,omitempty"`
			User         *string `json:"user,omitempty"`
			UserName     *string `json:"userName,omitempty"`
		} `json:"changelog,omitempty"`
		Comment *[]struct {
			CreatedAt *string `json:"createdAt,omitempty"`
			HtmlText  *string `json:"htmlText,omitempty"`
			Key       *string `json:"key,omitempty"`
			Login     *string `json:"login,omitempty"`
			Markdown  *string `json:"markdown,omitempty"`
		} `json:"comment,omitempty"`
		Component *struct {
			Key       *string `json:"key,omitempty"`
			LongName  *string `json:"longName,omitempty"`
			Name      *string `json:"name,omitempty"`
			Path      *string `json:"path,omitempty"`
			Qualifier *string `json:"qualifier,omitempty"`
		} `json:"component,omitempty"`
		CreationDate       *string `json:"creationDate,omitempty"`
		Hash               *string `json:"hash,omitempty"`
		Key                *string `json:"key,omitempty"`
		Line               *int    `json:"line,omitempty"`
		Message            *string `json:"message,omitempty"`
		MessageFormattings *[]struct {
			End   *int    `json:"end,omitempty"`
			Start *int    `json:"start,omitempty"`
			Type  *string `json:"type,omitempty"`
		} `json:"messageFormattings,omitempty"`
		Project *struct {
			Key       *string `json:"key,omitempty"`
			LongName  *string `json:"longName,omitempty"`
			Name      *string `json:"name,omitempty"`
			Qualifier *string `json:"qualifier,omitempty"`
		} `json:"project,omitempty"`
		Rule *struct {
			Key                      *string `json:"key,omitempty"`
			Name                     *string `json:"name,omitempty"`
			SecurityCategory         *string `json:"securityCategory,omitempty"`
			VulnerabilityProbability *string `json:"vulnerabilityProbability,omitempty"`
		} `json:"rule,omitempty"`
		Status     *string `json:"status,omitempty"`
		UpdateDate *string `json:"updateDate,omitempty"`
		Users      *[]struct {
			Active *bool   `json:"active,omitempty"`
			Login  *string `json:"login,omitempty"`
			Name   *string `json:"name,omitempty"`
		} `json:"users,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiHotspotsShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiHotspotsShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiIssuesAddCommentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Components *[]struct {
			Enabled   *bool   `json:"enabled,omitempty"`
			Key       *string `json:"key,omitempty"`
			LongName  *string `json:"longName,omitempty"`
			Name      *string `json:"name,omitempty"`
			Path      *string `json:"path,omitempty"`
			Qualifier *string `json:"qualifier,omitempty"`
			Uuid      *string `json:"uuid,omitempty"`
		} `json:"components,omitempty"`
		Issue *struct {
			Actions  *[]string `json:"actions,omitempty"`
			Assignee *string   `json:"assignee,omitempty"`
			Author   *string   `json:"author,omitempty"`
			Comments *[]struct {
				CreatedAt *string `json:"createdAt,omitempty"`
				HtmlText  *string `json:"htmlText,omitempty"`
				Key       *string `json:"key,omitempty"`
				Login     *string `json:"login,omitempty"`
				Markdown  *string `json:"markdown,omitempty"`
				Updatable *bool   `json:"updatable,omitempty"`
			} `json:"comments,omitempty"`
			Component    *string `json:"component,omitempty"`
			CreationDate *string `json:"creationDate,omitempty"`
			Debt         *string `json:"debt,omitempty"`
			Effort       *string `json:"effort,omitempty"`
			Flows        *[]struct {
				Locations *[]struct {
					Component      *string   `json:"component,omitempty"`
					Msg            *string   `json:"msg,omitempty"`
					MsgFormattings *[]string `json:"msgFormattings,omitempty"`
					TextRange      *struct {
						EndLine     *int `json:"endLine,omitempty"`
						EndOffset   *int `json:"endOffset,omitempty"`
						StartLine   *int `json:"startLine,omitempty"`
						StartOffset *int `json:"startOffset,omitempty"`
					} `json:"textRange,omitempty"`
				} `json:"locations,omitempty"`
			} `json:"flows,omitempty"`
			Key                       *string   `json:"key,omitempty"`
			Line                      *int      `json:"line,omitempty"`
			Message                   *string   `json:"message,omitempty"`
			MsgFormattings            *[]string `json:"msgFormattings,omitempty"`
			Project                   *string   `json:"project,omitempty"`
			QuickFixAvailable         *bool     `json:"quickFixAvailable,omitempty"`
			Rule                      *string   `json:"rule,omitempty"`
			RuleDescriptionContextKey *string   `json:"ruleDescriptionContextKey,omitempty"`
			Scope                     *string   `json:"scope,omitempty"`
			Severity                  *string   `json:"severity,omitempty"`
			Status                    *string   `json:"status,omitempty"`
			Tags                      *[]string `json:"tags,omitempty"`
			TextRange                 *struct {
				EndLine     *int `json:"endLine,omitempty"`
				EndOffset   *int `json:"endOffset,omitempty"`
				StartLine   *int `json:"startLine,omitempty"`
				StartOffset *int `json:"startOffset,omitempty"`
			} `json:"textRange,omitempty"`
			Transitions *[]string `json:"transitions,omitempty"`
			Type        *string   `json:"type,omitempty"`
			UpdateDate  *string   `json:"updateDate,omitempty"`
		} `json:"issue,omitempty"`
		Rules *[]struct {
			Key      *string `json:"key,omitempty"`
			Lang     *string `json:"lang,omitempty"`
			LangName *string `json:"langName,omitempty"`
			Name     *string `json:"name,omitempty"`
			Status   *string `json:"status,omitempty"`
		} `json:"rules,omitempty"`
		Users *[]struct {
			Active *bool   `json:"active,omitempty"`
			Email  *string `json:"email,omitempty"`
			Login  *string `json:"login,omitempty"`
			Name   *string `json:"name,omitempty"`
		} `json:"users,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiIssuesAddCommentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiIssuesAddCommentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiIssuesAssignResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Components *[]struct {
			Enabled   *bool   `json:"enabled,omitempty"`
			Key       *string `json:"key,omitempty"`
			LongName  *string `json:"longName,omitempty"`
			Name      *string `json:"name,omitempty"`
			Path      *string `json:"path,omitempty"`
			Qualifier *string `json:"qualifier,omitempty"`
			Uuid      *string `json:"uuid,omitempty"`
		} `json:"components,omitempty"`
		Issue *struct {
			Actions  *[]string `json:"actions,omitempty"`
			Assignee *string   `json:"assignee,omitempty"`
			Author   *string   `json:"author,omitempty"`
			Comments *[]struct {
				CreatedAt *string `json:"createdAt,omitempty"`
				HtmlText  *string `json:"htmlText,omitempty"`
				Key       *string `json:"key,omitempty"`
				Login     *string `json:"login,omitempty"`
				Markdown  *string `json:"markdown,omitempty"`
				Updatable *bool   `json:"updatable,omitempty"`
			} `json:"comments,omitempty"`
			Component    *string `json:"component,omitempty"`
			CreationDate *string `json:"creationDate,omitempty"`
			Debt         *string `json:"debt,omitempty"`
			Effort       *string `json:"effort,omitempty"`
			Flows        *[]struct {
				Locations *[]struct {
					Component      *string   `json:"component,omitempty"`
					Msg            *string   `json:"msg,omitempty"`
					MsgFormattings *[]string `json:"msgFormattings,omitempty"`
					TextRange      *struct {
						EndLine     *int `json:"endLine,omitempty"`
						EndOffset   *int `json:"endOffset,omitempty"`
						StartLine   *int `json:"startLine,omitempty"`
						StartOffset *int `json:"startOffset,omitempty"`
					} `json:"textRange,omitempty"`
				} `json:"locations,omitempty"`
			} `json:"flows,omitempty"`
			Key                       *string   `json:"key,omitempty"`
			Line                      *int      `json:"line,omitempty"`
			Message                   *string   `json:"message,omitempty"`
			Project                   *string   `json:"project,omitempty"`
			Rule                      *string   `json:"rule,omitempty"`
			RuleDescriptionContextKey *string   `json:"ruleDescriptionContextKey,omitempty"`
			Severity                  *string   `json:"severity,omitempty"`
			Status                    *string   `json:"status,omitempty"`
			Tags                      *[]string `json:"tags,omitempty"`
			TextRange                 *struct {
				EndLine     *int `json:"endLine,omitempty"`
				EndOffset   *int `json:"endOffset,omitempty"`
				StartLine   *int `json:"startLine,omitempty"`
				StartOffset *int `json:"startOffset,omitempty"`
			} `json:"textRange,omitempty"`
			Transitions *[]string `json:"transitions,omitempty"`
			Type        *string   `json:"type,omitempty"`
			UpdateDate  *string   `json:"updateDate,omitempty"`
		} `json:"issue,omitempty"`
		Rules *[]struct {
			Key      *string `json:"key,omitempty"`
			Lang     *string `json:"lang,omitempty"`
			LangName *string `json:"langName,omitempty"`
			Name     *string `json:"name,omitempty"`
			Status   *string `json:"status,omitempty"`
		} `json:"rules,omitempty"`
		Users *[]struct {
			Active *bool   `json:"active,omitempty"`
			Email  *string `json:"email,omitempty"`
			Login  *string `json:"login,omitempty"`
			Name   *string `json:"name,omitempty"`
		} `json:"users,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiIssuesAssignResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiIssuesAssignResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiIssuesAuthorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Authors *[]string `json:"authors,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiIssuesAuthorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiIssuesAuthorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiIssuesBulkChangeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Failures *int `json:"failures,omitempty"`
		Ignored  *int `json:"ignored,omitempty"`
		Success  *int `json:"success,omitempty"`
		Total    *int `json:"total,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiIssuesBulkChangeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiIssuesBulkChangeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiIssuesChangelogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Changelog *[]struct {
			Avatar       *string `json:"avatar,omitempty"`
			CreationDate *string `json:"creationDate,omitempty"`
			Diffs        *[]struct {
				Key      *string `json:"key,omitempty"`
				NewValue *string `json:"newValue,omitempty"`
				OldValue *string `json:"oldValue,omitempty"`
			} `json:"diffs,omitempty"`
			ExternalUser  *string `json:"externalUser,omitempty"`
			IsUserActive  *bool   `json:"isUserActive,omitempty"`
			User          *string `json:"user,omitempty"`
			UserName      *string `json:"userName,omitempty"`
			WebhookSource *string `json:"webhookSource,omitempty"`
		} `json:"changelog,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiIssuesChangelogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiIssuesChangelogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiIssuesDeleteCommentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Components *[]struct {
			Enabled   *bool   `json:"enabled,omitempty"`
			Key       *string `json:"key,omitempty"`
			LongName  *string `json:"longName,omitempty"`
			Name      *string `json:"name,omitempty"`
			Path      *string `json:"path,omitempty"`
			Qualifier *string `json:"qualifier,omitempty"`
			Uuid      *string `json:"uuid,omitempty"`
		} `json:"components,omitempty"`
		Issue *struct {
			Actions  *[]string `json:"actions,omitempty"`
			Assignee *string   `json:"assignee,omitempty"`
			Author   *string   `json:"author,omitempty"`
			Comments *[]struct {
				CreatedAt *string `json:"createdAt,omitempty"`
				HtmlText  *string `json:"htmlText,omitempty"`
				Key       *string `json:"key,omitempty"`
				Login     *string `json:"login,omitempty"`
				Markdown  *string `json:"markdown,omitempty"`
				Updatable *bool   `json:"updatable,omitempty"`
			} `json:"comments,omitempty"`
			Component    *string `json:"component,omitempty"`
			CreationDate *string `json:"creationDate,omitempty"`
			Debt         *string `json:"debt,omitempty"`
			Effort       *string `json:"effort,omitempty"`
			Flows        *[]struct {
				Locations *[]struct {
					Component      *string   `json:"component,omitempty"`
					Msg            *string   `json:"msg,omitempty"`
					MsgFormattings *[]string `json:"msgFormattings,omitempty"`
					TextRange      *struct {
						EndLine     *int `json:"endLine,omitempty"`
						EndOffset   *int `json:"endOffset,omitempty"`
						StartLine   *int `json:"startLine,omitempty"`
						StartOffset *int `json:"startOffset,omitempty"`
					} `json:"textRange,omitempty"`
				} `json:"locations,omitempty"`
			} `json:"flows,omitempty"`
			Key                       *string   `json:"key,omitempty"`
			Line                      *int      `json:"line,omitempty"`
			Message                   *string   `json:"message,omitempty"`
			Project                   *string   `json:"project,omitempty"`
			Rule                      *string   `json:"rule,omitempty"`
			RuleDescriptionContextKey *string   `json:"ruleDescriptionContextKey,omitempty"`
			Severity                  *string   `json:"severity,omitempty"`
			Status                    *string   `json:"status,omitempty"`
			Tags                      *[]string `json:"tags,omitempty"`
			TextRange                 *struct {
				EndLine     *int `json:"endLine,omitempty"`
				EndOffset   *int `json:"endOffset,omitempty"`
				StartLine   *int `json:"startLine,omitempty"`
				StartOffset *int `json:"startOffset,omitempty"`
			} `json:"textRange,omitempty"`
			Transitions *[]string `json:"transitions,omitempty"`
			Type        *string   `json:"type,omitempty"`
			UpdateDate  *string   `json:"updateDate,omitempty"`
		} `json:"issue,omitempty"`
		Rules *[]struct {
			Key      *string `json:"key,omitempty"`
			Lang     *string `json:"lang,omitempty"`
			LangName *string `json:"langName,omitempty"`
			Name     *string `json:"name,omitempty"`
			Status   *string `json:"status,omitempty"`
		} `json:"rules,omitempty"`
		Users *[]struct {
			Active *bool   `json:"active,omitempty"`
			Email  *string `json:"email,omitempty"`
			Login  *string `json:"login,omitempty"`
			Name   *string `json:"name,omitempty"`
		} `json:"users,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiIssuesDeleteCommentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiIssuesDeleteCommentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiIssuesDoTransitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Components *[]struct {
			Enabled   *bool   `json:"enabled,omitempty"`
			Key       *string `json:"key,omitempty"`
			LongName  *string `json:"longName,omitempty"`
			Name      *string `json:"name,omitempty"`
			Path      *string `json:"path,omitempty"`
			Qualifier *string `json:"qualifier,omitempty"`
			Uuid      *string `json:"uuid,omitempty"`
		} `json:"components,omitempty"`
		Issue *struct {
			Actions  *[]string `json:"actions,omitempty"`
			Assignee *string   `json:"assignee,omitempty"`
			Author   *string   `json:"author,omitempty"`
			Comments *[]struct {
				CreatedAt *string `json:"createdAt,omitempty"`
				HtmlText  *string `json:"htmlText,omitempty"`
				Key       *string `json:"key,omitempty"`
				Login     *string `json:"login,omitempty"`
				Markdown  *string `json:"markdown,omitempty"`
				Updatable *bool   `json:"updatable,omitempty"`
			} `json:"comments,omitempty"`
			Component    *string `json:"component,omitempty"`
			CreationDate *string `json:"creationDate,omitempty"`
			Debt         *string `json:"debt,omitempty"`
			Effort       *string `json:"effort,omitempty"`
			Flows        *[]struct {
				Locations *[]struct {
					Component      *string   `json:"component,omitempty"`
					Msg            *string   `json:"msg,omitempty"`
					MsgFormattings *[]string `json:"msgFormattings,omitempty"`
					TextRange      *struct {
						EndLine     *int `json:"endLine,omitempty"`
						EndOffset   *int `json:"endOffset,omitempty"`
						StartLine   *int `json:"startLine,omitempty"`
						StartOffset *int `json:"startOffset,omitempty"`
					} `json:"textRange,omitempty"`
				} `json:"locations,omitempty"`
			} `json:"flows,omitempty"`
			Key                       *string   `json:"key,omitempty"`
			Line                      *int      `json:"line,omitempty"`
			Message                   *string   `json:"message,omitempty"`
			Project                   *string   `json:"project,omitempty"`
			Rule                      *string   `json:"rule,omitempty"`
			RuleDescriptionContextKey *string   `json:"ruleDescriptionContextKey,omitempty"`
			Severity                  *string   `json:"severity,omitempty"`
			Status                    *string   `json:"status,omitempty"`
			Tags                      *[]string `json:"tags,omitempty"`
			TextRange                 *struct {
				EndLine     *int `json:"endLine,omitempty"`
				EndOffset   *int `json:"endOffset,omitempty"`
				StartLine   *int `json:"startLine,omitempty"`
				StartOffset *int `json:"startOffset,omitempty"`
			} `json:"textRange,omitempty"`
			Transitions *[]string `json:"transitions,omitempty"`
			Type        *string   `json:"type,omitempty"`
			UpdateDate  *string   `json:"updateDate,omitempty"`
		} `json:"issue,omitempty"`
		Rules *[]struct {
			Key      *string `json:"key,omitempty"`
			Lang     *string `json:"lang,omitempty"`
			LangName *string `json:"langName,omitempty"`
			Name     *string `json:"name,omitempty"`
			Status   *string `json:"status,omitempty"`
		} `json:"rules,omitempty"`
		Users *[]struct {
			Active *bool   `json:"active,omitempty"`
			Email  *string `json:"email,omitempty"`
			Login  *string `json:"login,omitempty"`
			Name   *string `json:"name,omitempty"`
		} `json:"users,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiIssuesDoTransitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiIssuesDoTransitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiIssuesEditCommentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Components *[]struct {
			Enabled   *bool   `json:"enabled,omitempty"`
			Key       *string `json:"key,omitempty"`
			LongName  *string `json:"longName,omitempty"`
			Name      *string `json:"name,omitempty"`
			Path      *string `json:"path,omitempty"`
			Qualifier *string `json:"qualifier,omitempty"`
			Uuid      *string `json:"uuid,omitempty"`
		} `json:"components,omitempty"`
		Issue *struct {
			Actions  *[]string `json:"actions,omitempty"`
			Assignee *string   `json:"assignee,omitempty"`
			Author   *string   `json:"author,omitempty"`
			Comments *[]struct {
				CreatedAt *string `json:"createdAt,omitempty"`
				HtmlText  *string `json:"htmlText,omitempty"`
				Key       *string `json:"key,omitempty"`
				Login     *string `json:"login,omitempty"`
				Markdown  *string `json:"markdown,omitempty"`
				Updatable *bool   `json:"updatable,omitempty"`
			} `json:"comments,omitempty"`
			Component    *string `json:"component,omitempty"`
			CreationDate *string `json:"creationDate,omitempty"`
			Debt         *string `json:"debt,omitempty"`
			Effort       *string `json:"effort,omitempty"`
			Flows        *[]struct {
				Locations *[]struct {
					Component      *string   `json:"component,omitempty"`
					Msg            *string   `json:"msg,omitempty"`
					MsgFormattings *[]string `json:"msgFormattings,omitempty"`
					TextRange      *struct {
						EndLine     *int `json:"endLine,omitempty"`
						EndOffset   *int `json:"endOffset,omitempty"`
						StartLine   *int `json:"startLine,omitempty"`
						StartOffset *int `json:"startOffset,omitempty"`
					} `json:"textRange,omitempty"`
				} `json:"locations,omitempty"`
			} `json:"flows,omitempty"`
			Key                       *string   `json:"key,omitempty"`
			Line                      *int      `json:"line,omitempty"`
			Message                   *string   `json:"message,omitempty"`
			Project                   *string   `json:"project,omitempty"`
			Rule                      *string   `json:"rule,omitempty"`
			RuleDescriptionContextKey *string   `json:"ruleDescriptionContextKey,omitempty"`
			Severity                  *string   `json:"severity,omitempty"`
			Status                    *string   `json:"status,omitempty"`
			Tags                      *[]string `json:"tags,omitempty"`
			TextRange                 *struct {
				EndLine     *int `json:"endLine,omitempty"`
				EndOffset   *int `json:"endOffset,omitempty"`
				StartLine   *int `json:"startLine,omitempty"`
				StartOffset *int `json:"startOffset,omitempty"`
			} `json:"textRange,omitempty"`
			Transitions *[]string `json:"transitions,omitempty"`
			Type        *string   `json:"type,omitempty"`
			UpdateDate  *string   `json:"updateDate,omitempty"`
		} `json:"issue,omitempty"`
		Rules *[]struct {
			Key      *string `json:"key,omitempty"`
			Lang     *string `json:"lang,omitempty"`
			LangName *string `json:"langName,omitempty"`
			Name     *string `json:"name,omitempty"`
			Status   *string `json:"status,omitempty"`
		} `json:"rules,omitempty"`
		Users *[]struct {
			Active *bool   `json:"active,omitempty"`
			Email  *string `json:"email,omitempty"`
			Login  *string `json:"login,omitempty"`
			Name   *string `json:"name,omitempty"`
		} `json:"users,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiIssuesEditCommentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiIssuesEditCommentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiIssuesReindexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiIssuesReindexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiIssuesReindexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiIssuesSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Components *[]struct {
			Enabled   *bool   `json:"enabled,omitempty"`
			Key       *string `json:"key,omitempty"`
			LongName  *string `json:"longName,omitempty"`
			Name      *string `json:"name,omitempty"`
			Path      *string `json:"path,omitempty"`
			Qualifier *string `json:"qualifier,omitempty"`
		} `json:"components,omitempty"`
		Issues *[]struct {
			Actions *[]string `json:"actions,omitempty"`
			Attr    *struct {
				JiraIssueKey *string `json:"jira-issue-key,omitempty"`
			} `json:"attr,omitempty"`
			Author   *string `json:"author,omitempty"`
			Comments *[]struct {
				CreatedAt *string `json:"createdAt,omitempty"`
				HtmlText  *string `json:"htmlText,omitempty"`
				Key       *string `json:"key,omitempty"`
				Login     *string `json:"login,omitempty"`
				Markdown  *string `json:"markdown,omitempty"`
				Updatable *bool   `json:"updatable,omitempty"`
			} `json:"comments,omitempty"`
			Component    *string `json:"component,omitempty"`
			CreationDate *string `json:"creationDate,omitempty"`
			Effort       *string `json:"effort,omitempty"`
			Flows        *[]struct {
				Locations *[]struct {
					Msg            *string `json:"msg,omitempty"`
					MsgFormattings *[]struct {
						End   *int    `json:"end,omitempty"`
						Start *int    `json:"start,omitempty"`
						Type  *string `json:"type,omitempty"`
					} `json:"msgFormattings,omitempty"`
					TextRange *struct {
						EndLine     *int `json:"endLine,omitempty"`
						EndOffset   *int `json:"endOffset,omitempty"`
						StartLine   *int `json:"startLine,omitempty"`
						StartOffset *int `json:"startOffset,omitempty"`
					} `json:"textRange,omitempty"`
				} `json:"locations,omitempty"`
			} `json:"flows,omitempty"`
			Hash               *string `json:"hash,omitempty"`
			Key                *string `json:"key,omitempty"`
			Line               *int    `json:"line,omitempty"`
			Message            *string `json:"message,omitempty"`
			MessageFormattings *[]struct {
				End   *int    `json:"end,omitempty"`
				Start *int    `json:"start,omitempty"`
				Type  *string `json:"type,omitempty"`
			} `json:"messageFormattings,omitempty"`
			Project                   *string   `json:"project,omitempty"`
			QuickFixAvailable         *bool     `json:"quickFixAvailable,omitempty"`
			Resolution                *string   `json:"resolution,omitempty"`
			Rule                      *string   `json:"rule,omitempty"`
			RuleDescriptionContextKey *string   `json:"ruleDescriptionContextKey,omitempty"`
			Severity                  *string   `json:"severity,omitempty"`
			Status                    *string   `json:"status,omitempty"`
			Tags                      *[]string `json:"tags,omitempty"`
			TextRange                 *struct {
				EndLine     *int `json:"endLine,omitempty"`
				EndOffset   *int `json:"endOffset,omitempty"`
				StartLine   *int `json:"startLine,omitempty"`
				StartOffset *int `json:"startOffset,omitempty"`
			} `json:"textRange,omitempty"`
			Transitions *[]string `json:"transitions,omitempty"`
			Type        *string   `json:"type,omitempty"`
			UpdateDate  *string   `json:"updateDate,omitempty"`
		} `json:"issues,omitempty"`
		Paging *struct {
			PageIndex *int `json:"pageIndex,omitempty"`
			PageSize  *int `json:"pageSize,omitempty"`
			Total     *int `json:"total,omitempty"`
		} `json:"paging,omitempty"`
		Rules *[]struct {
			Key      *string `json:"key,omitempty"`
			Lang     *string `json:"lang,omitempty"`
			LangName *string `json:"langName,omitempty"`
			Name     *string `json:"name,omitempty"`
			Status   *string `json:"status,omitempty"`
		} `json:"rules,omitempty"`
		Users *[]struct {
			Active *bool   `json:"active,omitempty"`
			Avatar *string `json:"avatar,omitempty"`
			Login  *string `json:"login,omitempty"`
			Name   *string `json:"name,omitempty"`
		} `json:"users,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiIssuesSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiIssuesSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiIssuesSetSeverityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Components *[]struct {
			Enabled   *bool   `json:"enabled,omitempty"`
			Key       *string `json:"key,omitempty"`
			LongName  *string `json:"longName,omitempty"`
			Name      *string `json:"name,omitempty"`
			Path      *string `json:"path,omitempty"`
			Qualifier *string `json:"qualifier,omitempty"`
			Uuid      *string `json:"uuid,omitempty"`
		} `json:"components,omitempty"`
		Issue *struct {
			Actions  *[]string `json:"actions,omitempty"`
			Assignee *string   `json:"assignee,omitempty"`
			Author   *string   `json:"author,omitempty"`
			Comments *[]struct {
				CreatedAt *string `json:"createdAt,omitempty"`
				HtmlText  *string `json:"htmlText,omitempty"`
				Key       *string `json:"key,omitempty"`
				Login     *string `json:"login,omitempty"`
				Markdown  *string `json:"markdown,omitempty"`
				Updatable *bool   `json:"updatable,omitempty"`
			} `json:"comments,omitempty"`
			Component    *string `json:"component,omitempty"`
			CreationDate *string `json:"creationDate,omitempty"`
			Debt         *string `json:"debt,omitempty"`
			Effort       *string `json:"effort,omitempty"`
			Flows        *[]struct {
				Locations *[]struct {
					Component      *string   `json:"component,omitempty"`
					Msg            *string   `json:"msg,omitempty"`
					MsgFormattings *[]string `json:"msgFormattings,omitempty"`
					TextRange      *struct {
						EndLine     *int `json:"endLine,omitempty"`
						EndOffset   *int `json:"endOffset,omitempty"`
						StartLine   *int `json:"startLine,omitempty"`
						StartOffset *int `json:"startOffset,omitempty"`
					} `json:"textRange,omitempty"`
				} `json:"locations,omitempty"`
			} `json:"flows,omitempty"`
			Key                       *string   `json:"key,omitempty"`
			Line                      *int      `json:"line,omitempty"`
			Message                   *string   `json:"message,omitempty"`
			Project                   *string   `json:"project,omitempty"`
			Rule                      *string   `json:"rule,omitempty"`
			RuleDescriptionContextKey *string   `json:"ruleDescriptionContextKey,omitempty"`
			Severity                  *string   `json:"severity,omitempty"`
			Status                    *string   `json:"status,omitempty"`
			Tags                      *[]string `json:"tags,omitempty"`
			TextRange                 *struct {
				EndLine     *int `json:"endLine,omitempty"`
				EndOffset   *int `json:"endOffset,omitempty"`
				StartLine   *int `json:"startLine,omitempty"`
				StartOffset *int `json:"startOffset,omitempty"`
			} `json:"textRange,omitempty"`
			Transitions *[]string `json:"transitions,omitempty"`
			Type        *string   `json:"type,omitempty"`
			UpdateDate  *string   `json:"updateDate,omitempty"`
		} `json:"issue,omitempty"`
		Rules *[]struct {
			Key      *string `json:"key,omitempty"`
			Lang     *string `json:"lang,omitempty"`
			LangName *string `json:"langName,omitempty"`
			Name     *string `json:"name,omitempty"`
			Status   *string `json:"status,omitempty"`
		} `json:"rules,omitempty"`
		Users *[]struct {
			Active *bool   `json:"active,omitempty"`
			Email  *string `json:"email,omitempty"`
			Login  *string `json:"login,omitempty"`
			Name   *string `json:"name,omitempty"`
		} `json:"users,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiIssuesSetSeverityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiIssuesSetSeverityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiIssuesSetTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Components *[]struct {
			Enabled      *bool   `json:"enabled,omitempty"`
			Key          *string `json:"key,omitempty"`
			LongName     *string `json:"longName,omitempty"`
			Name         *string `json:"name,omitempty"`
			Path         *string `json:"path,omitempty"`
			ProjectId    *int    `json:"projectId,omitempty"`
			Qualifier    *string `json:"qualifier,omitempty"`
			SubProjectId *int    `json:"subProjectId,omitempty"`
			Uuid         *string `json:"uuid,omitempty"`
		} `json:"components,omitempty"`
		Issue *struct {
			Actions  *[]string `json:"actions,omitempty"`
			Assignee *string   `json:"assignee,omitempty"`
			Author   *string   `json:"author,omitempty"`
			Comments *[]struct {
				CreatedAt *string `json:"createdAt,omitempty"`
				HtmlText  *string `json:"htmlText,omitempty"`
				Key       *string `json:"key,omitempty"`
				Login     *string `json:"login,omitempty"`
				Markdown  *string `json:"markdown,omitempty"`
				Updatable *bool   `json:"updatable,omitempty"`
			} `json:"comments,omitempty"`
			Component    *string `json:"component,omitempty"`
			CreationDate *string `json:"creationDate,omitempty"`
			Debt         *string `json:"debt,omitempty"`
			Effort       *string `json:"effort,omitempty"`
			Flows        *[]struct {
				Locations *[]struct {
					Component      *string   `json:"component,omitempty"`
					Msg            *string   `json:"msg,omitempty"`
					MsgFormattings *[]string `json:"msgFormattings,omitempty"`
					TextRange      *struct {
						EndLine     *int `json:"endLine,omitempty"`
						EndOffset   *int `json:"endOffset,omitempty"`
						StartLine   *int `json:"startLine,omitempty"`
						StartOffset *int `json:"startOffset,omitempty"`
					} `json:"textRange,omitempty"`
				} `json:"locations,omitempty"`
			} `json:"flows,omitempty"`
			Key                       *string   `json:"key,omitempty"`
			Line                      *int      `json:"line,omitempty"`
			Message                   *string   `json:"message,omitempty"`
			Project                   *string   `json:"project,omitempty"`
			Rule                      *string   `json:"rule,omitempty"`
			RuleDescriptionContextKey *string   `json:"ruleDescriptionContextKey,omitempty"`
			Severity                  *string   `json:"severity,omitempty"`
			Status                    *string   `json:"status,omitempty"`
			Tags                      *[]string `json:"tags,omitempty"`
			TextRange                 *struct {
				EndLine     *int `json:"endLine,omitempty"`
				EndOffset   *int `json:"endOffset,omitempty"`
				StartLine   *int `json:"startLine,omitempty"`
				StartOffset *int `json:"startOffset,omitempty"`
			} `json:"textRange,omitempty"`
			Transitions *[]string `json:"transitions,omitempty"`
			Type        *string   `json:"type,omitempty"`
			UpdateDate  *string   `json:"updateDate,omitempty"`
		} `json:"issue,omitempty"`
		Rules *[]struct {
			Key      *string `json:"key,omitempty"`
			Lang     *string `json:"lang,omitempty"`
			LangName *string `json:"langName,omitempty"`
			Name     *string `json:"name,omitempty"`
			Status   *string `json:"status,omitempty"`
		} `json:"rules,omitempty"`
		Users *[]struct {
			Active *bool   `json:"active,omitempty"`
			Email  *string `json:"email,omitempty"`
			Login  *string `json:"login,omitempty"`
			Name   *string `json:"name,omitempty"`
		} `json:"users,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiIssuesSetTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiIssuesSetTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiIssuesSetTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Components *[]struct {
			Enabled   *bool   `json:"enabled,omitempty"`
			Key       *string `json:"key,omitempty"`
			LongName  *string `json:"longName,omitempty"`
			Name      *string `json:"name,omitempty"`
			Path      *string `json:"path,omitempty"`
			Qualifier *string `json:"qualifier,omitempty"`
			Uuid      *string `json:"uuid,omitempty"`
		} `json:"components,omitempty"`
		Issue *struct {
			Actions  *[]string `json:"actions,omitempty"`
			Assignee *string   `json:"assignee,omitempty"`
			Author   *string   `json:"author,omitempty"`
			Comments *[]struct {
				CreatedAt *string `json:"createdAt,omitempty"`
				HtmlText  *string `json:"htmlText,omitempty"`
				Key       *string `json:"key,omitempty"`
				Login     *string `json:"login,omitempty"`
				Markdown  *string `json:"markdown,omitempty"`
				Updatable *bool   `json:"updatable,omitempty"`
			} `json:"comments,omitempty"`
			Component    *string `json:"component,omitempty"`
			CreationDate *string `json:"creationDate,omitempty"`
			Debt         *string `json:"debt,omitempty"`
			Effort       *string `json:"effort,omitempty"`
			Flows        *[]struct {
				Locations *[]struct {
					Component      *string   `json:"component,omitempty"`
					Msg            *string   `json:"msg,omitempty"`
					MsgFormattings *[]string `json:"msgFormattings,omitempty"`
					TextRange      *struct {
						EndLine     *int `json:"endLine,omitempty"`
						EndOffset   *int `json:"endOffset,omitempty"`
						StartLine   *int `json:"startLine,omitempty"`
						StartOffset *int `json:"startOffset,omitempty"`
					} `json:"textRange,omitempty"`
				} `json:"locations,omitempty"`
			} `json:"flows,omitempty"`
			Key                       *string   `json:"key,omitempty"`
			Line                      *int      `json:"line,omitempty"`
			Message                   *string   `json:"message,omitempty"`
			Project                   *string   `json:"project,omitempty"`
			Rule                      *string   `json:"rule,omitempty"`
			RuleDescriptionContextKey *string   `json:"ruleDescriptionContextKey,omitempty"`
			Severity                  *string   `json:"severity,omitempty"`
			Status                    *string   `json:"status,omitempty"`
			Tags                      *[]string `json:"tags,omitempty"`
			TextRange                 *struct {
				EndLine     *int `json:"endLine,omitempty"`
				EndOffset   *int `json:"endOffset,omitempty"`
				StartLine   *int `json:"startLine,omitempty"`
				StartOffset *int `json:"startOffset,omitempty"`
			} `json:"textRange,omitempty"`
			Transitions *[]string `json:"transitions,omitempty"`
			Type        *string   `json:"type,omitempty"`
			UpdateDate  *string   `json:"updateDate,omitempty"`
		} `json:"issue,omitempty"`
		Rules *[]struct {
			Key      *string `json:"key,omitempty"`
			Lang     *string `json:"lang,omitempty"`
			LangName *string `json:"langName,omitempty"`
			Name     *string `json:"name,omitempty"`
			Status   *string `json:"status,omitempty"`
		} `json:"rules,omitempty"`
		Users *[]struct {
			Active *bool   `json:"active,omitempty"`
			Email  *string `json:"email,omitempty"`
			Login  *string `json:"login,omitempty"`
			Name   *string `json:"name,omitempty"`
		} `json:"users,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiIssuesSetTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiIssuesSetTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiIssuesTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Tags *[]string `json:"tags,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiIssuesTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiIssuesTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiLanguagesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Languages *[]struct {
			Key  *string `json:"key,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"languages,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiLanguagesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiLanguagesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiMeasuresComponentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Component *struct {
			Key      *string `json:"key,omitempty"`
			Language *string `json:"language,omitempty"`
			Measures *[]struct {
				Metric *string `json:"metric,omitempty"`
				Value  *string `json:"value,omitempty"`
			} `json:"measures,omitempty"`
			Name      *string `json:"name,omitempty"`
			Path      *string `json:"path,omitempty"`
			Qualifier *string `json:"qualifier,omitempty"`
		} `json:"component,omitempty"`
		Metrics *[]struct {
			Description           *string `json:"description,omitempty"`
			Domain                *string `json:"domain,omitempty"`
			Hidden                *bool   `json:"hidden,omitempty"`
			HigherValuesAreBetter *bool   `json:"higherValuesAreBetter,omitempty"`
			Key                   *string `json:"key,omitempty"`
			Name                  *string `json:"name,omitempty"`
			Qualitative           *bool   `json:"qualitative,omitempty"`
			Type                  *string `json:"type,omitempty"`
		} `json:"metrics,omitempty"`
		Period *struct {
			Date      *string `json:"date,omitempty"`
			Mode      *string `json:"mode,omitempty"`
			Parameter *string `json:"parameter,omitempty"`
		} `json:"period,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiMeasuresComponentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiMeasuresComponentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiMeasuresComponentTreeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		BaseComponent *struct {
			Key      *string `json:"key,omitempty"`
			Measures *[]struct {
				Metric *string `json:"metric,omitempty"`
				Period *struct {
					Value *string `json:"value,omitempty"`
				} `json:"period,omitempty"`
			} `json:"measures,omitempty"`
			Name      *string `json:"name,omitempty"`
			Qualifier *string `json:"qualifier,omitempty"`
		} `json:"baseComponent,omitempty"`
		Components *[]struct {
			Key      *string `json:"key,omitempty"`
			Language *string `json:"language,omitempty"`
			Measures *[]struct {
				Metric *string `json:"metric,omitempty"`
				Period *struct {
					Value *string `json:"value,omitempty"`
				} `json:"period,omitempty"`
			} `json:"measures,omitempty"`
			Name      *string `json:"name,omitempty"`
			Path      *string `json:"path,omitempty"`
			Qualifier *string `json:"qualifier,omitempty"`
		} `json:"components,omitempty"`
		Metrics *[]struct {
			Description           *string `json:"description,omitempty"`
			Domain                *string `json:"domain,omitempty"`
			Hidden                *bool   `json:"hidden,omitempty"`
			HigherValuesAreBetter *bool   `json:"higherValuesAreBetter,omitempty"`
			Key                   *string `json:"key,omitempty"`
			Name                  *string `json:"name,omitempty"`
			Qualitative           *bool   `json:"qualitative,omitempty"`
			Type                  *string `json:"type,omitempty"`
		} `json:"metrics,omitempty"`
		Paging *struct {
			PageIndex *int `json:"pageIndex,omitempty"`
			PageSize  *int `json:"pageSize,omitempty"`
			Total     *int `json:"total,omitempty"`
		} `json:"paging,omitempty"`
		Period *struct {
			Date      *string `json:"date,omitempty"`
			Mode      *string `json:"mode,omitempty"`
			Parameter *string `json:"parameter,omitempty"`
		} `json:"period,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiMeasuresComponentTreeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiMeasuresComponentTreeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiMeasuresSearchHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Measures *[]struct {
			History *[]struct {
				Date  *string `json:"date,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"history,omitempty"`
			Metric *string `json:"metric,omitempty"`
		} `json:"measures,omitempty"`
		Paging *struct {
			PageIndex *int `json:"pageIndex,omitempty"`
			PageSize  *int `json:"pageSize,omitempty"`
			Total     *int `json:"total,omitempty"`
		} `json:"paging,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiMeasuresSearchHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiMeasuresSearchHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiMetricsSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Metrics *[]struct {
			Custom      *bool   `json:"custom,omitempty"`
			Description *string `json:"description,omitempty"`
			Direction   *int    `json:"direction,omitempty"`
			Domain      *string `json:"domain,omitempty"`
			Hidden      *bool   `json:"hidden,omitempty"`
			Id          *string `json:"id,omitempty"`
			Key         *string `json:"key,omitempty"`
			Name        *string `json:"name,omitempty"`
			Qualitative *bool   `json:"qualitative,omitempty"`
			Type        *string `json:"type,omitempty"`
		} `json:"metrics,omitempty"`
		Paging *struct {
			PageIndex *int `json:"pageIndex,omitempty"`
			PageSize  *int `json:"pageSize,omitempty"`
			Total     *int `json:"total,omitempty"`
		} `json:"paging,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiMetricsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiMetricsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiMetricsTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Types *[]string `json:"types,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiMetricsTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiMetricsTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiMonitoringMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiMonitoringMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiMonitoringMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiNewCodePeriodsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		NewCodePeriods *[]struct {
			BranchKey      *string `json:"branchKey,omitempty"`
			EffectiveValue *string `json:"effectiveValue,omitempty"`
			ProjectKey     *string `json:"projectKey,omitempty"`
			Type           *string `json:"type,omitempty"`
			Value          *string `json:"value,omitempty"`
		} `json:"newCodePeriods,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiNewCodePeriodsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiNewCodePeriodsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiNewCodePeriodsSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiNewCodePeriodsSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiNewCodePeriodsSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiNewCodePeriodsShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		BranchKey  *string `json:"branchKey,omitempty"`
		Inherited  *bool   `json:"inherited,omitempty"`
		ProjectKey *string `json:"projectKey,omitempty"`
		Type       *string `json:"type,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiNewCodePeriodsShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiNewCodePeriodsShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiNewCodePeriodsUnsetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiNewCodePeriodsUnsetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiNewCodePeriodsUnsetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiNotificationsAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiNotificationsAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiNotificationsAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiNotificationsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Channels      *[]string `json:"channels,omitempty"`
		GlobalTypes   *[]string `json:"globalTypes,omitempty"`
		Notifications *[]struct {
			Channel *string `json:"channel,omitempty"`
			Type    *string `json:"type,omitempty"`
		} `json:"notifications,omitempty"`
		PerProjectTypes *[]string `json:"perProjectTypes,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiNotificationsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiNotificationsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiNotificationsRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiNotificationsRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiNotificationsRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPermissionsAddGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPermissionsAddGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPermissionsAddGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPermissionsAddGroupToTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPermissionsAddGroupToTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPermissionsAddGroupToTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPermissionsAddProjectCreatorToTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPermissionsAddProjectCreatorToTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPermissionsAddProjectCreatorToTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPermissionsAddUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPermissionsAddUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPermissionsAddUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPermissionsAddUserToTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPermissionsAddUserToTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPermissionsAddUserToTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPermissionsApplyTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPermissionsApplyTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPermissionsApplyTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPermissionsBulkApplyTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPermissionsBulkApplyTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPermissionsBulkApplyTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPermissionsCreateTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		PermissionTemplate *struct {
			Description       *string `json:"description,omitempty"`
			Name              *string `json:"name,omitempty"`
			ProjectKeyPattern *string `json:"projectKeyPattern,omitempty"`
		} `json:"permissionTemplate,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPermissionsCreateTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPermissionsCreateTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPermissionsDeleteTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPermissionsDeleteTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPermissionsDeleteTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPermissionsRemoveGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPermissionsRemoveGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPermissionsRemoveGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPermissionsRemoveGroupFromTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPermissionsRemoveGroupFromTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPermissionsRemoveGroupFromTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPermissionsRemoveProjectCreatorFromTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPermissionsRemoveProjectCreatorFromTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPermissionsRemoveProjectCreatorFromTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPermissionsRemoveUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPermissionsRemoveUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPermissionsRemoveUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPermissionsRemoveUserFromTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPermissionsRemoveUserFromTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPermissionsRemoveUserFromTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPermissionsSearchTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		DefaultTemplates *[]struct {
			Qualifier  *string `json:"qualifier,omitempty"`
			TemplateId *string `json:"templateId,omitempty"`
		} `json:"defaultTemplates,omitempty"`
		PermissionTemplates *[]struct {
			CreatedAt   *string `json:"createdAt,omitempty"`
			Description *string `json:"description,omitempty"`
			Id          *string `json:"id,omitempty"`
			Name        *string `json:"name,omitempty"`
			Permissions *[]struct {
				GroupsCount        *int    `json:"groupsCount,omitempty"`
				Key                *string `json:"key,omitempty"`
				UsersCount         *int    `json:"usersCount,omitempty"`
				WithProjectCreator *bool   `json:"withProjectCreator,omitempty"`
			} `json:"permissions,omitempty"`
			UpdatedAt *string `json:"updatedAt,omitempty"`
		} `json:"permissionTemplates,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPermissionsSearchTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPermissionsSearchTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPermissionsSetDefaultTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPermissionsSetDefaultTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPermissionsSetDefaultTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPermissionsUpdateTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		PermissionTemplate *struct {
			CreatedAt         *string `json:"createdAt,omitempty"`
			Description       *string `json:"description,omitempty"`
			Id                *string `json:"id,omitempty"`
			Name              *string `json:"name,omitempty"`
			ProjectKeyPattern *string `json:"projectKeyPattern,omitempty"`
			UpdatedAt         *string `json:"updatedAt,omitempty"`
		} `json:"permissionTemplate,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPermissionsUpdateTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPermissionsUpdateTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPluginsAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Plugins *[]struct {
			Category         *string `json:"category,omitempty"`
			Description      *string `json:"description,omitempty"`
			EditionBundled   *bool   `json:"editionBundled,omitempty"`
			Key              *string `json:"key,omitempty"`
			License          *string `json:"license,omitempty"`
			Name             *string `json:"name,omitempty"`
			OrganizationName *string `json:"organizationName,omitempty"`
			OrganizationUrl  *string `json:"organizationUrl,omitempty"`
			Release          *struct {
				Date    *string `json:"date,omitempty"`
				Version *string `json:"version,omitempty"`
			} `json:"release,omitempty"`
			TermsAndConditionsUrl *string `json:"termsAndConditionsUrl,omitempty"`
			Update                *struct {
				Requires *[]struct {
					Description *string `json:"description,omitempty"`
					Key         *string `json:"key,omitempty"`
					Namme       *string `json:"namme,omitempty"`
				} `json:"requires,omitempty"`
				Status *string `json:"status,omitempty"`
			} `json:"update,omitempty"`
		} `json:"plugins,omitempty"`
		UpdateCenterRefresh *string `json:"updateCenterRefresh,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPluginsAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPluginsAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPluginsCancelAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPluginsCancelAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPluginsCancelAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPluginsInstallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPluginsInstallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPluginsInstallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPluginsInstalledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Plugins *[]struct {
			Description         *string `json:"description,omitempty"`
			DocumentationPath   *string `json:"documentationPath,omitempty"`
			EditionBundled      *bool   `json:"editionBundled,omitempty"`
			Filename            *string `json:"filename,omitempty"`
			Hash                *string `json:"hash,omitempty"`
			HomepageUrl         *string `json:"homepageUrl,omitempty"`
			ImplementationBuild *string `json:"implementationBuild,omitempty"`
			IssueTrackerUrl     *string `json:"issueTrackerUrl,omitempty"`
			Key                 *string `json:"key,omitempty"`
			License             *string `json:"license,omitempty"`
			Name                *string `json:"name,omitempty"`
			OrganizationName    *string `json:"organizationName,omitempty"`
			OrganizationUrl     *string `json:"organizationUrl,omitempty"`
			SonarLintSupported  *bool   `json:"sonarLintSupported,omitempty"`
			UpdatedAt           *int    `json:"updatedAt,omitempty"`
			Version             *string `json:"version,omitempty"`
		} `json:"plugins,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPluginsInstalledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPluginsInstalledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPluginsPendingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Installing *[]struct {
			Category            *string `json:"category,omitempty"`
			Description         *string `json:"description,omitempty"`
			DocumentationPath   *string `json:"documentationPath,omitempty"`
			HomepageUrl         *string `json:"homepageUrl,omitempty"`
			ImplementationBuild *string `json:"implementationBuild,omitempty"`
			IssueTrackerUrl     *string `json:"issueTrackerUrl,omitempty"`
			Key                 *string `json:"key,omitempty"`
			License             *string `json:"license,omitempty"`
			Name                *string `json:"name,omitempty"`
			OrganizationName    *string `json:"organizationName,omitempty"`
			OrganizationUrl     *string `json:"organizationUrl,omitempty"`
			Version             *string `json:"version,omitempty"`
		} `json:"installing,omitempty"`
		Removing *[]struct {
			Category            *string `json:"category,omitempty"`
			Description         *string `json:"description,omitempty"`
			DocumentationPath   *string `json:"documentationPath,omitempty"`
			HomepageUrl         *string `json:"homepageUrl,omitempty"`
			ImplementationBuild *string `json:"implementationBuild,omitempty"`
			IssueTrackerUrl     *string `json:"issueTrackerUrl,omitempty"`
			Key                 *string `json:"key,omitempty"`
			License             *string `json:"license,omitempty"`
			Name                *string `json:"name,omitempty"`
			OrganizationName    *string `json:"organizationName,omitempty"`
			OrganizationUrl     *string `json:"organizationUrl,omitempty"`
			Version             *string `json:"version,omitempty"`
		} `json:"removing,omitempty"`
		Updating *[]struct {
			Category            *string `json:"category,omitempty"`
			Description         *string `json:"description,omitempty"`
			HomepageUrl         *string `json:"homepageUrl,omitempty"`
			ImplementationBuild *string `json:"implementationBuild,omitempty"`
			IssueTrackerUrl     *string `json:"issueTrackerUrl,omitempty"`
			Key                 *string `json:"key,omitempty"`
			License             *string `json:"license,omitempty"`
			Name                *string `json:"name,omitempty"`
			OrganizationName    *string `json:"organizationName,omitempty"`
			OrganizationUrl     *string `json:"organizationUrl,omitempty"`
			Version             *string `json:"version,omitempty"`
		} `json:"updating,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPluginsPendingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPluginsPendingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPluginsUninstallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPluginsUninstallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPluginsUninstallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPluginsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPluginsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPluginsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPluginsUpdatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Plugins *[]struct {
			Category              *string `json:"category,omitempty"`
			Description           *string `json:"description,omitempty"`
			EditionBundled        *bool   `json:"editionBundled,omitempty"`
			Key                   *string `json:"key,omitempty"`
			License               *string `json:"license,omitempty"`
			Name                  *string `json:"name,omitempty"`
			OrganizationName      *string `json:"organizationName,omitempty"`
			OrganizationUrl       *string `json:"organizationUrl,omitempty"`
			TermsAndConditionsUrl *string `json:"termsAndConditionsUrl,omitempty"`
			Updates               *[]struct {
				Release *struct {
					ChangeLogUrl *string `json:"changeLogUrl,omitempty"`
					Date         *string `json:"date,omitempty"`
					Description  *string `json:"description,omitempty"`
					Version      *string `json:"version,omitempty"`
				} `json:"release,omitempty"`
				Requires *[]struct {
					Description *string `json:"description,omitempty"`
					Key         *string `json:"key,omitempty"`
					Namme       *string `json:"namme,omitempty"`
				} `json:"requires,omitempty"`
				Status *string `json:"status,omitempty"`
			} `json:"updates,omitempty"`
		} `json:"plugins,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiPluginsUpdatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPluginsUpdatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectAnalysesCreateEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Event *struct {
			Analysis *string `json:"analysis,omitempty"`
			Category *string `json:"category,omitempty"`
			Key      *string `json:"key,omitempty"`
			Name     *string `json:"name,omitempty"`
		} `json:"event,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectAnalysesCreateEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectAnalysesCreateEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectAnalysesDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectAnalysesDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectAnalysesDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectAnalysesDeleteEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectAnalysesDeleteEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectAnalysesDeleteEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectAnalysesSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Analyses *[]struct {
			BuildString *string `json:"buildString,omitempty"`
			Date        *string `json:"date,omitempty"`
			Events      *[]struct {
				Category *string `json:"category,omitempty"`
				Key      *string `json:"key,omitempty"`
				Name     *string `json:"name,omitempty"`
			} `json:"events,omitempty"`
			Key                         *string `json:"key,omitempty"`
			ManualNewCodePeriodBaseline *bool   `json:"manualNewCodePeriodBaseline,omitempty"`
			ProjectVersion              *string `json:"projectVersion,omitempty"`
			Revision                    *string `json:"revision,omitempty"`
		} `json:"analyses,omitempty"`
		Paging *struct {
			PageIndex *int `json:"pageIndex,omitempty"`
			PageSize  *int `json:"pageSize,omitempty"`
			Total     *int `json:"total,omitempty"`
		} `json:"paging,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectAnalysesSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectAnalysesSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectAnalysesSetBaselineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectAnalysesSetBaselineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectAnalysesSetBaselineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectAnalysesUnsetBaselineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectAnalysesUnsetBaselineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectAnalysesUnsetBaselineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectAnalysesUpdateEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Event *struct {
			Analysis *string `json:"analysis,omitempty"`
			Category *string `json:"category,omitempty"`
			Key      *string `json:"key,omitempty"`
			Name     *string `json:"name,omitempty"`
		} `json:"event,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectAnalysesUpdateEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectAnalysesUpdateEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectBadgesMeasureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectBadgesMeasureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectBadgesMeasureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectBadgesQualityGateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectBadgesQualityGateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectBadgesQualityGateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectBadgesRenewTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectBadgesRenewTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectBadgesRenewTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectBadgesTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Token *string `json:"token,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectBadgesTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectBadgesTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectBranchesDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectBranchesDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectBranchesDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectBranchesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Branches *[]struct {
			AnalysisDate      *string `json:"analysisDate,omitempty"`
			ExcludedFromPurge *bool   `json:"excludedFromPurge,omitempty"`
			IsMain            *bool   `json:"isMain,omitempty"`
			Name              *string `json:"name,omitempty"`
			Status            *struct {
				QualityGateStatus *string `json:"qualityGateStatus,omitempty"`
			} `json:"status,omitempty"`
			Type *string `json:"type,omitempty"`
		} `json:"branches,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectBranchesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectBranchesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectBranchesRenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectBranchesRenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectBranchesRenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectBranchesSetAutomaticDeletionProtectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectBranchesSetAutomaticDeletionProtectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectBranchesSetAutomaticDeletionProtectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectDumpExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		ProjectId   *string `json:"projectId,omitempty"`
		ProjectKey  *string `json:"projectKey,omitempty"`
		ProjectName *string `json:"projectName,omitempty"`
		TaskId      *string `json:"taskId,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectDumpExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectDumpExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectLinksCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Link *struct {
			Id   *string `json:"id,omitempty"`
			Name *string `json:"name,omitempty"`
			Url  *string `json:"url,omitempty"`
		} `json:"link,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectLinksCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectLinksCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectLinksDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectLinksDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectLinksDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectLinksSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Links *[]struct {
			Id   *string `json:"id,omitempty"`
			Name *string `json:"name,omitempty"`
			Type *string `json:"type,omitempty"`
			Url  *string `json:"url,omitempty"`
		} `json:"links,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectLinksSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectLinksSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectTagsSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Tags *[]string `json:"tags,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectTagsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectTagsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectTagsSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectTagsSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectTagsSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectsBulkDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectsBulkDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectsBulkDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Project *struct {
			Key       *string `json:"key,omitempty"`
			Name      *string `json:"name,omitempty"`
			Qualifier *string `json:"qualifier,omitempty"`
		} `json:"project,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectsSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Components *[]struct {
			Key              *string `json:"key,omitempty"`
			LastAnalysisDate *string `json:"lastAnalysisDate,omitempty"`
			Name             *string `json:"name,omitempty"`
			Qualifier        *string `json:"qualifier,omitempty"`
			Revision         *string `json:"revision,omitempty"`
			Visibility       *string `json:"visibility,omitempty"`
		} `json:"components,omitempty"`
		Paging *struct {
			PageIndex *int `json:"pageIndex,omitempty"`
			PageSize  *int `json:"pageSize,omitempty"`
			Total     *int `json:"total,omitempty"`
		} `json:"paging,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectsUpdateKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectsUpdateKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectsUpdateKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiProjectsUpdateVisibilityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiProjectsUpdateVisibilityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiProjectsUpdateVisibilityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualitygatesCopyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualitygatesCopyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualitygatesCopyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualitygatesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualitygatesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualitygatesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualitygatesCreateConditionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Error   *string `json:"error,omitempty"`
		Id      *string `json:"id,omitempty"`
		Metric  *string `json:"metric,omitempty"`
		Op      *string `json:"op,omitempty"`
		Warning *string `json:"warning,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualitygatesCreateConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualitygatesCreateConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualitygatesDeleteConditionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualitygatesDeleteConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualitygatesDeleteConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualitygatesDeselectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualitygatesDeselectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualitygatesDeselectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualitygatesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualitygatesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualitygatesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualitygatesGetByProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		QualityGate *struct {
			Default *bool   `json:"default,omitempty"`
			Id      *string `json:"id,omitempty"`
			Name    *string `json:"name,omitempty"`
		} `json:"qualityGate,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualitygatesGetByProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualitygatesGetByProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualitygatesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Actions *struct {
			Create *bool `json:"create,omitempty"`
		} `json:"actions,omitempty"`
		Default      *string `json:"default,omitempty"`
		Qualitygates *[]struct {
			Actions *struct {
				AssociateProjects *bool `json:"associateProjects,omitempty"`
				Copy              *bool `json:"copy,omitempty"`
				Delegate          *bool `json:"delegate,omitempty"`
				Delete            *bool `json:"delete,omitempty"`
				ManageConditions  *bool `json:"manageConditions,omitempty"`
				Rename            *bool `json:"rename,omitempty"`
				SetAsDefault      *bool `json:"setAsDefault,omitempty"`
			} `json:"actions,omitempty"`
			CaycStatus *string `json:"caycStatus,omitempty"`
			Id         *string `json:"id,omitempty"`
			IsBuiltIn  *bool   `json:"isBuiltIn,omitempty"`
			IsDefault  *bool   `json:"isDefault,omitempty"`
			Name       *string `json:"name,omitempty"`
		} `json:"qualitygates,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualitygatesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualitygatesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualitygatesProjectStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		ProjectStatus *struct {
			CaycStatus *string `json:"caycStatus,omitempty"`
			Conditions *[]struct {
				ActualValue    *string `json:"actualValue,omitempty"`
				Comparator     *string `json:"comparator,omitempty"`
				ErrorThreshold *string `json:"errorThreshold,omitempty"`
				MetricKey      *string `json:"metricKey,omitempty"`
				PeriodIndex    *int    `json:"periodIndex,omitempty"`
				Status         *string `json:"status,omitempty"`
			} `json:"conditions,omitempty"`
			IgnoredConditions *bool `json:"ignoredConditions,omitempty"`
			Period            *struct {
				Date      *string `json:"date,omitempty"`
				Mode      *string `json:"mode,omitempty"`
				Parameter *string `json:"parameter,omitempty"`
			} `json:"period,omitempty"`
			Periods *[]struct {
				Date      *string `json:"date,omitempty"`
				Index     *int    `json:"index,omitempty"`
				Mode      *string `json:"mode,omitempty"`
				Parameter *string `json:"parameter,omitempty"`
			} `json:"periods,omitempty"`
			Status *string `json:"status,omitempty"`
		} `json:"projectStatus,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualitygatesProjectStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualitygatesProjectStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualitygatesRenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualitygatesRenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualitygatesRenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualitygatesSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Paging *struct {
			PageIndex *int `json:"pageIndex,omitempty"`
			PageSize  *int `json:"pageSize,omitempty"`
			Total     *int `json:"total,omitempty"`
		} `json:"paging,omitempty"`
		Results *[]struct {
			Key      *string `json:"key,omitempty"`
			Name     *string `json:"name,omitempty"`
			Selected *bool   `json:"selected,omitempty"`
		} `json:"results,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualitygatesSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualitygatesSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualitygatesSelectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualitygatesSelectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualitygatesSelectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualitygatesSetAsDefaultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualitygatesSetAsDefaultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualitygatesSetAsDefaultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualitygatesShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Actions *struct {
			AssociateProjects *bool `json:"associateProjects,omitempty"`
			Copy              *bool `json:"copy,omitempty"`
			Delegate          *bool `json:"delegate,omitempty"`
			Delete            *bool `json:"delete,omitempty"`
			ManageConditions  *bool `json:"manageConditions,omitempty"`
			Rename            *bool `json:"rename,omitempty"`
			SetAsDefault      *bool `json:"setAsDefault,omitempty"`
		} `json:"actions,omitempty"`
		CaycStatus *string `json:"caycStatus,omitempty"`
		Conditions *[]struct {
			Error  *string `json:"error,omitempty"`
			Id     *string `json:"id,omitempty"`
			Metric *string `json:"metric,omitempty"`
			Op     *string `json:"op,omitempty"`
		} `json:"conditions,omitempty"`
		Id        *string `json:"id,omitempty"`
		IsBuiltIn *bool   `json:"isBuiltIn,omitempty"`
		Name      *string `json:"name,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualitygatesShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualitygatesShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualitygatesUpdateConditionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualitygatesUpdateConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualitygatesUpdateConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualityprofilesActivateRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualityprofilesActivateRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualityprofilesActivateRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualityprofilesActivateRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualityprofilesActivateRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualityprofilesActivateRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualityprofilesAddProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualityprofilesAddProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualityprofilesAddProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualityprofilesBackupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	XML2XX       *string
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualityprofilesBackupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualityprofilesBackupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualityprofilesChangeParentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualityprofilesChangeParentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualityprofilesChangeParentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualityprofilesChangelogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Events *[]struct {
			Action      *string `json:"action,omitempty"`
			AuthorLogin *string `json:"authorLogin,omitempty"`
			AuthorName  *string `json:"authorName,omitempty"`
			Date        *string `json:"date,omitempty"`
			Params      *struct {
				Severity *string `json:"severity,omitempty"`
			} `json:"params,omitempty"`
			RuleKey  *string `json:"ruleKey,omitempty"`
			RuleName *string `json:"ruleName,omitempty"`
		} `json:"events,omitempty"`
		Paging *struct {
			PageIndex *int `json:"pageIndex,omitempty"`
			PageSize  *int `json:"pageSize,omitempty"`
			Total     *int `json:"total,omitempty"`
		} `json:"paging,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualityprofilesChangelogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualityprofilesChangelogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualityprofilesCopyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		IsDefault   *bool   `json:"isDefault,omitempty"`
		IsInherited *bool   `json:"isInherited,omitempty"`
		Key         *string `json:"key,omitempty"`
		Language    *string `json:"language,omitempty"`
		Name        *string `json:"name,omitempty"`
		ParentKey   *string `json:"parentKey,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualityprofilesCopyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualityprofilesCopyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualityprofilesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Profile *struct {
			IsDefault    *bool   `json:"isDefault,omitempty"`
			IsInherited  *bool   `json:"isInherited,omitempty"`
			Key          *string `json:"key,omitempty"`
			Language     *string `json:"language,omitempty"`
			LanguageName *string `json:"languageName,omitempty"`
			Name         *string `json:"name,omitempty"`
		} `json:"profile,omitempty"`
		Warnings *[]string `json:"warnings,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualityprofilesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualityprofilesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualityprofilesDeactivateRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualityprofilesDeactivateRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualityprofilesDeactivateRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualityprofilesDeactivateRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualityprofilesDeactivateRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualityprofilesDeactivateRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualityprofilesDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualityprofilesDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualityprofilesDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualityprofilesExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	XML2XX       *string
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualityprofilesExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualityprofilesExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualityprofilesExportersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Exporters *[]struct {
			Key       *string   `json:"key,omitempty"`
			Languages *[]string `json:"languages,omitempty"`
			Name      *string   `json:"name,omitempty"`
		} `json:"exporters,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualityprofilesExportersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualityprofilesExportersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualityprofilesImportersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Importers *[]struct {
			Key       *string   `json:"key,omitempty"`
			Languages *[]string `json:"languages,omitempty"`
			Name      *string   `json:"name,omitempty"`
		} `json:"importers,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualityprofilesImportersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualityprofilesImportersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualityprofilesInheritanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Ancestors *[]struct {
			ActiveRuleCount *int    `json:"activeRuleCount,omitempty"`
			IsBuiltIn       *bool   `json:"isBuiltIn,omitempty"`
			Key             *string `json:"key,omitempty"`
			Name            *string `json:"name,omitempty"`
			Parent          *string `json:"parent,omitempty"`
		} `json:"ancestors,omitempty"`
		Children *[]struct {
			ActiveRuleCount *int    `json:"activeRuleCount,omitempty"`
			IsBuiltIn       *bool   `json:"isBuiltIn,omitempty"`
			Key             *string `json:"key,omitempty"`
			Name            *string `json:"name,omitempty"`
		} `json:"children,omitempty"`
		Profile *struct {
			ActiveRuleCount     *int    `json:"activeRuleCount,omitempty"`
			IsBuiltIn           *bool   `json:"isBuiltIn,omitempty"`
			Key                 *string `json:"key,omitempty"`
			Name                *string `json:"name,omitempty"`
			OverridingRuleCount *int    `json:"overridingRuleCount,omitempty"`
			Parent              *string `json:"parent,omitempty"`
		} `json:"profile,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualityprofilesInheritanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualityprofilesInheritanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualityprofilesProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Paging *struct {
			PageIndex *int `json:"pageIndex,omitempty"`
			PageSize  *int `json:"pageSize,omitempty"`
			Total     *int `json:"total,omitempty"`
		} `json:"paging,omitempty"`
		Results *[]struct {
			Id       *string `json:"id,omitempty"`
			Key      *string `json:"key,omitempty"`
			Name     *string `json:"name,omitempty"`
			Selected *bool   `json:"selected,omitempty"`
		} `json:"results,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualityprofilesProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualityprofilesProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualityprofilesRemoveProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualityprofilesRemoveProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualityprofilesRemoveProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualityprofilesRenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualityprofilesRenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualityprofilesRenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualityprofilesRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualityprofilesRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualityprofilesRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualityprofilesSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Actions *struct {
			Create *bool `json:"create,omitempty"`
		} `json:"actions,omitempty"`
		Profiles *[]struct {
			Actions *struct {
				AssociateProjects *bool `json:"associateProjects,omitempty"`
				Copy              *bool `json:"copy,omitempty"`
				Delete            *bool `json:"delete,omitempty"`
				Edit              *bool `json:"edit,omitempty"`
				SetAsDefault      *bool `json:"setAsDefault,omitempty"`
			} `json:"actions,omitempty"`
			ActiveDeprecatedRuleCount *int    `json:"activeDeprecatedRuleCount,omitempty"`
			ActiveRuleCount           *int    `json:"activeRuleCount,omitempty"`
			IsBuiltIn                 *bool   `json:"isBuiltIn,omitempty"`
			IsDefault                 *bool   `json:"isDefault,omitempty"`
			IsInherited               *bool   `json:"isInherited,omitempty"`
			Key                       *string `json:"key,omitempty"`
			Language                  *string `json:"language,omitempty"`
			LanguageName              *string `json:"languageName,omitempty"`
			LastUsed                  *string `json:"lastUsed,omitempty"`
			Name                      *string `json:"name,omitempty"`
			RuleUpdatedAt             *string `json:"ruleUpdatedAt,omitempty"`
		} `json:"profiles,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualityprofilesSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualityprofilesSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiQualityprofilesSetDefaultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiQualityprofilesSetDefaultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiQualityprofilesSetDefaultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiRulesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Rule *struct {
			CreatedAt  *string `json:"createdAt,omitempty"`
			HtmlDesc   *string `json:"htmlDesc,omitempty"`
			IsExternal *bool   `json:"isExternal,omitempty"`
			IsTemplate *bool   `json:"isTemplate,omitempty"`
			Key        *string `json:"key,omitempty"`
			Lang       *string `json:"lang,omitempty"`
			LangName   *string `json:"langName,omitempty"`
			MdDesc     *string `json:"mdDesc,omitempty"`
			Name       *string `json:"name,omitempty"`
			Params     *[]struct {
				DefaultValue *string `json:"defaultValue,omitempty"`
				HtmlDesc     *string `json:"htmlDesc,omitempty"`
				Key          *string `json:"key,omitempty"`
				Type         *string `json:"type,omitempty"`
			} `json:"params,omitempty"`
			Repo        *string   `json:"repo,omitempty"`
			Scope       *string   `json:"scope,omitempty"`
			Severity    *string   `json:"severity,omitempty"`
			Status      *string   `json:"status,omitempty"`
			SysTags     *[]string `json:"sysTags,omitempty"`
			TemplateKey *string   `json:"templateKey,omitempty"`
			Type        *string   `json:"type,omitempty"`
		} `json:"rule,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiRulesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiRulesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiRulesDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiRulesDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiRulesDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiRulesRepositoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Repositories *[]struct {
			Key      *string `json:"key,omitempty"`
			Language *string `json:"language,omitempty"`
			Name     *string `json:"name,omitempty"`
		} `json:"repositories,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiRulesRepositoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiRulesRepositoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiRulesSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Actives *struct {
			SquidClassCyclomaticComplexity *[]struct {
				Inherit *string `json:"inherit,omitempty"`
				Params  *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"params,omitempty"`
				QProfile *string `json:"qProfile,omitempty"`
				Severity *string `json:"severity,omitempty"`
			} `json:"squid:ClassCyclomaticComplexity,omitempty"`
			SquidMethodCyclomaticComplexity *[]struct {
				Inherit *string `json:"inherit,omitempty"`
				Params  *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"params,omitempty"`
				QProfile *string `json:"qProfile,omitempty"`
				Severity *string `json:"severity,omitempty"`
			} `json:"squid:MethodCyclomaticComplexity,omitempty"`
			SquidS1067 *[]struct {
				Inherit *string `json:"inherit,omitempty"`
				Params  *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"params,omitempty"`
				QProfile *string `json:"qProfile,omitempty"`
				Severity *string `json:"severity,omitempty"`
			} `json:"squid:S1067,omitempty"`
		} `json:"actives,omitempty"`
		Facets *[]struct {
			Name   *string `json:"name,omitempty"`
			Values *[]struct {
				Count *int    `json:"count,omitempty"`
				Val   *string `json:"val,omitempty"`
			} `json:"values,omitempty"`
		} `json:"facets,omitempty"`
		Paging *struct {
			PageIndex *int `json:"pageIndex,omitempty"`
			PageSize  *int `json:"pageSize,omitempty"`
			Total     *int `json:"total,omitempty"`
		} `json:"paging,omitempty"`
		Rules *[]struct {
			CreatedAt           *string `json:"createdAt,omitempty"`
			DescriptionSections *[]struct {
				Content *string `json:"content,omitempty"`
				Key     *string `json:"key,omitempty"`
			} `json:"descriptionSections,omitempty"`
			HtmlDesc    *string `json:"htmlDesc,omitempty"`
			InternalKey *string `json:"internalKey,omitempty"`
			IsExternal  *bool   `json:"isExternal,omitempty"`
			IsTemplate  *bool   `json:"isTemplate,omitempty"`
			Key         *string `json:"key,omitempty"`
			Lang        *string `json:"lang,omitempty"`
			LangName    *string `json:"langName,omitempty"`
			Name        *string `json:"name,omitempty"`
			Params      *[]struct {
				DefaultValue *string `json:"defaultValue,omitempty"`
				Desc         *string `json:"desc,omitempty"`
				Key          *string `json:"key,omitempty"`
			} `json:"params,omitempty"`
			Repo      *string   `json:"repo,omitempty"`
			Scope     *string   `json:"scope,omitempty"`
			Severity  *string   `json:"severity,omitempty"`
			Status    *string   `json:"status,omitempty"`
			SysTags   *[]string `json:"sysTags,omitempty"`
			Tags      *[]string `json:"tags,omitempty"`
			Type      *string   `json:"type,omitempty"`
			UpdatedAt *string   `json:"updatedAt,omitempty"`
		} `json:"rules,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiRulesSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiRulesSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiRulesShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Actives *[]struct {
			Inherit *string `json:"inherit,omitempty"`
			Params  *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"params,omitempty"`
			QProfile *string `json:"qProfile,omitempty"`
			Severity *string `json:"severity,omitempty"`
		} `json:"actives,omitempty"`
		Rule *struct {
			DefaultRemFnBaseEffort    *string `json:"defaultRemFnBaseEffort,omitempty"`
			DefaultRemFnGapMultiplier *string `json:"defaultRemFnGapMultiplier,omitempty"`
			DefaultRemFnType          *string `json:"defaultRemFnType,omitempty"`
			DescriptionSections       *[]struct {
				Content *string `json:"content,omitempty"`
				Key     *string `json:"key,omitempty"`
			} `json:"descriptionSections,omitempty"`
			GapDescription *string `json:"gapDescription,omitempty"`
			HtmlDesc       *string `json:"htmlDesc,omitempty"`
			InternalKey    *string `json:"internalKey,omitempty"`
			IsExternal     *bool   `json:"isExternal,omitempty"`
			Key            *string `json:"key,omitempty"`
			Lang           *string `json:"lang,omitempty"`
			LangName       *string `json:"langName,omitempty"`
			Name           *string `json:"name,omitempty"`
			Params         *[]struct {
				DefaultValue *string `json:"defaultValue,omitempty"`
				Desc         *string `json:"desc,omitempty"`
				Key          *string `json:"key,omitempty"`
			} `json:"params,omitempty"`
			RemFnBaseEffort    *string   `json:"remFnBaseEffort,omitempty"`
			RemFnGapMultiplier *string   `json:"remFnGapMultiplier,omitempty"`
			RemFnOverloaded    *bool     `json:"remFnOverloaded,omitempty"`
			RemFnType          *string   `json:"remFnType,omitempty"`
			Repo               *string   `json:"repo,omitempty"`
			Scope              *string   `json:"scope,omitempty"`
			Severity           *string   `json:"severity,omitempty"`
			Status             *string   `json:"status,omitempty"`
			SysTags            *[]string `json:"sysTags,omitempty"`
			Tags               *[]string `json:"tags,omitempty"`
			Template           *bool     `json:"template,omitempty"`
			Type               *string   `json:"type,omitempty"`
		} `json:"rule,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiRulesShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiRulesShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiRulesTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Tags *[]string `json:"tags,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiRulesTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiRulesTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiRulesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Rule *struct {
			CreatedAt      *string `json:"createdAt,omitempty"`
			DebtOverloaded *bool   `json:"debtOverloaded,omitempty"`
			HtmlDesc       *string `json:"htmlDesc,omitempty"`
			IsExternal     *bool   `json:"isExternal,omitempty"`
			IsTemplate     *bool   `json:"isTemplate,omitempty"`
			Key            *string `json:"key,omitempty"`
			Lang           *string `json:"lang,omitempty"`
			LangName       *string `json:"langName,omitempty"`
			MdDesc         *string `json:"mdDesc,omitempty"`
			Name           *string `json:"name,omitempty"`
			Params         *[]struct {
				DefaultValue *string `json:"defaultValue,omitempty"`
				HtmlDesc     *string `json:"htmlDesc,omitempty"`
				Key          *string `json:"key,omitempty"`
				Type         *string `json:"type,omitempty"`
			} `json:"params,omitempty"`
			RemFnOverloaded *bool     `json:"remFnOverloaded,omitempty"`
			Repo            *string   `json:"repo,omitempty"`
			Scope           *string   `json:"scope,omitempty"`
			Severity        *string   `json:"severity,omitempty"`
			Status          *string   `json:"status,omitempty"`
			SysTags         *[]string `json:"sysTags,omitempty"`
			Tags            *[]string `json:"tags,omitempty"`
			TemplateKey     *string   `json:"templateKey,omitempty"`
			Type            *string   `json:"type,omitempty"`
		} `json:"rule,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiRulesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiRulesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiServerVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiServerVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiServerVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSettingsListDefinitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Definitions *[]struct {
			Category     *string `json:"category,omitempty"`
			DefaultValue *string `json:"defaultValue,omitempty"`
			Description  *string `json:"description,omitempty"`
			Fields       *[]struct {
				Description *string   `json:"description,omitempty"`
				Key         *string   `json:"key,omitempty"`
				Name        *string   `json:"name,omitempty"`
				Options     *[]string `json:"options,omitempty"`
				Type        *string   `json:"type,omitempty"`
			} `json:"fields,omitempty"`
			Key         *string   `json:"key,omitempty"`
			MultiValues *bool     `json:"multiValues,omitempty"`
			Name        *string   `json:"name,omitempty"`
			Options     *[]string `json:"options,omitempty"`
			SubCategory *string   `json:"subCategory,omitempty"`
			Type        *string   `json:"type,omitempty"`
		} `json:"definitions,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiSettingsListDefinitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSettingsListDefinitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSettingsResetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiSettingsResetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSettingsResetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSettingsSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiSettingsSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSettingsSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSettingsValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		SetSecuredSettings *[]string `json:"setSecuredSettings,omitempty"`
		Settings           *[]struct {
			Inherited *bool   `json:"inherited,omitempty"`
			Key       *string `json:"key,omitempty"`
			Value     *string `json:"value,omitempty"`
		} `json:"settings,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiSettingsValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSettingsValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSourcesRawResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiSourcesRawResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSourcesRawResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSourcesScmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Scm *[][]interface{} `json:"scm,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiSourcesScmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSourcesScmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSourcesShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Sources *[][]interface{} `json:"sources,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiSourcesShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSourcesShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSystemChangeLogLevelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiSystemChangeLogLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSystemChangeLogLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSystemDbMigrationStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Message   *string `json:"message,omitempty"`
		StartedAt *string `json:"startedAt,omitempty"`
		State     *string `json:"state,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiSystemDbMigrationStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSystemDbMigrationStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSystemHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Causes *[]struct {
			Message *string `json:"message,omitempty"`
		} `json:"causes,omitempty"`
		Health *string `json:"health,omitempty"`
		Nodes  *[]struct {
			Causes *[]struct {
				Message *string `json:"message,omitempty"`
			} `json:"causes,omitempty"`
			Health    *string `json:"health,omitempty"`
			Host      *string `json:"host,omitempty"`
			Name      *string `json:"name,omitempty"`
			Port      *int    `json:"port,omitempty"`
			StartedAt *string `json:"startedAt,omitempty"`
			Type      *string `json:"type,omitempty"`
		} `json:"nodes,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiSystemHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSystemHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSystemInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		ALMs *struct {
			GithubConfig *string `json:"Github Config,omitempty"`
			GitlabConfig *string `json:"Gitlab Config,omitempty"`
		} `json:"ALMs,omitempty"`
		Bundled *struct {
			Config     *string `json:"config,omitempty"`
			Csharp     *string `json:"csharp,omitempty"`
			Flex       *string `json:"flex,omitempty"`
			Go         *string `json:"go,omitempty"`
			Iac        *string `json:"iac,omitempty"`
			Jacoco     *string `json:"jacoco,omitempty"`
			Java       *string `json:"java,omitempty"`
			Javascript *string `json:"javascript,omitempty"`
			Kotlin     *string `json:"kotlin,omitempty"`
			Php        *string `json:"php,omitempty"`
			Python     *string `json:"python,omitempty"`
			Ruby       *string `json:"ruby,omitempty"`
			Sonarscala *string `json:"sonarscala,omitempty"`
			Text       *string `json:"text,omitempty"`
			Vbnet      *string `json:"vbnet,omitempty"`
			Web        *string `json:"web,omitempty"`
			Xml        *string `json:"xml,omitempty"`
		} `json:"Bundled,omitempty"`
		ComputeEngineDatabaseConnection *struct {
			PoolActiveConnections  *int `json:"Pool Active Connections,omitempty"`
			PoolIdleConnections    *int `json:"Pool Idle Connections,omitempty"`
			PoolMaxConnections     *int `json:"Pool Max Connections,omitempty"`
			PoolMaxLifetimeMs      *int `json:"Pool Max Lifetime (ms),omitempty"`
			PoolMaxWaitMs          *int `json:"Pool Max Wait (ms),omitempty"`
			PoolMinIdleConnections *int `json:"Pool Min Idle Connections,omitempty"`
			PoolTotalConnections   *int `json:"Pool Total Connections,omitempty"`
		} `json:"Compute Engine Database Connection,omitempty"`
		ComputeEngineJVMProperties *struct {
			AwtToolkit                 *string `json:"awt.toolkit,omitempty"`
			ComRedhatFips              *string `json:"com.redhat.fips,omitempty"`
			ComZaxxerHikariPoolNumber  *string `json:"com.zaxxer.hikari.pool_number,omitempty"`
			FileEncoding               *string `json:"file.encoding,omitempty"`
			FileSeparator              *string `json:"file.separator,omitempty"`
			FtpNonProxyHosts           *string `json:"ftp.nonProxyHosts,omitempty"`
			GopherProxySet             *string `json:"gopherProxySet,omitempty"`
			HttpNonProxyHosts          *string `json:"http.nonProxyHosts,omitempty"`
			JavaAwtGraphicsenv         *string `json:"java.awt.graphicsenv,omitempty"`
			JavaAwtHeadless            *string `json:"java.awt.headless,omitempty"`
			JavaAwtPrinterjob          *string `json:"java.awt.printerjob,omitempty"`
			JavaClassPath              *string `json:"java.class.path,omitempty"`
			JavaClassVersion           *string `json:"java.class.version,omitempty"`
			JavaHome                   *string `json:"java.home,omitempty"`
			JavaIoTmpdir               *string `json:"java.io.tmpdir,omitempty"`
			JavaLibraryPath            *string `json:"java.library.path,omitempty"`
			JavaRuntimeName            *string `json:"java.runtime.name,omitempty"`
			JavaRuntimeVersion         *string `json:"java.runtime.version,omitempty"`
			JavaSpecificationName      *string `json:"java.specification.name,omitempty"`
			JavaSpecificationVendor    *string `json:"java.specification.vendor,omitempty"`
			JavaSpecificationVersion   *string `json:"java.specification.version,omitempty"`
			JavaVendor                 *string `json:"java.vendor,omitempty"`
			JavaVendorUrl              *string `json:"java.vendor.url,omitempty"`
			JavaVendorUrlBug           *string `json:"java.vendor.url.bug,omitempty"`
			JavaVendorVersion          *string `json:"java.vendor.version,omitempty"`
			JavaVersion                *string `json:"java.version,omitempty"`
			JavaVersionDate            *string `json:"java.version.date,omitempty"`
			JavaVmCompressedOopsMode   *string `json:"java.vm.compressedOopsMode,omitempty"`
			JavaVmInfo                 *string `json:"java.vm.info,omitempty"`
			JavaVmName                 *string `json:"java.vm.name,omitempty"`
			JavaVmSpecificationName    *string `json:"java.vm.specification.name,omitempty"`
			JavaVmSpecificationVendor  *string `json:"java.vm.specification.vendor,omitempty"`
			JavaVmSpecificationVersion *string `json:"java.vm.specification.version,omitempty"`
			JavaVmVendor               *string `json:"java.vm.vendor,omitempty"`
			JavaVmVersion              *string `json:"java.vm.version,omitempty"`
			JdkDebug                   *string `json:"jdk.debug,omitempty"`
			JdkVendorVersion           *string `json:"jdk.vendor.version,omitempty"`
			LineSeparator              *string `json:"line.separator,omitempty"`
			OsArch                     *string `json:"os.arch,omitempty"`
			OsName                     *string `json:"os.name,omitempty"`
			OsVersion                  *string `json:"os.version,omitempty"`
			PathSeparator              *string `json:"path.separator,omitempty"`
			SocksNonProxyHosts         *string `json:"socksNonProxyHosts,omitempty"`
			SunArchDataModel           *string `json:"sun.arch.data.model,omitempty"`
			SunBootLibraryPath         *string `json:"sun.boot.library.path,omitempty"`
			SunCpuEndian               *string `json:"sun.cpu.endian,omitempty"`
			SunCpuIsalist              *string `json:"sun.cpu.isalist,omitempty"`
			SunIoUnicodeEncoding       *string `json:"sun.io.unicode.encoding,omitempty"`
			SunJavaCommand             *string `json:"sun.java.command,omitempty"`
			SunJavaLauncher            *string `json:"sun.java.launcher,omitempty"`
			SunJnuEncoding             *string `json:"sun.jnu.encoding,omitempty"`
			SunManagementCompiler      *string `json:"sun.management.compiler,omitempty"`
			SunOsPatchLevel            *string `json:"sun.os.patch.level,omitempty"`
			UserCountry                *string `json:"user.country,omitempty"`
			UserDir                    *string `json:"user.dir,omitempty"`
			UserHome                   *string `json:"user.home,omitempty"`
			UserLanguage               *string `json:"user.language,omitempty"`
			UserName                   *string `json:"user.name,omitempty"`
			UserTimezone               *string `json:"user.timezone,omitempty"`
		} `json:"Compute Engine JVM Properties,omitempty"`
		ComputeEngineJVMState *struct {
			FreeMemoryMB       *int    `json:"Free Memory (MB),omitempty"`
			HeapCommittedMB    *int    `json:"Heap Committed (MB),omitempty"`
			HeapInitMB         *int    `json:"Heap Init (MB),omitempty"`
			HeapMaxMB          *int    `json:"Heap Max (MB),omitempty"`
			HeapUsedMB         *int    `json:"Heap Used (MB),omitempty"`
			MaxMemoryMB        *int    `json:"Max Memory (MB),omitempty"`
			NonHeapCommittedMB *int    `json:"Non Heap Committed (MB),omitempty"`
			NonHeapInitMB      *int    `json:"Non Heap Init (MB),omitempty"`
			NonHeapUsedMB      *int    `json:"Non Heap Used (MB),omitempty"`
			SystemLoadAverage  *string `json:"System Load Average,omitempty"`
			Threads            *int    `json:"Threads,omitempty"`
		} `json:"Compute Engine JVM State,omitempty"`
		ComputeEngineLogging *struct {
			LogsDir   *string `json:"Logs Dir,omitempty"`
			LogsLevel *string `json:"Logs Level,omitempty"`
		} `json:"Compute Engine Logging,omitempty"`
		ComputeEngineTasks *struct {
			InProgress           *int  `json:"In Progress,omitempty"`
			LongestTimePendingMs *int  `json:"Longest Time Pending (ms),omitempty"`
			MaxWorkerCount       *int  `json:"Max Worker Count,omitempty"`
			Pending              *int  `json:"Pending,omitempty"`
			ProcessedWithError   *int  `json:"Processed With Error,omitempty"`
			ProcessedWithSuccess *int  `json:"Processed With Success,omitempty"`
			ProcessingTimeMs     *int  `json:"Processing Time (ms),omitempty"`
			WorkerCount          *int  `json:"Worker Count,omitempty"`
			WorkersPaused        *bool `json:"Workers Paused,omitempty"`
		} `json:"Compute Engine Tasks,omitempty"`
		Database *struct {
			Database                    *string `json:"Database,omitempty"`
			DatabaseVersion             *string `json:"Database Version,omitempty"`
			DefaultTransactionIsolation *string `json:"Default transaction isolation,omitempty"`
			Driver                      *string `json:"Driver,omitempty"`
			DriverVersion               *string `json:"Driver Version,omitempty"`
			URL                         *string `json:"URL,omitempty"`
			Username                    *string `json:"Username,omitempty"`
		} `json:"Database,omitempty"`
		Health       *string   `json:"Health,omitempty"`
		HealthCauses *[]string `json:"Health Causes,omitempty"`
		Plugins      *struct {
			Name *string `json:"name,omitempty"`
		} `json:"Plugins,omitempty"`
		SearchIndexes *struct {
			IndexComponentsDocs           *int    `json:"Index components - Docs,omitempty"`
			IndexComponentsShards         *int    `json:"Index components - Shards,omitempty"`
			IndexComponentsStoreSize      *string `json:"Index components - Store Size,omitempty"`
			IndexIssuesDocs               *int    `json:"Index issues - Docs,omitempty"`
			IndexIssuesShards             *int    `json:"Index issues - Shards,omitempty"`
			IndexIssuesStoreSize          *string `json:"Index issues - Store Size,omitempty"`
			IndexMetadatasDocs            *int    `json:"Index metadatas - Docs,omitempty"`
			IndexMetadatasShards          *int    `json:"Index metadatas - Shards,omitempty"`
			IndexMetadatasStoreSize       *string `json:"Index metadatas - Store Size,omitempty"`
			IndexProjectmeasuresDocs      *int    `json:"Index projectmeasures - Docs,omitempty"`
			IndexProjectmeasuresShards    *int    `json:"Index projectmeasures - Shards,omitempty"`
			IndexProjectmeasuresStoreSize *string `json:"Index projectmeasures - Store Size,omitempty"`
			IndexRulesDocs                *int    `json:"Index rules - Docs,omitempty"`
			IndexRulesShards              *int    `json:"Index rules - Shards,omitempty"`
			IndexRulesStoreSize           *string `json:"Index rules - Store Size,omitempty"`
			IndexUsersDocs                *int    `json:"Index users - Docs,omitempty"`
			IndexUsersShards              *int    `json:"Index users - Shards,omitempty"`
			IndexUsersStoreSize           *string `json:"Index users - Store Size,omitempty"`
			IndexViewsDocs                *int    `json:"Index views - Docs,omitempty"`
			IndexViewsShards              *int    `json:"Index views - Shards,omitempty"`
			IndexViewsStoreSize           *string `json:"Index views - Store Size,omitempty"`
		} `json:"Search Indexes,omitempty"`
		SearchState *struct {
			CPUUsage                          *int    `json:"CPU Usage (%),omitempty"`
			DiskAvailable                     *string `json:"Disk Available,omitempty"`
			FieldDataCircuitBreakerEstimation *string `json:"Field Data Circuit Breaker Estimation,omitempty"`
			FieldDataCircuitBreakerLimit      *string `json:"Field Data Circuit Breaker Limit,omitempty"`
			FieldDataMemory                   *string `json:"Field Data Memory,omitempty"`
			JVMHeapMax                        *string `json:"JVM Heap Max,omitempty"`
			JVMHeapUsage                      *string `json:"JVM Heap Usage,omitempty"`
			JVMHeapUsed                       *string `json:"JVM Heap Used,omitempty"`
			JVMNonHeapUsed                    *string `json:"JVM Non Heap Used,omitempty"`
			JVMThreads                        *int    `json:"JVM Threads,omitempty"`
			MaxFileDescriptors                *int    `json:"Max File Descriptors,omitempty"`
			OpenFileDescriptors               *int    `json:"Open File Descriptors,omitempty"`
			QueryCacheMemory                  *string `json:"Query Cache Memory,omitempty"`
			RequestCacheMemory                *string `json:"Request Cache Memory,omitempty"`
			RequestCircuitBreakerEstimation   *string `json:"Request Circuit Breaker Estimation,omitempty"`
			RequestCircuitBreakerLimit        *string `json:"Request Circuit Breaker Limit,omitempty"`
			State                             *string `json:"State,omitempty"`
			StoreSize                         *string `json:"Store Size,omitempty"`
			TranslogSize                      *string `json:"Translog Size,omitempty"`
		} `json:"Search State,omitempty"`
		ServerPushConnections *struct {
			SonarLintConnectedClients *int `json:"SonarLint Connected Clients,omitempty"`
		} `json:"Server Push Connections,omitempty"`
		Settings *struct {
			DefaultNewCodeDefinition                               *string `json:"Default New Code Definition,omitempty"`
			DevactivityStatus                                      *string `json:"devactivity.status,omitempty"`
			HttpNonProxyHosts                                      *string `json:"http.nonProxyHosts,omitempty"`
			ProcessGracefulStopTimeout                             *string `json:"process.gracefulStopTimeout,omitempty"`
			ProcessIndex                                           *string `json:"process.index,omitempty"`
			ProcessKey                                             *string `json:"process.key,omitempty"`
			ProcessSharedDir                                       *string `json:"process.sharedDir,omitempty"`
			ProjectsDefaultVisibility                              *string `json:"projects.default.visibility,omitempty"`
			QualitygateDefault                                     *string `json:"qualitygate.default,omitempty"`
			SonarAuthSamlCertificateSecured                        *string `json:"sonar.auth.saml.certificate.secured,omitempty"`
			SonarAuthSamlEnabled                                   *string `json:"sonar.auth.saml.enabled,omitempty"`
			SonarAuthSamlLoginUrl                                  *string `json:"sonar.auth.saml.loginUrl,omitempty"`
			SonarAuthSamlProviderId                                *string `json:"sonar.auth.saml.providerId,omitempty"`
			SonarAuthSamlProviderName                              *string `json:"sonar.auth.saml.providerName,omitempty"`
			SonarAuthSamlSignatureEnabled                          *string `json:"sonar.auth.saml.signature.enabled,omitempty"`
			SonarAuthSamlSpCertificateSecured                      *string `json:"sonar.auth.saml.sp.certificate.secured,omitempty"`
			SonarAuthSamlSpPrivateKeySecured                       *string `json:"sonar.auth.saml.sp.privateKey.secured,omitempty"`
			SonarAuthSamlUserLogin                                 *string `json:"sonar.auth.saml.user.login,omitempty"`
			SonarAuthSamlUserName                                  *string `json:"sonar.auth.saml.user.name,omitempty"`
			SonarAuthenticatorIgnoreStartupFailure                 *string `json:"sonar.authenticator.ignoreStartupFailure,omitempty"`
			SonarAutoDatabaseUpgrade                               *string `json:"sonar.autoDatabaseUpgrade,omitempty"`
			SonarBlueGreenEnabled                                  *string `json:"sonar.blueGreenEnabled,omitempty"`
			SonarBuildbreakerSkip                                  *string `json:"sonar.buildbreaker.skip,omitempty"`
			SonarCPredefinedMacros                                 *string `json:"sonar.c.predefinedMacros,omitempty"`
			SonarCeGracefulStopTimeOutInMs                         *string `json:"sonar.ce.gracefulStopTimeOutInMs,omitempty"`
			SonarCeJavaAdditionalOpts                              *string `json:"sonar.ce.javaAdditionalOpts,omitempty"`
			SonarCeJavaOpts                                        *string `json:"sonar.ce.javaOpts,omitempty"`
			SonarClusterEnabled                                    *string `json:"sonar.cluster.enabled,omitempty"`
			SonarClusterKubernetes                                 *string `json:"sonar.cluster.kubernetes,omitempty"`
			SonarClusterName                                       *string `json:"sonar.cluster.name,omitempty"`
			SonarClusterNodeName                                   *string `json:"sonar.cluster.node.name,omitempty"`
			SonarClusterNodePort                                   *string `json:"sonar.cluster.node.port,omitempty"`
			SonarClusterWebStartupLeader                           *string `json:"sonar.cluster.web.startupLeader,omitempty"`
			SonarCoreId                                            *string `json:"sonar.core.id,omitempty"`
			SonarCoreServerBaseURL                                 *string `json:"sonar.core.serverBaseURL,omitempty"`
			SonarCoreStartTime                                     *string `json:"sonar.core.startTime,omitempty"`
			SonarCoreTreemapColormetric                            *string `json:"sonar.core.treemap.colormetric,omitempty"`
			SonarCoreTreemapSizemetric                             *string `json:"sonar.core.treemap.sizemetric,omitempty"`
			SonarCpdCrossProject                                   *string `json:"sonar.cpd.cross_project,omitempty"`
			SonarDbcleanerBranchesToKeepWhenInactive               *string `json:"sonar.dbcleaner.branchesToKeepWhenInactive,omitempty"`
			SonarDbcleanerDaysBeforeDeletingInactiveBranchesAndPRs *string `json:"sonar.dbcleaner.daysBeforeDeletingInactiveBranchesAndPRs,omitempty"`
			SonarDbcleanerMonthsBeforeDeletingAllSnapshots         *string `json:"sonar.dbcleaner.monthsBeforeDeletingAllSnapshots,omitempty"`
			SonarDbcleanerWeeksBeforeDeletingAllSnapshots          *string `json:"sonar.dbcleaner.weeksBeforeDeletingAllSnapshots,omitempty"`
			SonarDryRunCacheLastUpdate                             *string `json:"sonar.dryRun.cache.lastUpdate,omitempty"`
			SonarEsPort                                            *string `json:"sonar.es.port,omitempty"`
			SonarForceAuthentication                               *string `json:"sonar.forceAuthentication,omitempty"`
			SonarGenericcoverageSuffixes                           *string `json:"sonar.genericcoverage.suffixes,omitempty"`
			SonarGovernanceReportViewFrequency                     *string `json:"sonar.governance.report.view.frequency,omitempty"`
			SonarJavaCoveragePlugin                                *string `json:"sonar.java.coveragePlugin,omitempty"`
			SonarJavascriptJQueryObjectAliases                     *string `json:"sonar.javascript.jQueryObjectAliases,omitempty"`
			SonarJdbcDriverPath                                    *string `json:"sonar.jdbc.driverPath,omitempty"`
			SonarJdbcMaxActive                                     *string `json:"sonar.jdbc.maxActive,omitempty"`
			SonarJdbcMaxWait                                       *string `json:"sonar.jdbc.maxWait,omitempty"`
			SonarJdbcMinIdle                                       *string `json:"sonar.jdbc.minIdle,omitempty"`
			SonarJdbcPassword                                      *string `json:"sonar.jdbc.password,omitempty"`
			SonarJdbcUrl                                           *string `json:"sonar.jdbc.url,omitempty"`
			SonarJdbcUsername                                      *string `json:"sonar.jdbc.username,omitempty"`
			SonarLfEnableGravatar                                  *string `json:"sonar.lf.enableGravatar,omitempty"`
			SonarLfLogoWidthPx                                     *string `json:"sonar.lf.logoWidthPx,omitempty"`
			SonarLogJsonOutput                                     *string `json:"sonar.log.jsonOutput,omitempty"`
			SonarOrganisation                                      *string `json:"sonar.organisation,omitempty"`
			SonarPathData                                          *string `json:"sonar.path.data,omitempty"`
			SonarPathHome                                          *string `json:"sonar.path.home,omitempty"`
			SonarPathLogs                                          *string `json:"sonar.path.logs,omitempty"`
			SonarPathTemp                                          *string `json:"sonar.path.temp,omitempty"`
			SonarPathWeb                                           *string `json:"sonar.path.web,omitempty"`
			SonarPlsqlFileSuffixes                                 *string `json:"sonar.plsql.file.suffixes,omitempty"`
			SonarPluginsRiskConsent                                *string `json:"sonar.plugins.risk.consent,omitempty"`
			SonarPreviewExcludePlugins                             *string `json:"sonar.preview.excludePlugins,omitempty"`
			SonarReportDashboardName                               *string `json:"sonar.report.dashboard.name,omitempty"`
			SonarReportFrequency                                   *string `json:"sonar.report.frequency,omitempty"`
			SonarReportIgnoreSslErrors                             *string `json:"sonar.report.ignoreSslErrors,omitempty"`
			SonarReportLastDate                                    *string `json:"sonar.report.last_date,omitempty"`
			SonarReportLastDateDevReport                           *string `json:"sonar.report.last_date.dev_report,omitempty"`
			SonarReportLastDateManagementReport                    *string `json:"sonar.report.last_date.management_report,omitempty"`
			SonarReportLogin                                       *string `json:"sonar.report.login,omitempty"`
			SonarReportSubject                                     *string `json:"sonar.report.subject,omitempty"`
			SonarReports                                           *string `json:"sonar.reports,omitempty"`
			SonarScmDisabled                                       *string `json:"sonar.scm.disabled,omitempty"`
			SonarScmEnabled                                        *string `json:"sonar.scm.enabled,omitempty"`
			SonarSearchHost                                        *string `json:"sonar.search.host,omitempty"`
			SonarSearchJavaAdditionalOpts                          *string `json:"sonar.search.javaAdditionalOpts,omitempty"`
			SonarSearchJavaOpts                                    *string `json:"sonar.search.javaOpts,omitempty"`
			SonarSearchPort                                        *string `json:"sonar.search.port,omitempty"`
			SonarTechnicalDebtRatingGrid                           *string `json:"sonar.technicalDebt.ratingGrid,omitempty"`
			SonarTelemetryCompression                              *string `json:"sonar.telemetry.compression,omitempty"`
			SonarTelemetryEnable                                   *string `json:"sonar.telemetry.enable,omitempty"`
			SonarTelemetryFrequencyInSeconds                       *string `json:"sonar.telemetry.frequencyInSeconds,omitempty"`
			SonarTelemetryUrl                                      *string `json:"sonar.telemetry.url,omitempty"`
			SonarUpdatecenterActivate                              *string `json:"sonar.updatecenter.activate,omitempty"`
			SonarWebGracefulStopTimeOutInMs                        *string `json:"sonar.web.gracefulStopTimeOutInMs,omitempty"`
			SonarWebJavaAdditionalOpts                             *string `json:"sonar.web.javaAdditionalOpts,omitempty"`
			SonarWebJavaOpts                                       *string `json:"sonar.web.javaOpts,omitempty"`
			SonarWebSsoEmailHeader                                 *string `json:"sonar.web.sso.emailHeader,omitempty"`
			SonarWebSsoEnable                                      *string `json:"sonar.web.sso.enable,omitempty"`
			SonarWebSsoGroupsHeader                                *string `json:"sonar.web.sso.groupsHeader,omitempty"`
			SonarWebSsoLoginHeader                                 *string `json:"sonar.web.sso.loginHeader,omitempty"`
			SonarWebSsoNameHeader                                  *string `json:"sonar.web.sso.nameHeader,omitempty"`
			SonarWebSsoRefreshIntervalInMinutes                    *string `json:"sonar.web.sso.refreshIntervalInMinutes,omitempty"`
		} `json:"Settings,omitempty"`
		System *struct {
			AcceptedExternalIdentityProviders                               *string `json:"Accepted external identity providers,omitempty"`
			DataDir                                                         *string `json:"Data Dir,omitempty"`
			Docker                                                          *bool   `json:"Docker,omitempty"`
			Edition                                                         *string `json:"Edition,omitempty"`
			ExternalIdentityProvidersWhoseUsersAreAllowedToSignThemselvesUp *string `json:"External identity providers whose users are allowed to sign themselves up,omitempty"`
			ForceAuthentication                                             *bool   `json:"Force authentication,omitempty"`
			HighAvailability                                                *bool   `json:"High Availability,omitempty"`
			HomeDir                                                         *string `json:"Home Dir,omitempty"`
			OfficialDistribution                                            *bool   `json:"Official Distribution,omitempty"`
			Processors                                                      *int    `json:"Processors,omitempty"`
			ServerID                                                        *string `json:"Server ID,omitempty"`
			TempDir                                                         *string `json:"Temp Dir,omitempty"`
			Version                                                         *string `json:"Version,omitempty"`
		} `json:"System,omitempty"`
		WebDatabaseConnection *struct {
			PoolActiveConnections  *int `json:"Pool Active Connections,omitempty"`
			PoolIdleConnections    *int `json:"Pool Idle Connections,omitempty"`
			PoolMaxConnections     *int `json:"Pool Max Connections,omitempty"`
			PoolMaxLifetimeMs      *int `json:"Pool Max Lifetime (ms),omitempty"`
			PoolMaxWaitMs          *int `json:"Pool Max Wait (ms),omitempty"`
			PoolMinIdleConnections *int `json:"Pool Min Idle Connections,omitempty"`
			PoolTotalConnections   *int `json:"Pool Total Connections,omitempty"`
		} `json:"Web Database Connection,omitempty"`
		WebJVMProperties *struct {
			AwtToolkit                                      *string `json:"awt.toolkit,omitempty"`
			CatalinaBase                                    *string `json:"catalina.base,omitempty"`
			CatalinaHome                                    *string `json:"catalina.home,omitempty"`
			CatalinaUseNaming                               *string `json:"catalina.useNaming,omitempty"`
			ComRedhatFips                                   *string `json:"com.redhat.fips,omitempty"`
			ComZaxxerHikariPoolNumber                       *string `json:"com.zaxxer.hikari.pool_number,omitempty"`
			FileEncoding                                    *string `json:"file.encoding,omitempty"`
			FileSeparator                                   *string `json:"file.separator,omitempty"`
			FtpNonProxyHosts                                *string `json:"ftp.nonProxyHosts,omitempty"`
			GopherProxySet                                  *string `json:"gopherProxySet,omitempty"`
			HttpAgent                                       *string `json:"http.agent,omitempty"`
			HttpNonProxyHosts                               *string `json:"http.nonProxyHosts,omitempty"`
			JavaAwtGraphicsenv                              *string `json:"java.awt.graphicsenv,omitempty"`
			JavaAwtHeadless                                 *string `json:"java.awt.headless,omitempty"`
			JavaAwtPrinterjob                               *string `json:"java.awt.printerjob,omitempty"`
			JavaClassPath                                   *string `json:"java.class.path,omitempty"`
			JavaClassVersion                                *string `json:"java.class.version,omitempty"`
			JavaHome                                        *string `json:"java.home,omitempty"`
			JavaIoTmpdir                                    *string `json:"java.io.tmpdir,omitempty"`
			JavaLibraryPath                                 *string `json:"java.library.path,omitempty"`
			JavaRuntimeName                                 *string `json:"java.runtime.name,omitempty"`
			JavaRuntimeVersion                              *string `json:"java.runtime.version,omitempty"`
			JavaSpecificationName                           *string `json:"java.specification.name,omitempty"`
			JavaSpecificationVendor                         *string `json:"java.specification.vendor,omitempty"`
			JavaSpecificationVersion                        *string `json:"java.specification.version,omitempty"`
			JavaVendor                                      *string `json:"java.vendor,omitempty"`
			JavaVendorUrl                                   *string `json:"java.vendor.url,omitempty"`
			JavaVendorUrlBug                                *string `json:"java.vendor.url.bug,omitempty"`
			JavaVendorVersion                               *string `json:"java.vendor.version,omitempty"`
			JavaVersion                                     *string `json:"java.version,omitempty"`
			JavaVersionDate                                 *string `json:"java.version.date,omitempty"`
			JavaVmCompressedOopsMode                        *string `json:"java.vm.compressedOopsMode,omitempty"`
			JavaVmInfo                                      *string `json:"java.vm.info,omitempty"`
			JavaVmName                                      *string `json:"java.vm.name,omitempty"`
			JavaVmSpecificationName                         *string `json:"java.vm.specification.name,omitempty"`
			JavaVmSpecificationVendor                       *string `json:"java.vm.specification.vendor,omitempty"`
			JavaVmSpecificationVersion                      *string `json:"java.vm.specification.version,omitempty"`
			JavaVmVendor                                    *string `json:"java.vm.vendor,omitempty"`
			JavaVmVersion                                   *string `json:"java.vm.version,omitempty"`
			JdkDebug                                        *string `json:"jdk.debug,omitempty"`
			JdkVendorVersion                                *string `json:"jdk.vendor.version,omitempty"`
			LineSeparator                                   *string `json:"line.separator,omitempty"`
			LogbackDisableServletContainerInitializer       *string `json:"logbackDisableServletContainerInitializer,omitempty"`
			OrgApacheCatalinaStartupEXITONINITFAILURE       *string `json:"org.apache.catalina.startup.EXIT_ON_INIT_FAILURE,omitempty"`
			OrgApacheTomcatUtilBufUDecoderALLOWENCODEDSLASH *string `json:"org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH,omitempty"`
			OsArch                                          *string `json:"os.arch,omitempty"`
			OsName                                          *string `json:"os.name,omitempty"`
			OsVersion                                       *string `json:"os.version,omitempty"`
			PathSeparator                                   *string `json:"path.separator,omitempty"`
			SocksNonProxyHosts                              *string `json:"socksNonProxyHosts,omitempty"`
			SunArchDataModel                                *string `json:"sun.arch.data.model,omitempty"`
			SunBootLibraryPath                              *string `json:"sun.boot.library.path,omitempty"`
			SunCpuEndian                                    *string `json:"sun.cpu.endian,omitempty"`
			SunCpuIsalist                                   *string `json:"sun.cpu.isalist,omitempty"`
			SunFontFontmanager                              *string `json:"sun.font.fontmanager,omitempty"`
			SunIoUnicodeEncoding                            *string `json:"sun.io.unicode.encoding,omitempty"`
			SunJavaCommand                                  *string `json:"sun.java.command,omitempty"`
			SunJavaLauncher                                 *string `json:"sun.java.launcher,omitempty"`
			SunJnuEncoding                                  *string `json:"sun.jnu.encoding,omitempty"`
			SunManagementCompiler                           *string `json:"sun.management.compiler,omitempty"`
			SunOsPatchLevel                                 *string `json:"sun.os.patch.level,omitempty"`
			UserCountry                                     *string `json:"user.country,omitempty"`
			UserDir                                         *string `json:"user.dir,omitempty"`
			UserHome                                        *string `json:"user.home,omitempty"`
			UserLanguage                                    *string `json:"user.language,omitempty"`
			UserName                                        *string `json:"user.name,omitempty"`
			UserTimezone                                    *string `json:"user.timezone,omitempty"`
		} `json:"Web JVM Properties,omitempty"`
		WebJVMState *struct {
			FreeMemoryMB       *int    `json:"Free Memory (MB),omitempty"`
			HeapCommittedMB    *int    `json:"Heap Committed (MB),omitempty"`
			HeapInitMB         *int    `json:"Heap Init (MB),omitempty"`
			HeapMaxMB          *int    `json:"Heap Max (MB),omitempty"`
			HeapUsedMB         *int    `json:"Heap Used (MB),omitempty"`
			MaxMemoryMB        *int    `json:"Max Memory (MB),omitempty"`
			NonHeapCommittedMB *int    `json:"Non Heap Committed (MB),omitempty"`
			NonHeapInitMB      *int    `json:"Non Heap Init (MB),omitempty"`
			NonHeapUsedMB      *int    `json:"Non Heap Used (MB),omitempty"`
			SystemLoadAverage  *string `json:"System Load Average,omitempty"`
			Threads            *int    `json:"Threads,omitempty"`
		} `json:"Web JVM State,omitempty"`
		WebLogging *struct {
			LogsDir   *string `json:"Logs Dir,omitempty"`
			LogsLevel *string `json:"Logs Level,omitempty"`
		} `json:"Web Logging,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiSystemInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSystemInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSystemLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiSystemLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSystemLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSystemMigrateDbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Message   *string `json:"message,omitempty"`
		StartedAt *string `json:"startedAt,omitempty"`
		State     *string `json:"state,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiSystemMigrateDbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSystemMigrateDbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSystemPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiSystemPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSystemPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSystemRestartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiSystemRestartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSystemRestartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSystemStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Id      *string `json:"id,omitempty"`
		Status  *string `json:"status,omitempty"`
		Version *string `json:"version,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiSystemStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSystemStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSystemUpgradesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		LatestLTS           *string `json:"latestLTS,omitempty"`
		UpdateCenterRefresh *string `json:"updateCenterRefresh,omitempty"`
		Upgrades            *[]struct {
			ChangeLogUrl *string `json:"changeLogUrl,omitempty"`
			Description  *string `json:"description,omitempty"`
			DownloadUrl  *string `json:"downloadUrl,omitempty"`
			Plugins      *struct {
				Incompatible *[]struct {
					Category         *string `json:"category,omitempty"`
					Description      *string `json:"description,omitempty"`
					EditionBundled   *bool   `json:"editionBundled,omitempty"`
					Key              *string `json:"key,omitempty"`
					License          *string `json:"license,omitempty"`
					Name             *string `json:"name,omitempty"`
					OrganizationName *string `json:"organizationName,omitempty"`
					OrganizationUrl  *string `json:"organizationUrl,omitempty"`
				} `json:"incompatible,omitempty"`
				RequireUpdate *[]struct {
					Category              *string `json:"category,omitempty"`
					Description           *string `json:"description,omitempty"`
					EditionBundled        *bool   `json:"editionBundled,omitempty"`
					Key                   *string `json:"key,omitempty"`
					License               *string `json:"license,omitempty"`
					Name                  *string `json:"name,omitempty"`
					OrganizationName      *string `json:"organizationName,omitempty"`
					OrganizationUrl       *string `json:"organizationUrl,omitempty"`
					TermsAndConditionsUrl *string `json:"termsAndConditionsUrl,omitempty"`
					Version               *string `json:"version,omitempty"`
				} `json:"requireUpdate,omitempty"`
			} `json:"plugins,omitempty"`
			ReleaseDate *string `json:"releaseDate,omitempty"`
			Version     *string `json:"version,omitempty"`
		} `json:"upgrades,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiSystemUpgradesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSystemUpgradesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUserGroupsAddUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiUserGroupsAddUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUserGroupsAddUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUserGroupsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Group *struct {
			Default      *bool   `json:"default,omitempty"`
			Description  *string `json:"description,omitempty"`
			Id           *string `json:"id,omitempty"`
			MembersCount *int    `json:"membersCount,omitempty"`
			Name         *string `json:"name,omitempty"`
			Organization *string `json:"organization,omitempty"`
		} `json:"group,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiUserGroupsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUserGroupsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUserGroupsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiUserGroupsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUserGroupsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUserGroupsRemoveUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiUserGroupsRemoveUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUserGroupsRemoveUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUserGroupsSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Groups *[]struct {
			Default      *bool   `json:"default,omitempty"`
			Description  *string `json:"description,omitempty"`
			Id           *string `json:"id,omitempty"`
			MembersCount *int    `json:"membersCount,omitempty"`
			Name         *string `json:"name,omitempty"`
		} `json:"groups,omitempty"`
		Paging *struct {
			PageIndex *int `json:"pageIndex,omitempty"`
			PageSize  *int `json:"pageSize,omitempty"`
			Total     *int `json:"total,omitempty"`
		} `json:"paging,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiUserGroupsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUserGroupsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUserGroupsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiUserGroupsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUserGroupsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUserGroupsUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Paging *struct {
			PageIndex *int `json:"pageIndex,omitempty"`
			PageSize  *int `json:"pageSize,omitempty"`
			Total     *int `json:"total,omitempty"`
		} `json:"paging,omitempty"`
		Users *[]struct {
			Login    *string `json:"login,omitempty"`
			Name     *string `json:"name,omitempty"`
			Selected *bool   `json:"selected,omitempty"`
		} `json:"users,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiUserGroupsUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUserGroupsUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUserTokensGenerateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		CreatedAt      *string `json:"createdAt,omitempty"`
		ExpirationDate *string `json:"expirationDate,omitempty"`
		Login          *string `json:"login,omitempty"`
		Name           *string `json:"name,omitempty"`
		Token          *string `json:"token,omitempty"`
		Type           *string `json:"type,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiUserTokensGenerateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUserTokensGenerateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUserTokensRevokeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiUserTokensRevokeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUserTokensRevokeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUserTokensSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Login      *string `json:"login,omitempty"`
		UserTokens *[]struct {
			CreatedAt *string `json:"createdAt,omitempty"`
			Name      *string `json:"name,omitempty"`
			Type      *string `json:"type,omitempty"`
		} `json:"userTokens,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiUserTokensSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUserTokensSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUsersAnonymizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiUsersAnonymizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUsersAnonymizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUsersChangePasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiUsersChangePasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUsersChangePasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUsersCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		User *struct {
			Active      *bool     `json:"active,omitempty"`
			Email       *string   `json:"email,omitempty"`
			Local       *bool     `json:"local,omitempty"`
			Login       *string   `json:"login,omitempty"`
			Name        *string   `json:"name,omitempty"`
			ScmAccounts *[]string `json:"scmAccounts,omitempty"`
		} `json:"user,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiUsersCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUsersCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUsersDeactivateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		User *struct {
			Active      *bool     `json:"active,omitempty"`
			Groups      *[]string `json:"groups,omitempty"`
			Local       *bool     `json:"local,omitempty"`
			Login       *string   `json:"login,omitempty"`
			Name        *string   `json:"name,omitempty"`
			ScmAccounts *[]string `json:"scmAccounts,omitempty"`
		} `json:"user,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiUsersDeactivateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUsersDeactivateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUsersDismissSonarlintAdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiUsersDismissSonarlintAdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUsersDismissSonarlintAdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUsersGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Groups *[]struct {
			Default     *bool   `json:"default,omitempty"`
			Description *string `json:"description,omitempty"`
			Id          *string `json:"id,omitempty"`
			Name        *string `json:"name,omitempty"`
			Selected    *bool   `json:"selected,omitempty"`
		} `json:"groups,omitempty"`
		Paging *struct {
			PageIndex *int `json:"pageIndex,omitempty"`
			PageSize  *int `json:"pageSize,omitempty"`
			Total     *int `json:"total,omitempty"`
		} `json:"paging,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiUsersGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUsersGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUsersSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Paging *struct {
			PageIndex *int `json:"pageIndex,omitempty"`
			PageSize  *int `json:"pageSize,omitempty"`
			Total     *int `json:"total,omitempty"`
		} `json:"paging,omitempty"`
		Users *[]struct {
			Active           *bool     `json:"active,omitempty"`
			Avatar           *string   `json:"avatar,omitempty"`
			Email            *string   `json:"email,omitempty"`
			ExternalIdentity *string   `json:"externalIdentity,omitempty"`
			ExternalProvider *string   `json:"externalProvider,omitempty"`
			Groups           *[]string `json:"groups,omitempty"`
			Local            *bool     `json:"local,omitempty"`
			Login            *string   `json:"login,omitempty"`
			Name             *string   `json:"name,omitempty"`
			TokensCount      *int      `json:"tokensCount,omitempty"`
		} `json:"users,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiUsersSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUsersSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUsersUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		User *struct {
			Active      *bool     `json:"active,omitempty"`
			Email       *string   `json:"email,omitempty"`
			Local       *bool     `json:"local,omitempty"`
			Login       *string   `json:"login,omitempty"`
			Name        *string   `json:"name,omitempty"`
			ScmAccounts *[]string `json:"scmAccounts,omitempty"`
		} `json:"user,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiUsersUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUsersUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUsersUpdateIdentityProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiUsersUpdateIdentityProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUsersUpdateIdentityProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUsersUpdateLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiUsersUpdateLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUsersUpdateLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiWebhooksCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Webhook *struct {
			HasSecret *bool   `json:"hasSecret,omitempty"`
			Key       *string `json:"key,omitempty"`
			Name      *string `json:"name,omitempty"`
			Url       *string `json:"url,omitempty"`
		} `json:"webhook,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiWebhooksCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiWebhooksCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiWebhooksDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiWebhooksDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiWebhooksDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiWebhooksDeliveriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Deliveries *[]struct {
			At           *string `json:"at,omitempty"`
			CeTaskId     *string `json:"ceTaskId,omitempty"`
			ComponentKey *string `json:"componentKey,omitempty"`
			DurationMs   *int    `json:"durationMs,omitempty"`
			HttpStatus   *int    `json:"httpStatus,omitempty"`
			Id           *string `json:"id,omitempty"`
			Name         *string `json:"name,omitempty"`
			Success      *bool   `json:"success,omitempty"`
			Url          *string `json:"url,omitempty"`
		} `json:"deliveries,omitempty"`
		Paging *struct {
			PageIndex *int `json:"pageIndex,omitempty"`
			PageSize  *int `json:"pageSize,omitempty"`
			Total     *int `json:"total,omitempty"`
		} `json:"paging,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiWebhooksDeliveriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiWebhooksDeliveriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiWebhooksDeliveryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Delivery *struct {
			At           *string `json:"at,omitempty"`
			CeTaskId     *string `json:"ceTaskId,omitempty"`
			ComponentKey *string `json:"componentKey,omitempty"`
			DurationMs   *int    `json:"durationMs,omitempty"`
			HttpStatus   *int    `json:"httpStatus,omitempty"`
			Id           *string `json:"id,omitempty"`
			Name         *string `json:"name,omitempty"`
			Payload      *string `json:"payload,omitempty"`
			Success      *bool   `json:"success,omitempty"`
			Url          *string `json:"url,omitempty"`
		} `json:"delivery,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiWebhooksDeliveryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiWebhooksDeliveryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiWebhooksListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Webhooks *[]struct {
			HasSecret *bool   `json:"hasSecret,omitempty"`
			Key       *string `json:"key,omitempty"`
			Name      *string `json:"name,omitempty"`
			Url       *string `json:"url,omitempty"`
		} `json:"webhooks,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiWebhooksListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiWebhooksListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiWebhooksUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiWebhooksUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiWebhooksUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiWebservicesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		WebServices *[]struct {
			Actions *[]struct {
				Changelog *[]struct {
					Description *string `json:"description,omitempty"`
					Version     *string `json:"version,omitempty"`
				} `json:"changelog,omitempty"`
				DeprecatedSince    *string `json:"deprecatedSince,omitempty"`
				Description        *string `json:"description,omitempty"`
				HasResponseExample *bool   `json:"hasResponseExample,omitempty"`
				Internal           *bool   `json:"internal,omitempty"`
				Key                *string `json:"key,omitempty"`
				Params             *[]struct {
					Internal     *bool   `json:"internal,omitempty"`
					Key          *string `json:"key,omitempty"`
					MaximumValue *int    `json:"maximumValue,omitempty"`
					Required     *bool   `json:"required,omitempty"`
				} `json:"params,omitempty"`
				Post  *bool   `json:"post,omitempty"`
				Since *string `json:"since,omitempty"`
			} `json:"actions,omitempty"`
			Description *string `json:"description,omitempty"`
			Path        *string `json:"path,omitempty"`
			Since       *string `json:"since,omitempty"`
		} `json:"webServices,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiWebservicesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiWebservicesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiWebservicesResponseExampleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		Example *string `json:"example,omitempty"`
		Format  *string `json:"format,omitempty"`
	}
	JSONDefault *struct {
		Errors *[]struct {
			Msg *string `json:"msg,omitempty"`
		} `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiWebservicesResponseExampleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiWebservicesResponseExampleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ApiAlmIntegrationsImportGitlabProjectWithResponse request returning *ApiAlmIntegrationsImportGitlabProjectResponse
func (c *ClientWithResponses) ApiAlmIntegrationsImportGitlabProjectWithResponse(ctx context.Context, params *ApiAlmIntegrationsImportGitlabProjectParams, reqEditors ...RequestEditorFn) (*ApiAlmIntegrationsImportGitlabProjectResponse, error) {
	rsp, err := c.ApiAlmIntegrationsImportGitlabProject(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAlmIntegrationsImportGitlabProjectResponse(rsp)
}

// ApiAlmIntegrationsListAzureProjectsWithResponse request returning *ApiAlmIntegrationsListAzureProjectsResponse
func (c *ClientWithResponses) ApiAlmIntegrationsListAzureProjectsWithResponse(ctx context.Context, params *ApiAlmIntegrationsListAzureProjectsParams, reqEditors ...RequestEditorFn) (*ApiAlmIntegrationsListAzureProjectsResponse, error) {
	rsp, err := c.ApiAlmIntegrationsListAzureProjects(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAlmIntegrationsListAzureProjectsResponse(rsp)
}

// ApiAlmIntegrationsListBitbucketserverProjectsWithResponse request returning *ApiAlmIntegrationsListBitbucketserverProjectsResponse
func (c *ClientWithResponses) ApiAlmIntegrationsListBitbucketserverProjectsWithResponse(ctx context.Context, params *ApiAlmIntegrationsListBitbucketserverProjectsParams, reqEditors ...RequestEditorFn) (*ApiAlmIntegrationsListBitbucketserverProjectsResponse, error) {
	rsp, err := c.ApiAlmIntegrationsListBitbucketserverProjects(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAlmIntegrationsListBitbucketserverProjectsResponse(rsp)
}

// ApiAlmIntegrationsSearchAzureReposWithResponse request returning *ApiAlmIntegrationsSearchAzureReposResponse
func (c *ClientWithResponses) ApiAlmIntegrationsSearchAzureReposWithResponse(ctx context.Context, params *ApiAlmIntegrationsSearchAzureReposParams, reqEditors ...RequestEditorFn) (*ApiAlmIntegrationsSearchAzureReposResponse, error) {
	rsp, err := c.ApiAlmIntegrationsSearchAzureRepos(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAlmIntegrationsSearchAzureReposResponse(rsp)
}

// ApiAlmIntegrationsSearchBitbucketcloudReposWithResponse request returning *ApiAlmIntegrationsSearchBitbucketcloudReposResponse
func (c *ClientWithResponses) ApiAlmIntegrationsSearchBitbucketcloudReposWithResponse(ctx context.Context, params *ApiAlmIntegrationsSearchBitbucketcloudReposParams, reqEditors ...RequestEditorFn) (*ApiAlmIntegrationsSearchBitbucketcloudReposResponse, error) {
	rsp, err := c.ApiAlmIntegrationsSearchBitbucketcloudRepos(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAlmIntegrationsSearchBitbucketcloudReposResponse(rsp)
}

// ApiAlmIntegrationsSearchBitbucketserverReposWithResponse request returning *ApiAlmIntegrationsSearchBitbucketserverReposResponse
func (c *ClientWithResponses) ApiAlmIntegrationsSearchBitbucketserverReposWithResponse(ctx context.Context, params *ApiAlmIntegrationsSearchBitbucketserverReposParams, reqEditors ...RequestEditorFn) (*ApiAlmIntegrationsSearchBitbucketserverReposResponse, error) {
	rsp, err := c.ApiAlmIntegrationsSearchBitbucketserverRepos(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAlmIntegrationsSearchBitbucketserverReposResponse(rsp)
}

// ApiAlmIntegrationsSearchGitlabReposWithResponse request returning *ApiAlmIntegrationsSearchGitlabReposResponse
func (c *ClientWithResponses) ApiAlmIntegrationsSearchGitlabReposWithResponse(ctx context.Context, params *ApiAlmIntegrationsSearchGitlabReposParams, reqEditors ...RequestEditorFn) (*ApiAlmIntegrationsSearchGitlabReposResponse, error) {
	rsp, err := c.ApiAlmIntegrationsSearchGitlabRepos(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAlmIntegrationsSearchGitlabReposResponse(rsp)
}

// ApiAlmIntegrationsSetPatWithResponse request returning *ApiAlmIntegrationsSetPatResponse
func (c *ClientWithResponses) ApiAlmIntegrationsSetPatWithResponse(ctx context.Context, params *ApiAlmIntegrationsSetPatParams, reqEditors ...RequestEditorFn) (*ApiAlmIntegrationsSetPatResponse, error) {
	rsp, err := c.ApiAlmIntegrationsSetPat(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAlmIntegrationsSetPatResponse(rsp)
}

// ApiAlmSettingsCountBindingWithResponse request returning *ApiAlmSettingsCountBindingResponse
func (c *ClientWithResponses) ApiAlmSettingsCountBindingWithResponse(ctx context.Context, params *ApiAlmSettingsCountBindingParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsCountBindingResponse, error) {
	rsp, err := c.ApiAlmSettingsCountBinding(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAlmSettingsCountBindingResponse(rsp)
}

// ApiAlmSettingsCreateAzureWithResponse request returning *ApiAlmSettingsCreateAzureResponse
func (c *ClientWithResponses) ApiAlmSettingsCreateAzureWithResponse(ctx context.Context, params *ApiAlmSettingsCreateAzureParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsCreateAzureResponse, error) {
	rsp, err := c.ApiAlmSettingsCreateAzure(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAlmSettingsCreateAzureResponse(rsp)
}

// ApiAlmSettingsCreateBitbucketWithResponse request returning *ApiAlmSettingsCreateBitbucketResponse
func (c *ClientWithResponses) ApiAlmSettingsCreateBitbucketWithResponse(ctx context.Context, params *ApiAlmSettingsCreateBitbucketParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsCreateBitbucketResponse, error) {
	rsp, err := c.ApiAlmSettingsCreateBitbucket(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAlmSettingsCreateBitbucketResponse(rsp)
}

// ApiAlmSettingsCreateBitbucketcloudWithResponse request returning *ApiAlmSettingsCreateBitbucketcloudResponse
func (c *ClientWithResponses) ApiAlmSettingsCreateBitbucketcloudWithResponse(ctx context.Context, params *ApiAlmSettingsCreateBitbucketcloudParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsCreateBitbucketcloudResponse, error) {
	rsp, err := c.ApiAlmSettingsCreateBitbucketcloud(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAlmSettingsCreateBitbucketcloudResponse(rsp)
}

// ApiAlmSettingsCreateGithubWithResponse request returning *ApiAlmSettingsCreateGithubResponse
func (c *ClientWithResponses) ApiAlmSettingsCreateGithubWithResponse(ctx context.Context, params *ApiAlmSettingsCreateGithubParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsCreateGithubResponse, error) {
	rsp, err := c.ApiAlmSettingsCreateGithub(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAlmSettingsCreateGithubResponse(rsp)
}

// ApiAlmSettingsCreateGitlabWithResponse request returning *ApiAlmSettingsCreateGitlabResponse
func (c *ClientWithResponses) ApiAlmSettingsCreateGitlabWithResponse(ctx context.Context, params *ApiAlmSettingsCreateGitlabParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsCreateGitlabResponse, error) {
	rsp, err := c.ApiAlmSettingsCreateGitlab(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAlmSettingsCreateGitlabResponse(rsp)
}

// ApiAlmSettingsDeleteWithResponse request returning *ApiAlmSettingsDeleteResponse
func (c *ClientWithResponses) ApiAlmSettingsDeleteWithResponse(ctx context.Context, params *ApiAlmSettingsDeleteParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsDeleteResponse, error) {
	rsp, err := c.ApiAlmSettingsDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAlmSettingsDeleteResponse(rsp)
}

// ApiAlmSettingsGetBindingWithResponse request returning *ApiAlmSettingsGetBindingResponse
func (c *ClientWithResponses) ApiAlmSettingsGetBindingWithResponse(ctx context.Context, params *ApiAlmSettingsGetBindingParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsGetBindingResponse, error) {
	rsp, err := c.ApiAlmSettingsGetBinding(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAlmSettingsGetBindingResponse(rsp)
}

// ApiAlmSettingsListWithResponse request returning *ApiAlmSettingsListResponse
func (c *ClientWithResponses) ApiAlmSettingsListWithResponse(ctx context.Context, params *ApiAlmSettingsListParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsListResponse, error) {
	rsp, err := c.ApiAlmSettingsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAlmSettingsListResponse(rsp)
}

// ApiAlmSettingsListDefinitionsWithResponse request returning *ApiAlmSettingsListDefinitionsResponse
func (c *ClientWithResponses) ApiAlmSettingsListDefinitionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiAlmSettingsListDefinitionsResponse, error) {
	rsp, err := c.ApiAlmSettingsListDefinitions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAlmSettingsListDefinitionsResponse(rsp)
}

// ApiAlmSettingsUpdateAzureWithResponse request returning *ApiAlmSettingsUpdateAzureResponse
func (c *ClientWithResponses) ApiAlmSettingsUpdateAzureWithResponse(ctx context.Context, params *ApiAlmSettingsUpdateAzureParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsUpdateAzureResponse, error) {
	rsp, err := c.ApiAlmSettingsUpdateAzure(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAlmSettingsUpdateAzureResponse(rsp)
}

// ApiAlmSettingsUpdateBitbucketWithResponse request returning *ApiAlmSettingsUpdateBitbucketResponse
func (c *ClientWithResponses) ApiAlmSettingsUpdateBitbucketWithResponse(ctx context.Context, params *ApiAlmSettingsUpdateBitbucketParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsUpdateBitbucketResponse, error) {
	rsp, err := c.ApiAlmSettingsUpdateBitbucket(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAlmSettingsUpdateBitbucketResponse(rsp)
}

// ApiAlmSettingsUpdateBitbucketcloudWithResponse request returning *ApiAlmSettingsUpdateBitbucketcloudResponse
func (c *ClientWithResponses) ApiAlmSettingsUpdateBitbucketcloudWithResponse(ctx context.Context, params *ApiAlmSettingsUpdateBitbucketcloudParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsUpdateBitbucketcloudResponse, error) {
	rsp, err := c.ApiAlmSettingsUpdateBitbucketcloud(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAlmSettingsUpdateBitbucketcloudResponse(rsp)
}

// ApiAlmSettingsUpdateGithubWithResponse request returning *ApiAlmSettingsUpdateGithubResponse
func (c *ClientWithResponses) ApiAlmSettingsUpdateGithubWithResponse(ctx context.Context, params *ApiAlmSettingsUpdateGithubParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsUpdateGithubResponse, error) {
	rsp, err := c.ApiAlmSettingsUpdateGithub(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAlmSettingsUpdateGithubResponse(rsp)
}

// ApiAlmSettingsUpdateGitlabWithResponse request returning *ApiAlmSettingsUpdateGitlabResponse
func (c *ClientWithResponses) ApiAlmSettingsUpdateGitlabWithResponse(ctx context.Context, params *ApiAlmSettingsUpdateGitlabParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsUpdateGitlabResponse, error) {
	rsp, err := c.ApiAlmSettingsUpdateGitlab(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAlmSettingsUpdateGitlabResponse(rsp)
}

// ApiAlmSettingsValidateWithResponse request returning *ApiAlmSettingsValidateResponse
func (c *ClientWithResponses) ApiAlmSettingsValidateWithResponse(ctx context.Context, params *ApiAlmSettingsValidateParams, reqEditors ...RequestEditorFn) (*ApiAlmSettingsValidateResponse, error) {
	rsp, err := c.ApiAlmSettingsValidate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAlmSettingsValidateResponse(rsp)
}

// ApiAnalysisCacheGetWithResponse request returning *ApiAnalysisCacheGetResponse
func (c *ClientWithResponses) ApiAnalysisCacheGetWithResponse(ctx context.Context, params *ApiAnalysisCacheGetParams, reqEditors ...RequestEditorFn) (*ApiAnalysisCacheGetResponse, error) {
	rsp, err := c.ApiAnalysisCacheGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAnalysisCacheGetResponse(rsp)
}

// ApiAuthenticationLoginWithResponse request returning *ApiAuthenticationLoginResponse
func (c *ClientWithResponses) ApiAuthenticationLoginWithResponse(ctx context.Context, params *ApiAuthenticationLoginParams, reqEditors ...RequestEditorFn) (*ApiAuthenticationLoginResponse, error) {
	rsp, err := c.ApiAuthenticationLogin(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAuthenticationLoginResponse(rsp)
}

// ApiAuthenticationLogoutWithResponse request returning *ApiAuthenticationLogoutResponse
func (c *ClientWithResponses) ApiAuthenticationLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiAuthenticationLogoutResponse, error) {
	rsp, err := c.ApiAuthenticationLogout(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAuthenticationLogoutResponse(rsp)
}

// ApiAuthenticationValidateWithResponse request returning *ApiAuthenticationValidateResponse
func (c *ClientWithResponses) ApiAuthenticationValidateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiAuthenticationValidateResponse, error) {
	rsp, err := c.ApiAuthenticationValidate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAuthenticationValidateResponse(rsp)
}

// ApiCeActivityWithResponse request returning *ApiCeActivityResponse
func (c *ClientWithResponses) ApiCeActivityWithResponse(ctx context.Context, params *ApiCeActivityParams, reqEditors ...RequestEditorFn) (*ApiCeActivityResponse, error) {
	rsp, err := c.ApiCeActivity(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiCeActivityResponse(rsp)
}

// ApiCeActivityStatusWithResponse request returning *ApiCeActivityStatusResponse
func (c *ClientWithResponses) ApiCeActivityStatusWithResponse(ctx context.Context, params *ApiCeActivityStatusParams, reqEditors ...RequestEditorFn) (*ApiCeActivityStatusResponse, error) {
	rsp, err := c.ApiCeActivityStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiCeActivityStatusResponse(rsp)
}

// ApiCeComponentWithResponse request returning *ApiCeComponentResponse
func (c *ClientWithResponses) ApiCeComponentWithResponse(ctx context.Context, params *ApiCeComponentParams, reqEditors ...RequestEditorFn) (*ApiCeComponentResponse, error) {
	rsp, err := c.ApiCeComponent(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiCeComponentResponse(rsp)
}

// ApiCeTaskWithResponse request returning *ApiCeTaskResponse
func (c *ClientWithResponses) ApiCeTaskWithResponse(ctx context.Context, params *ApiCeTaskParams, reqEditors ...RequestEditorFn) (*ApiCeTaskResponse, error) {
	rsp, err := c.ApiCeTask(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiCeTaskResponse(rsp)
}

// ApiComponentsSearchWithResponse request returning *ApiComponentsSearchResponse
func (c *ClientWithResponses) ApiComponentsSearchWithResponse(ctx context.Context, params *ApiComponentsSearchParams, reqEditors ...RequestEditorFn) (*ApiComponentsSearchResponse, error) {
	rsp, err := c.ApiComponentsSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiComponentsSearchResponse(rsp)
}

// ApiComponentsShowWithResponse request returning *ApiComponentsShowResponse
func (c *ClientWithResponses) ApiComponentsShowWithResponse(ctx context.Context, params *ApiComponentsShowParams, reqEditors ...RequestEditorFn) (*ApiComponentsShowResponse, error) {
	rsp, err := c.ApiComponentsShow(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiComponentsShowResponse(rsp)
}

// ApiComponentsTreeWithResponse request returning *ApiComponentsTreeResponse
func (c *ClientWithResponses) ApiComponentsTreeWithResponse(ctx context.Context, params *ApiComponentsTreeParams, reqEditors ...RequestEditorFn) (*ApiComponentsTreeResponse, error) {
	rsp, err := c.ApiComponentsTree(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiComponentsTreeResponse(rsp)
}

// ApiDuplicationsShowWithResponse request returning *ApiDuplicationsShowResponse
func (c *ClientWithResponses) ApiDuplicationsShowWithResponse(ctx context.Context, params *ApiDuplicationsShowParams, reqEditors ...RequestEditorFn) (*ApiDuplicationsShowResponse, error) {
	rsp, err := c.ApiDuplicationsShow(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiDuplicationsShowResponse(rsp)
}

// ApiFavoritesAddWithResponse request returning *ApiFavoritesAddResponse
func (c *ClientWithResponses) ApiFavoritesAddWithResponse(ctx context.Context, params *ApiFavoritesAddParams, reqEditors ...RequestEditorFn) (*ApiFavoritesAddResponse, error) {
	rsp, err := c.ApiFavoritesAdd(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiFavoritesAddResponse(rsp)
}

// ApiFavoritesRemoveWithResponse request returning *ApiFavoritesRemoveResponse
func (c *ClientWithResponses) ApiFavoritesRemoveWithResponse(ctx context.Context, params *ApiFavoritesRemoveParams, reqEditors ...RequestEditorFn) (*ApiFavoritesRemoveResponse, error) {
	rsp, err := c.ApiFavoritesRemove(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiFavoritesRemoveResponse(rsp)
}

// ApiFavoritesSearchWithResponse request returning *ApiFavoritesSearchResponse
func (c *ClientWithResponses) ApiFavoritesSearchWithResponse(ctx context.Context, params *ApiFavoritesSearchParams, reqEditors ...RequestEditorFn) (*ApiFavoritesSearchResponse, error) {
	rsp, err := c.ApiFavoritesSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiFavoritesSearchResponse(rsp)
}

// ApiHotspotsSearchWithResponse request returning *ApiHotspotsSearchResponse
func (c *ClientWithResponses) ApiHotspotsSearchWithResponse(ctx context.Context, params *ApiHotspotsSearchParams, reqEditors ...RequestEditorFn) (*ApiHotspotsSearchResponse, error) {
	rsp, err := c.ApiHotspotsSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiHotspotsSearchResponse(rsp)
}

// ApiHotspotsShowWithResponse request returning *ApiHotspotsShowResponse
func (c *ClientWithResponses) ApiHotspotsShowWithResponse(ctx context.Context, params *ApiHotspotsShowParams, reqEditors ...RequestEditorFn) (*ApiHotspotsShowResponse, error) {
	rsp, err := c.ApiHotspotsShow(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiHotspotsShowResponse(rsp)
}

// ApiIssuesAddCommentWithResponse request returning *ApiIssuesAddCommentResponse
func (c *ClientWithResponses) ApiIssuesAddCommentWithResponse(ctx context.Context, params *ApiIssuesAddCommentParams, reqEditors ...RequestEditorFn) (*ApiIssuesAddCommentResponse, error) {
	rsp, err := c.ApiIssuesAddComment(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiIssuesAddCommentResponse(rsp)
}

// ApiIssuesAssignWithResponse request returning *ApiIssuesAssignResponse
func (c *ClientWithResponses) ApiIssuesAssignWithResponse(ctx context.Context, params *ApiIssuesAssignParams, reqEditors ...RequestEditorFn) (*ApiIssuesAssignResponse, error) {
	rsp, err := c.ApiIssuesAssign(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiIssuesAssignResponse(rsp)
}

// ApiIssuesAuthorsWithResponse request returning *ApiIssuesAuthorsResponse
func (c *ClientWithResponses) ApiIssuesAuthorsWithResponse(ctx context.Context, params *ApiIssuesAuthorsParams, reqEditors ...RequestEditorFn) (*ApiIssuesAuthorsResponse, error) {
	rsp, err := c.ApiIssuesAuthors(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiIssuesAuthorsResponse(rsp)
}

// ApiIssuesBulkChangeWithResponse request returning *ApiIssuesBulkChangeResponse
func (c *ClientWithResponses) ApiIssuesBulkChangeWithResponse(ctx context.Context, params *ApiIssuesBulkChangeParams, reqEditors ...RequestEditorFn) (*ApiIssuesBulkChangeResponse, error) {
	rsp, err := c.ApiIssuesBulkChange(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiIssuesBulkChangeResponse(rsp)
}

// ApiIssuesChangelogWithResponse request returning *ApiIssuesChangelogResponse
func (c *ClientWithResponses) ApiIssuesChangelogWithResponse(ctx context.Context, params *ApiIssuesChangelogParams, reqEditors ...RequestEditorFn) (*ApiIssuesChangelogResponse, error) {
	rsp, err := c.ApiIssuesChangelog(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiIssuesChangelogResponse(rsp)
}

// ApiIssuesDeleteCommentWithResponse request returning *ApiIssuesDeleteCommentResponse
func (c *ClientWithResponses) ApiIssuesDeleteCommentWithResponse(ctx context.Context, params *ApiIssuesDeleteCommentParams, reqEditors ...RequestEditorFn) (*ApiIssuesDeleteCommentResponse, error) {
	rsp, err := c.ApiIssuesDeleteComment(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiIssuesDeleteCommentResponse(rsp)
}

// ApiIssuesDoTransitionWithResponse request returning *ApiIssuesDoTransitionResponse
func (c *ClientWithResponses) ApiIssuesDoTransitionWithResponse(ctx context.Context, params *ApiIssuesDoTransitionParams, reqEditors ...RequestEditorFn) (*ApiIssuesDoTransitionResponse, error) {
	rsp, err := c.ApiIssuesDoTransition(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiIssuesDoTransitionResponse(rsp)
}

// ApiIssuesEditCommentWithResponse request returning *ApiIssuesEditCommentResponse
func (c *ClientWithResponses) ApiIssuesEditCommentWithResponse(ctx context.Context, params *ApiIssuesEditCommentParams, reqEditors ...RequestEditorFn) (*ApiIssuesEditCommentResponse, error) {
	rsp, err := c.ApiIssuesEditComment(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiIssuesEditCommentResponse(rsp)
}

// ApiIssuesReindexWithResponse request returning *ApiIssuesReindexResponse
func (c *ClientWithResponses) ApiIssuesReindexWithResponse(ctx context.Context, params *ApiIssuesReindexParams, reqEditors ...RequestEditorFn) (*ApiIssuesReindexResponse, error) {
	rsp, err := c.ApiIssuesReindex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiIssuesReindexResponse(rsp)
}

// ApiIssuesSearchWithResponse request returning *ApiIssuesSearchResponse
func (c *ClientWithResponses) ApiIssuesSearchWithResponse(ctx context.Context, params *ApiIssuesSearchParams, reqEditors ...RequestEditorFn) (*ApiIssuesSearchResponse, error) {
	rsp, err := c.ApiIssuesSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiIssuesSearchResponse(rsp)
}

// ApiIssuesSetSeverityWithResponse request returning *ApiIssuesSetSeverityResponse
func (c *ClientWithResponses) ApiIssuesSetSeverityWithResponse(ctx context.Context, params *ApiIssuesSetSeverityParams, reqEditors ...RequestEditorFn) (*ApiIssuesSetSeverityResponse, error) {
	rsp, err := c.ApiIssuesSetSeverity(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiIssuesSetSeverityResponse(rsp)
}

// ApiIssuesSetTagsWithResponse request returning *ApiIssuesSetTagsResponse
func (c *ClientWithResponses) ApiIssuesSetTagsWithResponse(ctx context.Context, params *ApiIssuesSetTagsParams, reqEditors ...RequestEditorFn) (*ApiIssuesSetTagsResponse, error) {
	rsp, err := c.ApiIssuesSetTags(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiIssuesSetTagsResponse(rsp)
}

// ApiIssuesSetTypeWithResponse request returning *ApiIssuesSetTypeResponse
func (c *ClientWithResponses) ApiIssuesSetTypeWithResponse(ctx context.Context, params *ApiIssuesSetTypeParams, reqEditors ...RequestEditorFn) (*ApiIssuesSetTypeResponse, error) {
	rsp, err := c.ApiIssuesSetType(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiIssuesSetTypeResponse(rsp)
}

// ApiIssuesTagsWithResponse request returning *ApiIssuesTagsResponse
func (c *ClientWithResponses) ApiIssuesTagsWithResponse(ctx context.Context, params *ApiIssuesTagsParams, reqEditors ...RequestEditorFn) (*ApiIssuesTagsResponse, error) {
	rsp, err := c.ApiIssuesTags(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiIssuesTagsResponse(rsp)
}

// ApiLanguagesListWithResponse request returning *ApiLanguagesListResponse
func (c *ClientWithResponses) ApiLanguagesListWithResponse(ctx context.Context, params *ApiLanguagesListParams, reqEditors ...RequestEditorFn) (*ApiLanguagesListResponse, error) {
	rsp, err := c.ApiLanguagesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiLanguagesListResponse(rsp)
}

// ApiMeasuresComponentWithResponse request returning *ApiMeasuresComponentResponse
func (c *ClientWithResponses) ApiMeasuresComponentWithResponse(ctx context.Context, params *ApiMeasuresComponentParams, reqEditors ...RequestEditorFn) (*ApiMeasuresComponentResponse, error) {
	rsp, err := c.ApiMeasuresComponent(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiMeasuresComponentResponse(rsp)
}

// ApiMeasuresComponentTreeWithResponse request returning *ApiMeasuresComponentTreeResponse
func (c *ClientWithResponses) ApiMeasuresComponentTreeWithResponse(ctx context.Context, params *ApiMeasuresComponentTreeParams, reqEditors ...RequestEditorFn) (*ApiMeasuresComponentTreeResponse, error) {
	rsp, err := c.ApiMeasuresComponentTree(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiMeasuresComponentTreeResponse(rsp)
}

// ApiMeasuresSearchHistoryWithResponse request returning *ApiMeasuresSearchHistoryResponse
func (c *ClientWithResponses) ApiMeasuresSearchHistoryWithResponse(ctx context.Context, params *ApiMeasuresSearchHistoryParams, reqEditors ...RequestEditorFn) (*ApiMeasuresSearchHistoryResponse, error) {
	rsp, err := c.ApiMeasuresSearchHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiMeasuresSearchHistoryResponse(rsp)
}

// ApiMetricsSearchWithResponse request returning *ApiMetricsSearchResponse
func (c *ClientWithResponses) ApiMetricsSearchWithResponse(ctx context.Context, params *ApiMetricsSearchParams, reqEditors ...RequestEditorFn) (*ApiMetricsSearchResponse, error) {
	rsp, err := c.ApiMetricsSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiMetricsSearchResponse(rsp)
}

// ApiMetricsTypesWithResponse request returning *ApiMetricsTypesResponse
func (c *ClientWithResponses) ApiMetricsTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiMetricsTypesResponse, error) {
	rsp, err := c.ApiMetricsTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiMetricsTypesResponse(rsp)
}

// ApiMonitoringMetricsWithResponse request returning *ApiMonitoringMetricsResponse
func (c *ClientWithResponses) ApiMonitoringMetricsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiMonitoringMetricsResponse, error) {
	rsp, err := c.ApiMonitoringMetrics(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiMonitoringMetricsResponse(rsp)
}

// ApiNewCodePeriodsListWithResponse request returning *ApiNewCodePeriodsListResponse
func (c *ClientWithResponses) ApiNewCodePeriodsListWithResponse(ctx context.Context, params *ApiNewCodePeriodsListParams, reqEditors ...RequestEditorFn) (*ApiNewCodePeriodsListResponse, error) {
	rsp, err := c.ApiNewCodePeriodsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiNewCodePeriodsListResponse(rsp)
}

// ApiNewCodePeriodsSetWithResponse request returning *ApiNewCodePeriodsSetResponse
func (c *ClientWithResponses) ApiNewCodePeriodsSetWithResponse(ctx context.Context, params *ApiNewCodePeriodsSetParams, reqEditors ...RequestEditorFn) (*ApiNewCodePeriodsSetResponse, error) {
	rsp, err := c.ApiNewCodePeriodsSet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiNewCodePeriodsSetResponse(rsp)
}

// ApiNewCodePeriodsShowWithResponse request returning *ApiNewCodePeriodsShowResponse
func (c *ClientWithResponses) ApiNewCodePeriodsShowWithResponse(ctx context.Context, params *ApiNewCodePeriodsShowParams, reqEditors ...RequestEditorFn) (*ApiNewCodePeriodsShowResponse, error) {
	rsp, err := c.ApiNewCodePeriodsShow(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiNewCodePeriodsShowResponse(rsp)
}

// ApiNewCodePeriodsUnsetWithResponse request returning *ApiNewCodePeriodsUnsetResponse
func (c *ClientWithResponses) ApiNewCodePeriodsUnsetWithResponse(ctx context.Context, params *ApiNewCodePeriodsUnsetParams, reqEditors ...RequestEditorFn) (*ApiNewCodePeriodsUnsetResponse, error) {
	rsp, err := c.ApiNewCodePeriodsUnset(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiNewCodePeriodsUnsetResponse(rsp)
}

// ApiNotificationsAddWithResponse request returning *ApiNotificationsAddResponse
func (c *ClientWithResponses) ApiNotificationsAddWithResponse(ctx context.Context, params *ApiNotificationsAddParams, reqEditors ...RequestEditorFn) (*ApiNotificationsAddResponse, error) {
	rsp, err := c.ApiNotificationsAdd(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiNotificationsAddResponse(rsp)
}

// ApiNotificationsListWithResponse request returning *ApiNotificationsListResponse
func (c *ClientWithResponses) ApiNotificationsListWithResponse(ctx context.Context, params *ApiNotificationsListParams, reqEditors ...RequestEditorFn) (*ApiNotificationsListResponse, error) {
	rsp, err := c.ApiNotificationsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiNotificationsListResponse(rsp)
}

// ApiNotificationsRemoveWithResponse request returning *ApiNotificationsRemoveResponse
func (c *ClientWithResponses) ApiNotificationsRemoveWithResponse(ctx context.Context, params *ApiNotificationsRemoveParams, reqEditors ...RequestEditorFn) (*ApiNotificationsRemoveResponse, error) {
	rsp, err := c.ApiNotificationsRemove(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiNotificationsRemoveResponse(rsp)
}

// ApiPermissionsAddGroupWithResponse request returning *ApiPermissionsAddGroupResponse
func (c *ClientWithResponses) ApiPermissionsAddGroupWithResponse(ctx context.Context, params *ApiPermissionsAddGroupParams, reqEditors ...RequestEditorFn) (*ApiPermissionsAddGroupResponse, error) {
	rsp, err := c.ApiPermissionsAddGroup(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPermissionsAddGroupResponse(rsp)
}

// ApiPermissionsAddGroupToTemplateWithResponse request returning *ApiPermissionsAddGroupToTemplateResponse
func (c *ClientWithResponses) ApiPermissionsAddGroupToTemplateWithResponse(ctx context.Context, params *ApiPermissionsAddGroupToTemplateParams, reqEditors ...RequestEditorFn) (*ApiPermissionsAddGroupToTemplateResponse, error) {
	rsp, err := c.ApiPermissionsAddGroupToTemplate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPermissionsAddGroupToTemplateResponse(rsp)
}

// ApiPermissionsAddProjectCreatorToTemplateWithResponse request returning *ApiPermissionsAddProjectCreatorToTemplateResponse
func (c *ClientWithResponses) ApiPermissionsAddProjectCreatorToTemplateWithResponse(ctx context.Context, params *ApiPermissionsAddProjectCreatorToTemplateParams, reqEditors ...RequestEditorFn) (*ApiPermissionsAddProjectCreatorToTemplateResponse, error) {
	rsp, err := c.ApiPermissionsAddProjectCreatorToTemplate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPermissionsAddProjectCreatorToTemplateResponse(rsp)
}

// ApiPermissionsAddUserWithResponse request returning *ApiPermissionsAddUserResponse
func (c *ClientWithResponses) ApiPermissionsAddUserWithResponse(ctx context.Context, params *ApiPermissionsAddUserParams, reqEditors ...RequestEditorFn) (*ApiPermissionsAddUserResponse, error) {
	rsp, err := c.ApiPermissionsAddUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPermissionsAddUserResponse(rsp)
}

// ApiPermissionsAddUserToTemplateWithResponse request returning *ApiPermissionsAddUserToTemplateResponse
func (c *ClientWithResponses) ApiPermissionsAddUserToTemplateWithResponse(ctx context.Context, params *ApiPermissionsAddUserToTemplateParams, reqEditors ...RequestEditorFn) (*ApiPermissionsAddUserToTemplateResponse, error) {
	rsp, err := c.ApiPermissionsAddUserToTemplate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPermissionsAddUserToTemplateResponse(rsp)
}

// ApiPermissionsApplyTemplateWithResponse request returning *ApiPermissionsApplyTemplateResponse
func (c *ClientWithResponses) ApiPermissionsApplyTemplateWithResponse(ctx context.Context, params *ApiPermissionsApplyTemplateParams, reqEditors ...RequestEditorFn) (*ApiPermissionsApplyTemplateResponse, error) {
	rsp, err := c.ApiPermissionsApplyTemplate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPermissionsApplyTemplateResponse(rsp)
}

// ApiPermissionsBulkApplyTemplateWithResponse request returning *ApiPermissionsBulkApplyTemplateResponse
func (c *ClientWithResponses) ApiPermissionsBulkApplyTemplateWithResponse(ctx context.Context, params *ApiPermissionsBulkApplyTemplateParams, reqEditors ...RequestEditorFn) (*ApiPermissionsBulkApplyTemplateResponse, error) {
	rsp, err := c.ApiPermissionsBulkApplyTemplate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPermissionsBulkApplyTemplateResponse(rsp)
}

// ApiPermissionsCreateTemplateWithResponse request returning *ApiPermissionsCreateTemplateResponse
func (c *ClientWithResponses) ApiPermissionsCreateTemplateWithResponse(ctx context.Context, params *ApiPermissionsCreateTemplateParams, reqEditors ...RequestEditorFn) (*ApiPermissionsCreateTemplateResponse, error) {
	rsp, err := c.ApiPermissionsCreateTemplate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPermissionsCreateTemplateResponse(rsp)
}

// ApiPermissionsDeleteTemplateWithResponse request returning *ApiPermissionsDeleteTemplateResponse
func (c *ClientWithResponses) ApiPermissionsDeleteTemplateWithResponse(ctx context.Context, params *ApiPermissionsDeleteTemplateParams, reqEditors ...RequestEditorFn) (*ApiPermissionsDeleteTemplateResponse, error) {
	rsp, err := c.ApiPermissionsDeleteTemplate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPermissionsDeleteTemplateResponse(rsp)
}

// ApiPermissionsRemoveGroupWithResponse request returning *ApiPermissionsRemoveGroupResponse
func (c *ClientWithResponses) ApiPermissionsRemoveGroupWithResponse(ctx context.Context, params *ApiPermissionsRemoveGroupParams, reqEditors ...RequestEditorFn) (*ApiPermissionsRemoveGroupResponse, error) {
	rsp, err := c.ApiPermissionsRemoveGroup(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPermissionsRemoveGroupResponse(rsp)
}

// ApiPermissionsRemoveGroupFromTemplateWithResponse request returning *ApiPermissionsRemoveGroupFromTemplateResponse
func (c *ClientWithResponses) ApiPermissionsRemoveGroupFromTemplateWithResponse(ctx context.Context, params *ApiPermissionsRemoveGroupFromTemplateParams, reqEditors ...RequestEditorFn) (*ApiPermissionsRemoveGroupFromTemplateResponse, error) {
	rsp, err := c.ApiPermissionsRemoveGroupFromTemplate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPermissionsRemoveGroupFromTemplateResponse(rsp)
}

// ApiPermissionsRemoveProjectCreatorFromTemplateWithResponse request returning *ApiPermissionsRemoveProjectCreatorFromTemplateResponse
func (c *ClientWithResponses) ApiPermissionsRemoveProjectCreatorFromTemplateWithResponse(ctx context.Context, params *ApiPermissionsRemoveProjectCreatorFromTemplateParams, reqEditors ...RequestEditorFn) (*ApiPermissionsRemoveProjectCreatorFromTemplateResponse, error) {
	rsp, err := c.ApiPermissionsRemoveProjectCreatorFromTemplate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPermissionsRemoveProjectCreatorFromTemplateResponse(rsp)
}

// ApiPermissionsRemoveUserWithResponse request returning *ApiPermissionsRemoveUserResponse
func (c *ClientWithResponses) ApiPermissionsRemoveUserWithResponse(ctx context.Context, params *ApiPermissionsRemoveUserParams, reqEditors ...RequestEditorFn) (*ApiPermissionsRemoveUserResponse, error) {
	rsp, err := c.ApiPermissionsRemoveUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPermissionsRemoveUserResponse(rsp)
}

// ApiPermissionsRemoveUserFromTemplateWithResponse request returning *ApiPermissionsRemoveUserFromTemplateResponse
func (c *ClientWithResponses) ApiPermissionsRemoveUserFromTemplateWithResponse(ctx context.Context, params *ApiPermissionsRemoveUserFromTemplateParams, reqEditors ...RequestEditorFn) (*ApiPermissionsRemoveUserFromTemplateResponse, error) {
	rsp, err := c.ApiPermissionsRemoveUserFromTemplate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPermissionsRemoveUserFromTemplateResponse(rsp)
}

// ApiPermissionsSearchTemplatesWithResponse request returning *ApiPermissionsSearchTemplatesResponse
func (c *ClientWithResponses) ApiPermissionsSearchTemplatesWithResponse(ctx context.Context, params *ApiPermissionsSearchTemplatesParams, reqEditors ...RequestEditorFn) (*ApiPermissionsSearchTemplatesResponse, error) {
	rsp, err := c.ApiPermissionsSearchTemplates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPermissionsSearchTemplatesResponse(rsp)
}

// ApiPermissionsSetDefaultTemplateWithResponse request returning *ApiPermissionsSetDefaultTemplateResponse
func (c *ClientWithResponses) ApiPermissionsSetDefaultTemplateWithResponse(ctx context.Context, params *ApiPermissionsSetDefaultTemplateParams, reqEditors ...RequestEditorFn) (*ApiPermissionsSetDefaultTemplateResponse, error) {
	rsp, err := c.ApiPermissionsSetDefaultTemplate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPermissionsSetDefaultTemplateResponse(rsp)
}

// ApiPermissionsUpdateTemplateWithResponse request returning *ApiPermissionsUpdateTemplateResponse
func (c *ClientWithResponses) ApiPermissionsUpdateTemplateWithResponse(ctx context.Context, params *ApiPermissionsUpdateTemplateParams, reqEditors ...RequestEditorFn) (*ApiPermissionsUpdateTemplateResponse, error) {
	rsp, err := c.ApiPermissionsUpdateTemplate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPermissionsUpdateTemplateResponse(rsp)
}

// ApiPluginsAvailableWithResponse request returning *ApiPluginsAvailableResponse
func (c *ClientWithResponses) ApiPluginsAvailableWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiPluginsAvailableResponse, error) {
	rsp, err := c.ApiPluginsAvailable(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPluginsAvailableResponse(rsp)
}

// ApiPluginsCancelAllWithResponse request returning *ApiPluginsCancelAllResponse
func (c *ClientWithResponses) ApiPluginsCancelAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiPluginsCancelAllResponse, error) {
	rsp, err := c.ApiPluginsCancelAll(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPluginsCancelAllResponse(rsp)
}

// ApiPluginsInstallWithResponse request returning *ApiPluginsInstallResponse
func (c *ClientWithResponses) ApiPluginsInstallWithResponse(ctx context.Context, params *ApiPluginsInstallParams, reqEditors ...RequestEditorFn) (*ApiPluginsInstallResponse, error) {
	rsp, err := c.ApiPluginsInstall(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPluginsInstallResponse(rsp)
}

// ApiPluginsInstalledWithResponse request returning *ApiPluginsInstalledResponse
func (c *ClientWithResponses) ApiPluginsInstalledWithResponse(ctx context.Context, params *ApiPluginsInstalledParams, reqEditors ...RequestEditorFn) (*ApiPluginsInstalledResponse, error) {
	rsp, err := c.ApiPluginsInstalled(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPluginsInstalledResponse(rsp)
}

// ApiPluginsPendingWithResponse request returning *ApiPluginsPendingResponse
func (c *ClientWithResponses) ApiPluginsPendingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiPluginsPendingResponse, error) {
	rsp, err := c.ApiPluginsPending(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPluginsPendingResponse(rsp)
}

// ApiPluginsUninstallWithResponse request returning *ApiPluginsUninstallResponse
func (c *ClientWithResponses) ApiPluginsUninstallWithResponse(ctx context.Context, params *ApiPluginsUninstallParams, reqEditors ...RequestEditorFn) (*ApiPluginsUninstallResponse, error) {
	rsp, err := c.ApiPluginsUninstall(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPluginsUninstallResponse(rsp)
}

// ApiPluginsUpdateWithResponse request returning *ApiPluginsUpdateResponse
func (c *ClientWithResponses) ApiPluginsUpdateWithResponse(ctx context.Context, params *ApiPluginsUpdateParams, reqEditors ...RequestEditorFn) (*ApiPluginsUpdateResponse, error) {
	rsp, err := c.ApiPluginsUpdate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPluginsUpdateResponse(rsp)
}

// ApiPluginsUpdatesWithResponse request returning *ApiPluginsUpdatesResponse
func (c *ClientWithResponses) ApiPluginsUpdatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiPluginsUpdatesResponse, error) {
	rsp, err := c.ApiPluginsUpdates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPluginsUpdatesResponse(rsp)
}

// ApiProjectAnalysesCreateEventWithResponse request returning *ApiProjectAnalysesCreateEventResponse
func (c *ClientWithResponses) ApiProjectAnalysesCreateEventWithResponse(ctx context.Context, params *ApiProjectAnalysesCreateEventParams, reqEditors ...RequestEditorFn) (*ApiProjectAnalysesCreateEventResponse, error) {
	rsp, err := c.ApiProjectAnalysesCreateEvent(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectAnalysesCreateEventResponse(rsp)
}

// ApiProjectAnalysesDeleteWithResponse request returning *ApiProjectAnalysesDeleteResponse
func (c *ClientWithResponses) ApiProjectAnalysesDeleteWithResponse(ctx context.Context, params *ApiProjectAnalysesDeleteParams, reqEditors ...RequestEditorFn) (*ApiProjectAnalysesDeleteResponse, error) {
	rsp, err := c.ApiProjectAnalysesDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectAnalysesDeleteResponse(rsp)
}

// ApiProjectAnalysesDeleteEventWithResponse request returning *ApiProjectAnalysesDeleteEventResponse
func (c *ClientWithResponses) ApiProjectAnalysesDeleteEventWithResponse(ctx context.Context, params *ApiProjectAnalysesDeleteEventParams, reqEditors ...RequestEditorFn) (*ApiProjectAnalysesDeleteEventResponse, error) {
	rsp, err := c.ApiProjectAnalysesDeleteEvent(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectAnalysesDeleteEventResponse(rsp)
}

// ApiProjectAnalysesSearchWithResponse request returning *ApiProjectAnalysesSearchResponse
func (c *ClientWithResponses) ApiProjectAnalysesSearchWithResponse(ctx context.Context, params *ApiProjectAnalysesSearchParams, reqEditors ...RequestEditorFn) (*ApiProjectAnalysesSearchResponse, error) {
	rsp, err := c.ApiProjectAnalysesSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectAnalysesSearchResponse(rsp)
}

// ApiProjectAnalysesSetBaselineWithResponse request returning *ApiProjectAnalysesSetBaselineResponse
func (c *ClientWithResponses) ApiProjectAnalysesSetBaselineWithResponse(ctx context.Context, params *ApiProjectAnalysesSetBaselineParams, reqEditors ...RequestEditorFn) (*ApiProjectAnalysesSetBaselineResponse, error) {
	rsp, err := c.ApiProjectAnalysesSetBaseline(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectAnalysesSetBaselineResponse(rsp)
}

// ApiProjectAnalysesUnsetBaselineWithResponse request returning *ApiProjectAnalysesUnsetBaselineResponse
func (c *ClientWithResponses) ApiProjectAnalysesUnsetBaselineWithResponse(ctx context.Context, params *ApiProjectAnalysesUnsetBaselineParams, reqEditors ...RequestEditorFn) (*ApiProjectAnalysesUnsetBaselineResponse, error) {
	rsp, err := c.ApiProjectAnalysesUnsetBaseline(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectAnalysesUnsetBaselineResponse(rsp)
}

// ApiProjectAnalysesUpdateEventWithResponse request returning *ApiProjectAnalysesUpdateEventResponse
func (c *ClientWithResponses) ApiProjectAnalysesUpdateEventWithResponse(ctx context.Context, params *ApiProjectAnalysesUpdateEventParams, reqEditors ...RequestEditorFn) (*ApiProjectAnalysesUpdateEventResponse, error) {
	rsp, err := c.ApiProjectAnalysesUpdateEvent(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectAnalysesUpdateEventResponse(rsp)
}

// ApiProjectBadgesMeasureWithResponse request returning *ApiProjectBadgesMeasureResponse
func (c *ClientWithResponses) ApiProjectBadgesMeasureWithResponse(ctx context.Context, params *ApiProjectBadgesMeasureParams, reqEditors ...RequestEditorFn) (*ApiProjectBadgesMeasureResponse, error) {
	rsp, err := c.ApiProjectBadgesMeasure(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectBadgesMeasureResponse(rsp)
}

// ApiProjectBadgesQualityGateWithResponse request returning *ApiProjectBadgesQualityGateResponse
func (c *ClientWithResponses) ApiProjectBadgesQualityGateWithResponse(ctx context.Context, params *ApiProjectBadgesQualityGateParams, reqEditors ...RequestEditorFn) (*ApiProjectBadgesQualityGateResponse, error) {
	rsp, err := c.ApiProjectBadgesQualityGate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectBadgesQualityGateResponse(rsp)
}

// ApiProjectBadgesRenewTokenWithResponse request returning *ApiProjectBadgesRenewTokenResponse
func (c *ClientWithResponses) ApiProjectBadgesRenewTokenWithResponse(ctx context.Context, params *ApiProjectBadgesRenewTokenParams, reqEditors ...RequestEditorFn) (*ApiProjectBadgesRenewTokenResponse, error) {
	rsp, err := c.ApiProjectBadgesRenewToken(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectBadgesRenewTokenResponse(rsp)
}

// ApiProjectBadgesTokenWithResponse request returning *ApiProjectBadgesTokenResponse
func (c *ClientWithResponses) ApiProjectBadgesTokenWithResponse(ctx context.Context, params *ApiProjectBadgesTokenParams, reqEditors ...RequestEditorFn) (*ApiProjectBadgesTokenResponse, error) {
	rsp, err := c.ApiProjectBadgesToken(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectBadgesTokenResponse(rsp)
}

// ApiProjectBranchesDeleteWithResponse request returning *ApiProjectBranchesDeleteResponse
func (c *ClientWithResponses) ApiProjectBranchesDeleteWithResponse(ctx context.Context, params *ApiProjectBranchesDeleteParams, reqEditors ...RequestEditorFn) (*ApiProjectBranchesDeleteResponse, error) {
	rsp, err := c.ApiProjectBranchesDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectBranchesDeleteResponse(rsp)
}

// ApiProjectBranchesListWithResponse request returning *ApiProjectBranchesListResponse
func (c *ClientWithResponses) ApiProjectBranchesListWithResponse(ctx context.Context, params *ApiProjectBranchesListParams, reqEditors ...RequestEditorFn) (*ApiProjectBranchesListResponse, error) {
	rsp, err := c.ApiProjectBranchesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectBranchesListResponse(rsp)
}

// ApiProjectBranchesRenameWithResponse request returning *ApiProjectBranchesRenameResponse
func (c *ClientWithResponses) ApiProjectBranchesRenameWithResponse(ctx context.Context, params *ApiProjectBranchesRenameParams, reqEditors ...RequestEditorFn) (*ApiProjectBranchesRenameResponse, error) {
	rsp, err := c.ApiProjectBranchesRename(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectBranchesRenameResponse(rsp)
}

// ApiProjectBranchesSetAutomaticDeletionProtectionWithResponse request returning *ApiProjectBranchesSetAutomaticDeletionProtectionResponse
func (c *ClientWithResponses) ApiProjectBranchesSetAutomaticDeletionProtectionWithResponse(ctx context.Context, params *ApiProjectBranchesSetAutomaticDeletionProtectionParams, reqEditors ...RequestEditorFn) (*ApiProjectBranchesSetAutomaticDeletionProtectionResponse, error) {
	rsp, err := c.ApiProjectBranchesSetAutomaticDeletionProtection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectBranchesSetAutomaticDeletionProtectionResponse(rsp)
}

// ApiProjectDumpExportWithResponse request returning *ApiProjectDumpExportResponse
func (c *ClientWithResponses) ApiProjectDumpExportWithResponse(ctx context.Context, params *ApiProjectDumpExportParams, reqEditors ...RequestEditorFn) (*ApiProjectDumpExportResponse, error) {
	rsp, err := c.ApiProjectDumpExport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectDumpExportResponse(rsp)
}

// ApiProjectLinksCreateWithResponse request returning *ApiProjectLinksCreateResponse
func (c *ClientWithResponses) ApiProjectLinksCreateWithResponse(ctx context.Context, params *ApiProjectLinksCreateParams, reqEditors ...RequestEditorFn) (*ApiProjectLinksCreateResponse, error) {
	rsp, err := c.ApiProjectLinksCreate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectLinksCreateResponse(rsp)
}

// ApiProjectLinksDeleteWithResponse request returning *ApiProjectLinksDeleteResponse
func (c *ClientWithResponses) ApiProjectLinksDeleteWithResponse(ctx context.Context, params *ApiProjectLinksDeleteParams, reqEditors ...RequestEditorFn) (*ApiProjectLinksDeleteResponse, error) {
	rsp, err := c.ApiProjectLinksDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectLinksDeleteResponse(rsp)
}

// ApiProjectLinksSearchWithResponse request returning *ApiProjectLinksSearchResponse
func (c *ClientWithResponses) ApiProjectLinksSearchWithResponse(ctx context.Context, params *ApiProjectLinksSearchParams, reqEditors ...RequestEditorFn) (*ApiProjectLinksSearchResponse, error) {
	rsp, err := c.ApiProjectLinksSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectLinksSearchResponse(rsp)
}

// ApiProjectTagsSearchWithResponse request returning *ApiProjectTagsSearchResponse
func (c *ClientWithResponses) ApiProjectTagsSearchWithResponse(ctx context.Context, params *ApiProjectTagsSearchParams, reqEditors ...RequestEditorFn) (*ApiProjectTagsSearchResponse, error) {
	rsp, err := c.ApiProjectTagsSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectTagsSearchResponse(rsp)
}

// ApiProjectTagsSetWithResponse request returning *ApiProjectTagsSetResponse
func (c *ClientWithResponses) ApiProjectTagsSetWithResponse(ctx context.Context, params *ApiProjectTagsSetParams, reqEditors ...RequestEditorFn) (*ApiProjectTagsSetResponse, error) {
	rsp, err := c.ApiProjectTagsSet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectTagsSetResponse(rsp)
}

// ApiProjectsBulkDeleteWithResponse request returning *ApiProjectsBulkDeleteResponse
func (c *ClientWithResponses) ApiProjectsBulkDeleteWithResponse(ctx context.Context, params *ApiProjectsBulkDeleteParams, reqEditors ...RequestEditorFn) (*ApiProjectsBulkDeleteResponse, error) {
	rsp, err := c.ApiProjectsBulkDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectsBulkDeleteResponse(rsp)
}

// ApiProjectsCreateWithResponse request returning *ApiProjectsCreateResponse
func (c *ClientWithResponses) ApiProjectsCreateWithResponse(ctx context.Context, params *ApiProjectsCreateParams, reqEditors ...RequestEditorFn) (*ApiProjectsCreateResponse, error) {
	rsp, err := c.ApiProjectsCreate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectsCreateResponse(rsp)
}

// ApiProjectsDeleteWithResponse request returning *ApiProjectsDeleteResponse
func (c *ClientWithResponses) ApiProjectsDeleteWithResponse(ctx context.Context, params *ApiProjectsDeleteParams, reqEditors ...RequestEditorFn) (*ApiProjectsDeleteResponse, error) {
	rsp, err := c.ApiProjectsDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectsDeleteResponse(rsp)
}

// ApiProjectsSearchWithResponse request returning *ApiProjectsSearchResponse
func (c *ClientWithResponses) ApiProjectsSearchWithResponse(ctx context.Context, params *ApiProjectsSearchParams, reqEditors ...RequestEditorFn) (*ApiProjectsSearchResponse, error) {
	rsp, err := c.ApiProjectsSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectsSearchResponse(rsp)
}

// ApiProjectsUpdateKeyWithResponse request returning *ApiProjectsUpdateKeyResponse
func (c *ClientWithResponses) ApiProjectsUpdateKeyWithResponse(ctx context.Context, params *ApiProjectsUpdateKeyParams, reqEditors ...RequestEditorFn) (*ApiProjectsUpdateKeyResponse, error) {
	rsp, err := c.ApiProjectsUpdateKey(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectsUpdateKeyResponse(rsp)
}

// ApiProjectsUpdateVisibilityWithResponse request returning *ApiProjectsUpdateVisibilityResponse
func (c *ClientWithResponses) ApiProjectsUpdateVisibilityWithResponse(ctx context.Context, params *ApiProjectsUpdateVisibilityParams, reqEditors ...RequestEditorFn) (*ApiProjectsUpdateVisibilityResponse, error) {
	rsp, err := c.ApiProjectsUpdateVisibility(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiProjectsUpdateVisibilityResponse(rsp)
}

// ApiQualitygatesCopyWithResponse request returning *ApiQualitygatesCopyResponse
func (c *ClientWithResponses) ApiQualitygatesCopyWithResponse(ctx context.Context, params *ApiQualitygatesCopyParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesCopyResponse, error) {
	rsp, err := c.ApiQualitygatesCopy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualitygatesCopyResponse(rsp)
}

// ApiQualitygatesCreateWithResponse request returning *ApiQualitygatesCreateResponse
func (c *ClientWithResponses) ApiQualitygatesCreateWithResponse(ctx context.Context, params *ApiQualitygatesCreateParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesCreateResponse, error) {
	rsp, err := c.ApiQualitygatesCreate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualitygatesCreateResponse(rsp)
}

// ApiQualitygatesCreateConditionWithResponse request returning *ApiQualitygatesCreateConditionResponse
func (c *ClientWithResponses) ApiQualitygatesCreateConditionWithResponse(ctx context.Context, params *ApiQualitygatesCreateConditionParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesCreateConditionResponse, error) {
	rsp, err := c.ApiQualitygatesCreateCondition(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualitygatesCreateConditionResponse(rsp)
}

// ApiQualitygatesDeleteConditionWithResponse request returning *ApiQualitygatesDeleteConditionResponse
func (c *ClientWithResponses) ApiQualitygatesDeleteConditionWithResponse(ctx context.Context, params *ApiQualitygatesDeleteConditionParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesDeleteConditionResponse, error) {
	rsp, err := c.ApiQualitygatesDeleteCondition(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualitygatesDeleteConditionResponse(rsp)
}

// ApiQualitygatesDeselectWithResponse request returning *ApiQualitygatesDeselectResponse
func (c *ClientWithResponses) ApiQualitygatesDeselectWithResponse(ctx context.Context, params *ApiQualitygatesDeselectParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesDeselectResponse, error) {
	rsp, err := c.ApiQualitygatesDeselect(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualitygatesDeselectResponse(rsp)
}

// ApiQualitygatesDestroyWithResponse request returning *ApiQualitygatesDestroyResponse
func (c *ClientWithResponses) ApiQualitygatesDestroyWithResponse(ctx context.Context, params *ApiQualitygatesDestroyParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesDestroyResponse, error) {
	rsp, err := c.ApiQualitygatesDestroy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualitygatesDestroyResponse(rsp)
}

// ApiQualitygatesGetByProjectWithResponse request returning *ApiQualitygatesGetByProjectResponse
func (c *ClientWithResponses) ApiQualitygatesGetByProjectWithResponse(ctx context.Context, params *ApiQualitygatesGetByProjectParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesGetByProjectResponse, error) {
	rsp, err := c.ApiQualitygatesGetByProject(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualitygatesGetByProjectResponse(rsp)
}

// ApiQualitygatesListWithResponse request returning *ApiQualitygatesListResponse
func (c *ClientWithResponses) ApiQualitygatesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiQualitygatesListResponse, error) {
	rsp, err := c.ApiQualitygatesList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualitygatesListResponse(rsp)
}

// ApiQualitygatesProjectStatusWithResponse request returning *ApiQualitygatesProjectStatusResponse
func (c *ClientWithResponses) ApiQualitygatesProjectStatusWithResponse(ctx context.Context, params *ApiQualitygatesProjectStatusParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesProjectStatusResponse, error) {
	rsp, err := c.ApiQualitygatesProjectStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualitygatesProjectStatusResponse(rsp)
}

// ApiQualitygatesRenameWithResponse request returning *ApiQualitygatesRenameResponse
func (c *ClientWithResponses) ApiQualitygatesRenameWithResponse(ctx context.Context, params *ApiQualitygatesRenameParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesRenameResponse, error) {
	rsp, err := c.ApiQualitygatesRename(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualitygatesRenameResponse(rsp)
}

// ApiQualitygatesSearchWithResponse request returning *ApiQualitygatesSearchResponse
func (c *ClientWithResponses) ApiQualitygatesSearchWithResponse(ctx context.Context, params *ApiQualitygatesSearchParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesSearchResponse, error) {
	rsp, err := c.ApiQualitygatesSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualitygatesSearchResponse(rsp)
}

// ApiQualitygatesSelectWithResponse request returning *ApiQualitygatesSelectResponse
func (c *ClientWithResponses) ApiQualitygatesSelectWithResponse(ctx context.Context, params *ApiQualitygatesSelectParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesSelectResponse, error) {
	rsp, err := c.ApiQualitygatesSelect(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualitygatesSelectResponse(rsp)
}

// ApiQualitygatesSetAsDefaultWithResponse request returning *ApiQualitygatesSetAsDefaultResponse
func (c *ClientWithResponses) ApiQualitygatesSetAsDefaultWithResponse(ctx context.Context, params *ApiQualitygatesSetAsDefaultParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesSetAsDefaultResponse, error) {
	rsp, err := c.ApiQualitygatesSetAsDefault(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualitygatesSetAsDefaultResponse(rsp)
}

// ApiQualitygatesShowWithResponse request returning *ApiQualitygatesShowResponse
func (c *ClientWithResponses) ApiQualitygatesShowWithResponse(ctx context.Context, params *ApiQualitygatesShowParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesShowResponse, error) {
	rsp, err := c.ApiQualitygatesShow(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualitygatesShowResponse(rsp)
}

// ApiQualitygatesUpdateConditionWithResponse request returning *ApiQualitygatesUpdateConditionResponse
func (c *ClientWithResponses) ApiQualitygatesUpdateConditionWithResponse(ctx context.Context, params *ApiQualitygatesUpdateConditionParams, reqEditors ...RequestEditorFn) (*ApiQualitygatesUpdateConditionResponse, error) {
	rsp, err := c.ApiQualitygatesUpdateCondition(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualitygatesUpdateConditionResponse(rsp)
}

// ApiQualityprofilesActivateRuleWithResponse request returning *ApiQualityprofilesActivateRuleResponse
func (c *ClientWithResponses) ApiQualityprofilesActivateRuleWithResponse(ctx context.Context, params *ApiQualityprofilesActivateRuleParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesActivateRuleResponse, error) {
	rsp, err := c.ApiQualityprofilesActivateRule(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualityprofilesActivateRuleResponse(rsp)
}

// ApiQualityprofilesActivateRulesWithResponse request returning *ApiQualityprofilesActivateRulesResponse
func (c *ClientWithResponses) ApiQualityprofilesActivateRulesWithResponse(ctx context.Context, params *ApiQualityprofilesActivateRulesParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesActivateRulesResponse, error) {
	rsp, err := c.ApiQualityprofilesActivateRules(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualityprofilesActivateRulesResponse(rsp)
}

// ApiQualityprofilesAddProjectWithResponse request returning *ApiQualityprofilesAddProjectResponse
func (c *ClientWithResponses) ApiQualityprofilesAddProjectWithResponse(ctx context.Context, params *ApiQualityprofilesAddProjectParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesAddProjectResponse, error) {
	rsp, err := c.ApiQualityprofilesAddProject(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualityprofilesAddProjectResponse(rsp)
}

// ApiQualityprofilesBackupWithResponse request returning *ApiQualityprofilesBackupResponse
func (c *ClientWithResponses) ApiQualityprofilesBackupWithResponse(ctx context.Context, params *ApiQualityprofilesBackupParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesBackupResponse, error) {
	rsp, err := c.ApiQualityprofilesBackup(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualityprofilesBackupResponse(rsp)
}

// ApiQualityprofilesChangeParentWithResponse request returning *ApiQualityprofilesChangeParentResponse
func (c *ClientWithResponses) ApiQualityprofilesChangeParentWithResponse(ctx context.Context, params *ApiQualityprofilesChangeParentParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesChangeParentResponse, error) {
	rsp, err := c.ApiQualityprofilesChangeParent(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualityprofilesChangeParentResponse(rsp)
}

// ApiQualityprofilesChangelogWithResponse request returning *ApiQualityprofilesChangelogResponse
func (c *ClientWithResponses) ApiQualityprofilesChangelogWithResponse(ctx context.Context, params *ApiQualityprofilesChangelogParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesChangelogResponse, error) {
	rsp, err := c.ApiQualityprofilesChangelog(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualityprofilesChangelogResponse(rsp)
}

// ApiQualityprofilesCopyWithResponse request returning *ApiQualityprofilesCopyResponse
func (c *ClientWithResponses) ApiQualityprofilesCopyWithResponse(ctx context.Context, params *ApiQualityprofilesCopyParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesCopyResponse, error) {
	rsp, err := c.ApiQualityprofilesCopy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualityprofilesCopyResponse(rsp)
}

// ApiQualityprofilesCreateWithResponse request returning *ApiQualityprofilesCreateResponse
func (c *ClientWithResponses) ApiQualityprofilesCreateWithResponse(ctx context.Context, params *ApiQualityprofilesCreateParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesCreateResponse, error) {
	rsp, err := c.ApiQualityprofilesCreate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualityprofilesCreateResponse(rsp)
}

// ApiQualityprofilesDeactivateRuleWithResponse request returning *ApiQualityprofilesDeactivateRuleResponse
func (c *ClientWithResponses) ApiQualityprofilesDeactivateRuleWithResponse(ctx context.Context, params *ApiQualityprofilesDeactivateRuleParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesDeactivateRuleResponse, error) {
	rsp, err := c.ApiQualityprofilesDeactivateRule(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualityprofilesDeactivateRuleResponse(rsp)
}

// ApiQualityprofilesDeactivateRulesWithResponse request returning *ApiQualityprofilesDeactivateRulesResponse
func (c *ClientWithResponses) ApiQualityprofilesDeactivateRulesWithResponse(ctx context.Context, params *ApiQualityprofilesDeactivateRulesParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesDeactivateRulesResponse, error) {
	rsp, err := c.ApiQualityprofilesDeactivateRules(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualityprofilesDeactivateRulesResponse(rsp)
}

// ApiQualityprofilesDeleteWithResponse request returning *ApiQualityprofilesDeleteResponse
func (c *ClientWithResponses) ApiQualityprofilesDeleteWithResponse(ctx context.Context, params *ApiQualityprofilesDeleteParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesDeleteResponse, error) {
	rsp, err := c.ApiQualityprofilesDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualityprofilesDeleteResponse(rsp)
}

// ApiQualityprofilesExportWithResponse request returning *ApiQualityprofilesExportResponse
func (c *ClientWithResponses) ApiQualityprofilesExportWithResponse(ctx context.Context, params *ApiQualityprofilesExportParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesExportResponse, error) {
	rsp, err := c.ApiQualityprofilesExport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualityprofilesExportResponse(rsp)
}

// ApiQualityprofilesExportersWithResponse request returning *ApiQualityprofilesExportersResponse
func (c *ClientWithResponses) ApiQualityprofilesExportersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiQualityprofilesExportersResponse, error) {
	rsp, err := c.ApiQualityprofilesExporters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualityprofilesExportersResponse(rsp)
}

// ApiQualityprofilesImportersWithResponse request returning *ApiQualityprofilesImportersResponse
func (c *ClientWithResponses) ApiQualityprofilesImportersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiQualityprofilesImportersResponse, error) {
	rsp, err := c.ApiQualityprofilesImporters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualityprofilesImportersResponse(rsp)
}

// ApiQualityprofilesInheritanceWithResponse request returning *ApiQualityprofilesInheritanceResponse
func (c *ClientWithResponses) ApiQualityprofilesInheritanceWithResponse(ctx context.Context, params *ApiQualityprofilesInheritanceParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesInheritanceResponse, error) {
	rsp, err := c.ApiQualityprofilesInheritance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualityprofilesInheritanceResponse(rsp)
}

// ApiQualityprofilesProjectsWithResponse request returning *ApiQualityprofilesProjectsResponse
func (c *ClientWithResponses) ApiQualityprofilesProjectsWithResponse(ctx context.Context, params *ApiQualityprofilesProjectsParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesProjectsResponse, error) {
	rsp, err := c.ApiQualityprofilesProjects(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualityprofilesProjectsResponse(rsp)
}

// ApiQualityprofilesRemoveProjectWithResponse request returning *ApiQualityprofilesRemoveProjectResponse
func (c *ClientWithResponses) ApiQualityprofilesRemoveProjectWithResponse(ctx context.Context, params *ApiQualityprofilesRemoveProjectParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesRemoveProjectResponse, error) {
	rsp, err := c.ApiQualityprofilesRemoveProject(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualityprofilesRemoveProjectResponse(rsp)
}

// ApiQualityprofilesRenameWithResponse request returning *ApiQualityprofilesRenameResponse
func (c *ClientWithResponses) ApiQualityprofilesRenameWithResponse(ctx context.Context, params *ApiQualityprofilesRenameParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesRenameResponse, error) {
	rsp, err := c.ApiQualityprofilesRename(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualityprofilesRenameResponse(rsp)
}

// ApiQualityprofilesRestoreWithResponse request returning *ApiQualityprofilesRestoreResponse
func (c *ClientWithResponses) ApiQualityprofilesRestoreWithResponse(ctx context.Context, params *ApiQualityprofilesRestoreParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesRestoreResponse, error) {
	rsp, err := c.ApiQualityprofilesRestore(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualityprofilesRestoreResponse(rsp)
}

// ApiQualityprofilesSearchWithResponse request returning *ApiQualityprofilesSearchResponse
func (c *ClientWithResponses) ApiQualityprofilesSearchWithResponse(ctx context.Context, params *ApiQualityprofilesSearchParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesSearchResponse, error) {
	rsp, err := c.ApiQualityprofilesSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualityprofilesSearchResponse(rsp)
}

// ApiQualityprofilesSetDefaultWithResponse request returning *ApiQualityprofilesSetDefaultResponse
func (c *ClientWithResponses) ApiQualityprofilesSetDefaultWithResponse(ctx context.Context, params *ApiQualityprofilesSetDefaultParams, reqEditors ...RequestEditorFn) (*ApiQualityprofilesSetDefaultResponse, error) {
	rsp, err := c.ApiQualityprofilesSetDefault(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiQualityprofilesSetDefaultResponse(rsp)
}

// ApiRulesCreateWithResponse request returning *ApiRulesCreateResponse
func (c *ClientWithResponses) ApiRulesCreateWithResponse(ctx context.Context, params *ApiRulesCreateParams, reqEditors ...RequestEditorFn) (*ApiRulesCreateResponse, error) {
	rsp, err := c.ApiRulesCreate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiRulesCreateResponse(rsp)
}

// ApiRulesDeleteWithResponse request returning *ApiRulesDeleteResponse
func (c *ClientWithResponses) ApiRulesDeleteWithResponse(ctx context.Context, params *ApiRulesDeleteParams, reqEditors ...RequestEditorFn) (*ApiRulesDeleteResponse, error) {
	rsp, err := c.ApiRulesDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiRulesDeleteResponse(rsp)
}

// ApiRulesRepositoriesWithResponse request returning *ApiRulesRepositoriesResponse
func (c *ClientWithResponses) ApiRulesRepositoriesWithResponse(ctx context.Context, params *ApiRulesRepositoriesParams, reqEditors ...RequestEditorFn) (*ApiRulesRepositoriesResponse, error) {
	rsp, err := c.ApiRulesRepositories(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiRulesRepositoriesResponse(rsp)
}

// ApiRulesSearchWithResponse request returning *ApiRulesSearchResponse
func (c *ClientWithResponses) ApiRulesSearchWithResponse(ctx context.Context, params *ApiRulesSearchParams, reqEditors ...RequestEditorFn) (*ApiRulesSearchResponse, error) {
	rsp, err := c.ApiRulesSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiRulesSearchResponse(rsp)
}

// ApiRulesShowWithResponse request returning *ApiRulesShowResponse
func (c *ClientWithResponses) ApiRulesShowWithResponse(ctx context.Context, params *ApiRulesShowParams, reqEditors ...RequestEditorFn) (*ApiRulesShowResponse, error) {
	rsp, err := c.ApiRulesShow(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiRulesShowResponse(rsp)
}

// ApiRulesTagsWithResponse request returning *ApiRulesTagsResponse
func (c *ClientWithResponses) ApiRulesTagsWithResponse(ctx context.Context, params *ApiRulesTagsParams, reqEditors ...RequestEditorFn) (*ApiRulesTagsResponse, error) {
	rsp, err := c.ApiRulesTags(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiRulesTagsResponse(rsp)
}

// ApiRulesUpdateWithResponse request returning *ApiRulesUpdateResponse
func (c *ClientWithResponses) ApiRulesUpdateWithResponse(ctx context.Context, params *ApiRulesUpdateParams, reqEditors ...RequestEditorFn) (*ApiRulesUpdateResponse, error) {
	rsp, err := c.ApiRulesUpdate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiRulesUpdateResponse(rsp)
}

// ApiServerVersionWithResponse request returning *ApiServerVersionResponse
func (c *ClientWithResponses) ApiServerVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiServerVersionResponse, error) {
	rsp, err := c.ApiServerVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiServerVersionResponse(rsp)
}

// ApiSettingsListDefinitionsWithResponse request returning *ApiSettingsListDefinitionsResponse
func (c *ClientWithResponses) ApiSettingsListDefinitionsWithResponse(ctx context.Context, params *ApiSettingsListDefinitionsParams, reqEditors ...RequestEditorFn) (*ApiSettingsListDefinitionsResponse, error) {
	rsp, err := c.ApiSettingsListDefinitions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiSettingsListDefinitionsResponse(rsp)
}

// ApiSettingsResetWithResponse request returning *ApiSettingsResetResponse
func (c *ClientWithResponses) ApiSettingsResetWithResponse(ctx context.Context, params *ApiSettingsResetParams, reqEditors ...RequestEditorFn) (*ApiSettingsResetResponse, error) {
	rsp, err := c.ApiSettingsReset(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiSettingsResetResponse(rsp)
}

// ApiSettingsSetWithResponse request returning *ApiSettingsSetResponse
func (c *ClientWithResponses) ApiSettingsSetWithResponse(ctx context.Context, params *ApiSettingsSetParams, reqEditors ...RequestEditorFn) (*ApiSettingsSetResponse, error) {
	rsp, err := c.ApiSettingsSet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiSettingsSetResponse(rsp)
}

// ApiSettingsValuesWithResponse request returning *ApiSettingsValuesResponse
func (c *ClientWithResponses) ApiSettingsValuesWithResponse(ctx context.Context, params *ApiSettingsValuesParams, reqEditors ...RequestEditorFn) (*ApiSettingsValuesResponse, error) {
	rsp, err := c.ApiSettingsValues(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiSettingsValuesResponse(rsp)
}

// ApiSourcesRawWithResponse request returning *ApiSourcesRawResponse
func (c *ClientWithResponses) ApiSourcesRawWithResponse(ctx context.Context, params *ApiSourcesRawParams, reqEditors ...RequestEditorFn) (*ApiSourcesRawResponse, error) {
	rsp, err := c.ApiSourcesRaw(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiSourcesRawResponse(rsp)
}

// ApiSourcesScmWithResponse request returning *ApiSourcesScmResponse
func (c *ClientWithResponses) ApiSourcesScmWithResponse(ctx context.Context, params *ApiSourcesScmParams, reqEditors ...RequestEditorFn) (*ApiSourcesScmResponse, error) {
	rsp, err := c.ApiSourcesScm(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiSourcesScmResponse(rsp)
}

// ApiSourcesShowWithResponse request returning *ApiSourcesShowResponse
func (c *ClientWithResponses) ApiSourcesShowWithResponse(ctx context.Context, params *ApiSourcesShowParams, reqEditors ...RequestEditorFn) (*ApiSourcesShowResponse, error) {
	rsp, err := c.ApiSourcesShow(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiSourcesShowResponse(rsp)
}

// ApiSystemChangeLogLevelWithResponse request returning *ApiSystemChangeLogLevelResponse
func (c *ClientWithResponses) ApiSystemChangeLogLevelWithResponse(ctx context.Context, params *ApiSystemChangeLogLevelParams, reqEditors ...RequestEditorFn) (*ApiSystemChangeLogLevelResponse, error) {
	rsp, err := c.ApiSystemChangeLogLevel(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiSystemChangeLogLevelResponse(rsp)
}

// ApiSystemDbMigrationStatusWithResponse request returning *ApiSystemDbMigrationStatusResponse
func (c *ClientWithResponses) ApiSystemDbMigrationStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiSystemDbMigrationStatusResponse, error) {
	rsp, err := c.ApiSystemDbMigrationStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiSystemDbMigrationStatusResponse(rsp)
}

// ApiSystemHealthWithResponse request returning *ApiSystemHealthResponse
func (c *ClientWithResponses) ApiSystemHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiSystemHealthResponse, error) {
	rsp, err := c.ApiSystemHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiSystemHealthResponse(rsp)
}

// ApiSystemInfoWithResponse request returning *ApiSystemInfoResponse
func (c *ClientWithResponses) ApiSystemInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiSystemInfoResponse, error) {
	rsp, err := c.ApiSystemInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiSystemInfoResponse(rsp)
}

// ApiSystemLogsWithResponse request returning *ApiSystemLogsResponse
func (c *ClientWithResponses) ApiSystemLogsWithResponse(ctx context.Context, params *ApiSystemLogsParams, reqEditors ...RequestEditorFn) (*ApiSystemLogsResponse, error) {
	rsp, err := c.ApiSystemLogs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiSystemLogsResponse(rsp)
}

// ApiSystemMigrateDbWithResponse request returning *ApiSystemMigrateDbResponse
func (c *ClientWithResponses) ApiSystemMigrateDbWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiSystemMigrateDbResponse, error) {
	rsp, err := c.ApiSystemMigrateDb(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiSystemMigrateDbResponse(rsp)
}

// ApiSystemPingWithResponse request returning *ApiSystemPingResponse
func (c *ClientWithResponses) ApiSystemPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiSystemPingResponse, error) {
	rsp, err := c.ApiSystemPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiSystemPingResponse(rsp)
}

// ApiSystemRestartWithResponse request returning *ApiSystemRestartResponse
func (c *ClientWithResponses) ApiSystemRestartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiSystemRestartResponse, error) {
	rsp, err := c.ApiSystemRestart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiSystemRestartResponse(rsp)
}

// ApiSystemStatusWithResponse request returning *ApiSystemStatusResponse
func (c *ClientWithResponses) ApiSystemStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiSystemStatusResponse, error) {
	rsp, err := c.ApiSystemStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiSystemStatusResponse(rsp)
}

// ApiSystemUpgradesWithResponse request returning *ApiSystemUpgradesResponse
func (c *ClientWithResponses) ApiSystemUpgradesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiSystemUpgradesResponse, error) {
	rsp, err := c.ApiSystemUpgrades(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiSystemUpgradesResponse(rsp)
}

// ApiUserGroupsAddUserWithResponse request returning *ApiUserGroupsAddUserResponse
func (c *ClientWithResponses) ApiUserGroupsAddUserWithResponse(ctx context.Context, params *ApiUserGroupsAddUserParams, reqEditors ...RequestEditorFn) (*ApiUserGroupsAddUserResponse, error) {
	rsp, err := c.ApiUserGroupsAddUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUserGroupsAddUserResponse(rsp)
}

// ApiUserGroupsCreateWithResponse request returning *ApiUserGroupsCreateResponse
func (c *ClientWithResponses) ApiUserGroupsCreateWithResponse(ctx context.Context, params *ApiUserGroupsCreateParams, reqEditors ...RequestEditorFn) (*ApiUserGroupsCreateResponse, error) {
	rsp, err := c.ApiUserGroupsCreate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUserGroupsCreateResponse(rsp)
}

// ApiUserGroupsDeleteWithResponse request returning *ApiUserGroupsDeleteResponse
func (c *ClientWithResponses) ApiUserGroupsDeleteWithResponse(ctx context.Context, params *ApiUserGroupsDeleteParams, reqEditors ...RequestEditorFn) (*ApiUserGroupsDeleteResponse, error) {
	rsp, err := c.ApiUserGroupsDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUserGroupsDeleteResponse(rsp)
}

// ApiUserGroupsRemoveUserWithResponse request returning *ApiUserGroupsRemoveUserResponse
func (c *ClientWithResponses) ApiUserGroupsRemoveUserWithResponse(ctx context.Context, params *ApiUserGroupsRemoveUserParams, reqEditors ...RequestEditorFn) (*ApiUserGroupsRemoveUserResponse, error) {
	rsp, err := c.ApiUserGroupsRemoveUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUserGroupsRemoveUserResponse(rsp)
}

// ApiUserGroupsSearchWithResponse request returning *ApiUserGroupsSearchResponse
func (c *ClientWithResponses) ApiUserGroupsSearchWithResponse(ctx context.Context, params *ApiUserGroupsSearchParams, reqEditors ...RequestEditorFn) (*ApiUserGroupsSearchResponse, error) {
	rsp, err := c.ApiUserGroupsSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUserGroupsSearchResponse(rsp)
}

// ApiUserGroupsUpdateWithResponse request returning *ApiUserGroupsUpdateResponse
func (c *ClientWithResponses) ApiUserGroupsUpdateWithResponse(ctx context.Context, params *ApiUserGroupsUpdateParams, reqEditors ...RequestEditorFn) (*ApiUserGroupsUpdateResponse, error) {
	rsp, err := c.ApiUserGroupsUpdate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUserGroupsUpdateResponse(rsp)
}

// ApiUserGroupsUsersWithResponse request returning *ApiUserGroupsUsersResponse
func (c *ClientWithResponses) ApiUserGroupsUsersWithResponse(ctx context.Context, params *ApiUserGroupsUsersParams, reqEditors ...RequestEditorFn) (*ApiUserGroupsUsersResponse, error) {
	rsp, err := c.ApiUserGroupsUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUserGroupsUsersResponse(rsp)
}

// ApiUserTokensGenerateWithResponse request returning *ApiUserTokensGenerateResponse
func (c *ClientWithResponses) ApiUserTokensGenerateWithResponse(ctx context.Context, params *ApiUserTokensGenerateParams, reqEditors ...RequestEditorFn) (*ApiUserTokensGenerateResponse, error) {
	rsp, err := c.ApiUserTokensGenerate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUserTokensGenerateResponse(rsp)
}

// ApiUserTokensRevokeWithResponse request returning *ApiUserTokensRevokeResponse
func (c *ClientWithResponses) ApiUserTokensRevokeWithResponse(ctx context.Context, params *ApiUserTokensRevokeParams, reqEditors ...RequestEditorFn) (*ApiUserTokensRevokeResponse, error) {
	rsp, err := c.ApiUserTokensRevoke(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUserTokensRevokeResponse(rsp)
}

// ApiUserTokensSearchWithResponse request returning *ApiUserTokensSearchResponse
func (c *ClientWithResponses) ApiUserTokensSearchWithResponse(ctx context.Context, params *ApiUserTokensSearchParams, reqEditors ...RequestEditorFn) (*ApiUserTokensSearchResponse, error) {
	rsp, err := c.ApiUserTokensSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUserTokensSearchResponse(rsp)
}

// ApiUsersAnonymizeWithResponse request returning *ApiUsersAnonymizeResponse
func (c *ClientWithResponses) ApiUsersAnonymizeWithResponse(ctx context.Context, params *ApiUsersAnonymizeParams, reqEditors ...RequestEditorFn) (*ApiUsersAnonymizeResponse, error) {
	rsp, err := c.ApiUsersAnonymize(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUsersAnonymizeResponse(rsp)
}

// ApiUsersChangePasswordWithResponse request returning *ApiUsersChangePasswordResponse
func (c *ClientWithResponses) ApiUsersChangePasswordWithResponse(ctx context.Context, params *ApiUsersChangePasswordParams, reqEditors ...RequestEditorFn) (*ApiUsersChangePasswordResponse, error) {
	rsp, err := c.ApiUsersChangePassword(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUsersChangePasswordResponse(rsp)
}

// ApiUsersCreateWithResponse request returning *ApiUsersCreateResponse
func (c *ClientWithResponses) ApiUsersCreateWithResponse(ctx context.Context, params *ApiUsersCreateParams, reqEditors ...RequestEditorFn) (*ApiUsersCreateResponse, error) {
	rsp, err := c.ApiUsersCreate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUsersCreateResponse(rsp)
}

// ApiUsersDeactivateWithResponse request returning *ApiUsersDeactivateResponse
func (c *ClientWithResponses) ApiUsersDeactivateWithResponse(ctx context.Context, params *ApiUsersDeactivateParams, reqEditors ...RequestEditorFn) (*ApiUsersDeactivateResponse, error) {
	rsp, err := c.ApiUsersDeactivate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUsersDeactivateResponse(rsp)
}

// ApiUsersDismissSonarlintAdWithResponse request returning *ApiUsersDismissSonarlintAdResponse
func (c *ClientWithResponses) ApiUsersDismissSonarlintAdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiUsersDismissSonarlintAdResponse, error) {
	rsp, err := c.ApiUsersDismissSonarlintAd(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUsersDismissSonarlintAdResponse(rsp)
}

// ApiUsersGroupsWithResponse request returning *ApiUsersGroupsResponse
func (c *ClientWithResponses) ApiUsersGroupsWithResponse(ctx context.Context, params *ApiUsersGroupsParams, reqEditors ...RequestEditorFn) (*ApiUsersGroupsResponse, error) {
	rsp, err := c.ApiUsersGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUsersGroupsResponse(rsp)
}

// ApiUsersSearchWithResponse request returning *ApiUsersSearchResponse
func (c *ClientWithResponses) ApiUsersSearchWithResponse(ctx context.Context, params *ApiUsersSearchParams, reqEditors ...RequestEditorFn) (*ApiUsersSearchResponse, error) {
	rsp, err := c.ApiUsersSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUsersSearchResponse(rsp)
}

// ApiUsersUpdateWithResponse request returning *ApiUsersUpdateResponse
func (c *ClientWithResponses) ApiUsersUpdateWithResponse(ctx context.Context, params *ApiUsersUpdateParams, reqEditors ...RequestEditorFn) (*ApiUsersUpdateResponse, error) {
	rsp, err := c.ApiUsersUpdate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUsersUpdateResponse(rsp)
}

// ApiUsersUpdateIdentityProviderWithResponse request returning *ApiUsersUpdateIdentityProviderResponse
func (c *ClientWithResponses) ApiUsersUpdateIdentityProviderWithResponse(ctx context.Context, params *ApiUsersUpdateIdentityProviderParams, reqEditors ...RequestEditorFn) (*ApiUsersUpdateIdentityProviderResponse, error) {
	rsp, err := c.ApiUsersUpdateIdentityProvider(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUsersUpdateIdentityProviderResponse(rsp)
}

// ApiUsersUpdateLoginWithResponse request returning *ApiUsersUpdateLoginResponse
func (c *ClientWithResponses) ApiUsersUpdateLoginWithResponse(ctx context.Context, params *ApiUsersUpdateLoginParams, reqEditors ...RequestEditorFn) (*ApiUsersUpdateLoginResponse, error) {
	rsp, err := c.ApiUsersUpdateLogin(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUsersUpdateLoginResponse(rsp)
}

// ApiWebhooksCreateWithResponse request returning *ApiWebhooksCreateResponse
func (c *ClientWithResponses) ApiWebhooksCreateWithResponse(ctx context.Context, params *ApiWebhooksCreateParams, reqEditors ...RequestEditorFn) (*ApiWebhooksCreateResponse, error) {
	rsp, err := c.ApiWebhooksCreate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiWebhooksCreateResponse(rsp)
}

// ApiWebhooksDeleteWithResponse request returning *ApiWebhooksDeleteResponse
func (c *ClientWithResponses) ApiWebhooksDeleteWithResponse(ctx context.Context, params *ApiWebhooksDeleteParams, reqEditors ...RequestEditorFn) (*ApiWebhooksDeleteResponse, error) {
	rsp, err := c.ApiWebhooksDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiWebhooksDeleteResponse(rsp)
}

// ApiWebhooksDeliveriesWithResponse request returning *ApiWebhooksDeliveriesResponse
func (c *ClientWithResponses) ApiWebhooksDeliveriesWithResponse(ctx context.Context, params *ApiWebhooksDeliveriesParams, reqEditors ...RequestEditorFn) (*ApiWebhooksDeliveriesResponse, error) {
	rsp, err := c.ApiWebhooksDeliveries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiWebhooksDeliveriesResponse(rsp)
}

// ApiWebhooksDeliveryWithResponse request returning *ApiWebhooksDeliveryResponse
func (c *ClientWithResponses) ApiWebhooksDeliveryWithResponse(ctx context.Context, params *ApiWebhooksDeliveryParams, reqEditors ...RequestEditorFn) (*ApiWebhooksDeliveryResponse, error) {
	rsp, err := c.ApiWebhooksDelivery(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiWebhooksDeliveryResponse(rsp)
}

// ApiWebhooksListWithResponse request returning *ApiWebhooksListResponse
func (c *ClientWithResponses) ApiWebhooksListWithResponse(ctx context.Context, params *ApiWebhooksListParams, reqEditors ...RequestEditorFn) (*ApiWebhooksListResponse, error) {
	rsp, err := c.ApiWebhooksList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiWebhooksListResponse(rsp)
}

// ApiWebhooksUpdateWithResponse request returning *ApiWebhooksUpdateResponse
func (c *ClientWithResponses) ApiWebhooksUpdateWithResponse(ctx context.Context, params *ApiWebhooksUpdateParams, reqEditors ...RequestEditorFn) (*ApiWebhooksUpdateResponse, error) {
	rsp, err := c.ApiWebhooksUpdate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiWebhooksUpdateResponse(rsp)
}

// ApiWebservicesListWithResponse request returning *ApiWebservicesListResponse
func (c *ClientWithResponses) ApiWebservicesListWithResponse(ctx context.Context, params *ApiWebservicesListParams, reqEditors ...RequestEditorFn) (*ApiWebservicesListResponse, error) {
	rsp, err := c.ApiWebservicesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiWebservicesListResponse(rsp)
}

// ApiWebservicesResponseExampleWithResponse request returning *ApiWebservicesResponseExampleResponse
func (c *ClientWithResponses) ApiWebservicesResponseExampleWithResponse(ctx context.Context, params *ApiWebservicesResponseExampleParams, reqEditors ...RequestEditorFn) (*ApiWebservicesResponseExampleResponse, error) {
	rsp, err := c.ApiWebservicesResponseExample(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiWebservicesResponseExampleResponse(rsp)
}

// ParseApiAlmIntegrationsImportGitlabProjectResponse parses an HTTP response from a ApiAlmIntegrationsImportGitlabProjectWithResponse call
func ParseApiAlmIntegrationsImportGitlabProjectResponse(rsp *http.Response) (*ApiAlmIntegrationsImportGitlabProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAlmIntegrationsImportGitlabProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAlmIntegrationsListAzureProjectsResponse parses an HTTP response from a ApiAlmIntegrationsListAzureProjectsWithResponse call
func ParseApiAlmIntegrationsListAzureProjectsResponse(rsp *http.Response) (*ApiAlmIntegrationsListAzureProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAlmIntegrationsListAzureProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Projects *[]struct {
				Description *string `json:"description,omitempty"`
				Name        *string `json:"name,omitempty"`
			} `json:"projects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAlmIntegrationsListBitbucketserverProjectsResponse parses an HTTP response from a ApiAlmIntegrationsListBitbucketserverProjectsWithResponse call
func ParseApiAlmIntegrationsListBitbucketserverProjectsResponse(rsp *http.Response) (*ApiAlmIntegrationsListBitbucketserverProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAlmIntegrationsListBitbucketserverProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Projects *[]struct {
				Key  *string `json:"key,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"projects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAlmIntegrationsSearchAzureReposResponse parses an HTTP response from a ApiAlmIntegrationsSearchAzureReposWithResponse call
func ParseApiAlmIntegrationsSearchAzureReposResponse(rsp *http.Response) (*ApiAlmIntegrationsSearchAzureReposResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAlmIntegrationsSearchAzureReposResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Repositories *[]struct {
				Name        *string `json:"name,omitempty"`
				ProjectName *string `json:"projectName,omitempty"`
			} `json:"repositories,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAlmIntegrationsSearchBitbucketcloudReposResponse parses an HTTP response from a ApiAlmIntegrationsSearchBitbucketcloudReposWithResponse call
func ParseApiAlmIntegrationsSearchBitbucketcloudReposResponse(rsp *http.Response) (*ApiAlmIntegrationsSearchBitbucketcloudReposResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAlmIntegrationsSearchBitbucketcloudReposResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			IsLastPage *bool `json:"isLastPage,omitempty"`
			Paging     *struct {
				PageIndex *int `json:"pageIndex,omitempty"`
				PageSize  *int `json:"pageSize,omitempty"`
			} `json:"paging,omitempty"`
			Repositories *[]struct {
				Name       *string `json:"name,omitempty"`
				ProjectKey *string `json:"projectKey,omitempty"`
				Slug       *string `json:"slug,omitempty"`
				Uuid       *string `json:"uuid,omitempty"`
				Workspace  *string `json:"workspace,omitempty"`
			} `json:"repositories,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAlmIntegrationsSearchBitbucketserverReposResponse parses an HTTP response from a ApiAlmIntegrationsSearchBitbucketserverReposWithResponse call
func ParseApiAlmIntegrationsSearchBitbucketserverReposResponse(rsp *http.Response) (*ApiAlmIntegrationsSearchBitbucketserverReposResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAlmIntegrationsSearchBitbucketserverReposResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			IsLastPage   *bool `json:"isLastPage,omitempty"`
			Repositories *[]struct {
				Name       *string `json:"name,omitempty"`
				ProjectKey *string `json:"projectKey,omitempty"`
				Slug       *string `json:"slug,omitempty"`
				Uuid       *string `json:"uuid,omitempty"`
				Workspace  *string `json:"workspace,omitempty"`
			} `json:"repositories,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAlmIntegrationsSearchGitlabReposResponse parses an HTTP response from a ApiAlmIntegrationsSearchGitlabReposWithResponse call
func ParseApiAlmIntegrationsSearchGitlabReposResponse(rsp *http.Response) (*ApiAlmIntegrationsSearchGitlabReposResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAlmIntegrationsSearchGitlabReposResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Paging *struct {
				PageIndex *int `json:"pageIndex,omitempty"`
				PageSize  *int `json:"pageSize,omitempty"`
				Total     *int `json:"total,omitempty"`
			} `json:"paging,omitempty"`
			Repositories *[]struct {
				Id       *int    `json:"id,omitempty"`
				Name     *string `json:"name,omitempty"`
				PathName *string `json:"pathName,omitempty"`
				PathSlug *string `json:"pathSlug,omitempty"`
				Slug     *string `json:"slug,omitempty"`
				Url      *string `json:"url,omitempty"`
			} `json:"repositories,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAlmIntegrationsSetPatResponse parses an HTTP response from a ApiAlmIntegrationsSetPatWithResponse call
func ParseApiAlmIntegrationsSetPatResponse(rsp *http.Response) (*ApiAlmIntegrationsSetPatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAlmIntegrationsSetPatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAlmSettingsCountBindingResponse parses an HTTP response from a ApiAlmSettingsCountBindingWithResponse call
func ParseApiAlmSettingsCountBindingResponse(rsp *http.Response) (*ApiAlmSettingsCountBindingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAlmSettingsCountBindingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Key      *string `json:"key,omitempty"`
			Projects *int    `json:"projects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAlmSettingsCreateAzureResponse parses an HTTP response from a ApiAlmSettingsCreateAzureWithResponse call
func ParseApiAlmSettingsCreateAzureResponse(rsp *http.Response) (*ApiAlmSettingsCreateAzureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAlmSettingsCreateAzureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAlmSettingsCreateBitbucketResponse parses an HTTP response from a ApiAlmSettingsCreateBitbucketWithResponse call
func ParseApiAlmSettingsCreateBitbucketResponse(rsp *http.Response) (*ApiAlmSettingsCreateBitbucketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAlmSettingsCreateBitbucketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAlmSettingsCreateBitbucketcloudResponse parses an HTTP response from a ApiAlmSettingsCreateBitbucketcloudWithResponse call
func ParseApiAlmSettingsCreateBitbucketcloudResponse(rsp *http.Response) (*ApiAlmSettingsCreateBitbucketcloudResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAlmSettingsCreateBitbucketcloudResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAlmSettingsCreateGithubResponse parses an HTTP response from a ApiAlmSettingsCreateGithubWithResponse call
func ParseApiAlmSettingsCreateGithubResponse(rsp *http.Response) (*ApiAlmSettingsCreateGithubResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAlmSettingsCreateGithubResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAlmSettingsCreateGitlabResponse parses an HTTP response from a ApiAlmSettingsCreateGitlabWithResponse call
func ParseApiAlmSettingsCreateGitlabResponse(rsp *http.Response) (*ApiAlmSettingsCreateGitlabResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAlmSettingsCreateGitlabResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAlmSettingsDeleteResponse parses an HTTP response from a ApiAlmSettingsDeleteWithResponse call
func ParseApiAlmSettingsDeleteResponse(rsp *http.Response) (*ApiAlmSettingsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAlmSettingsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAlmSettingsGetBindingResponse parses an HTTP response from a ApiAlmSettingsGetBindingWithResponse call
func ParseApiAlmSettingsGetBindingResponse(rsp *http.Response) (*ApiAlmSettingsGetBindingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAlmSettingsGetBindingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Alm                   *string `json:"alm,omitempty"`
			Key                   *string `json:"key,omitempty"`
			Monorepo              *bool   `json:"monorepo,omitempty"`
			Repository            *string `json:"repository,omitempty"`
			SummaryCommentEnabled *bool   `json:"summaryCommentEnabled,omitempty"`
			Url                   *string `json:"url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAlmSettingsListResponse parses an HTTP response from a ApiAlmSettingsListWithResponse call
func ParseApiAlmSettingsListResponse(rsp *http.Response) (*ApiAlmSettingsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAlmSettingsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			AlmSettings *[]struct {
				Alm *string `json:"alm,omitempty"`
				Key *string `json:"key,omitempty"`
				Url *string `json:"url,omitempty"`
			} `json:"almSettings,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAlmSettingsListDefinitionsResponse parses an HTTP response from a ApiAlmSettingsListDefinitionsWithResponse call
func ParseApiAlmSettingsListDefinitionsResponse(rsp *http.Response) (*ApiAlmSettingsListDefinitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAlmSettingsListDefinitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Azure *[]struct {
				AppId    *string `json:"appId,omitempty"`
				ClientId *string `json:"clientId,omitempty"`
				Key      *string `json:"key,omitempty"`
				Url      *string `json:"url,omitempty"`
			} `json:"azure,omitempty"`
			Bitbucket *[]struct {
				AppId    *string `json:"appId,omitempty"`
				ClientId *string `json:"clientId,omitempty"`
				Key      *string `json:"key,omitempty"`
				Url      *string `json:"url,omitempty"`
			} `json:"bitbucket,omitempty"`
			Bitbucketcloud *[]struct {
				AppId    *string `json:"appId,omitempty"`
				ClientId *string `json:"clientId,omitempty"`
				Key      *string `json:"key,omitempty"`
				Url      *string `json:"url,omitempty"`
			} `json:"bitbucketcloud,omitempty"`
			Github *[]struct {
				AppId    *string `json:"appId,omitempty"`
				ClientId *string `json:"clientId,omitempty"`
				Key      *string `json:"key,omitempty"`
				Url      *string `json:"url,omitempty"`
			} `json:"github,omitempty"`
			Gitlab *[]struct {
				AppId    *string `json:"appId,omitempty"`
				ClientId *string `json:"clientId,omitempty"`
				Key      *string `json:"key,omitempty"`
				Url      *string `json:"url,omitempty"`
			} `json:"gitlab,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAlmSettingsUpdateAzureResponse parses an HTTP response from a ApiAlmSettingsUpdateAzureWithResponse call
func ParseApiAlmSettingsUpdateAzureResponse(rsp *http.Response) (*ApiAlmSettingsUpdateAzureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAlmSettingsUpdateAzureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAlmSettingsUpdateBitbucketResponse parses an HTTP response from a ApiAlmSettingsUpdateBitbucketWithResponse call
func ParseApiAlmSettingsUpdateBitbucketResponse(rsp *http.Response) (*ApiAlmSettingsUpdateBitbucketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAlmSettingsUpdateBitbucketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAlmSettingsUpdateBitbucketcloudResponse parses an HTTP response from a ApiAlmSettingsUpdateBitbucketcloudWithResponse call
func ParseApiAlmSettingsUpdateBitbucketcloudResponse(rsp *http.Response) (*ApiAlmSettingsUpdateBitbucketcloudResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAlmSettingsUpdateBitbucketcloudResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAlmSettingsUpdateGithubResponse parses an HTTP response from a ApiAlmSettingsUpdateGithubWithResponse call
func ParseApiAlmSettingsUpdateGithubResponse(rsp *http.Response) (*ApiAlmSettingsUpdateGithubResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAlmSettingsUpdateGithubResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAlmSettingsUpdateGitlabResponse parses an HTTP response from a ApiAlmSettingsUpdateGitlabWithResponse call
func ParseApiAlmSettingsUpdateGitlabResponse(rsp *http.Response) (*ApiAlmSettingsUpdateGitlabResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAlmSettingsUpdateGitlabResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAlmSettingsValidateResponse parses an HTTP response from a ApiAlmSettingsValidateWithResponse call
func ParseApiAlmSettingsValidateResponse(rsp *http.Response) (*ApiAlmSettingsValidateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAlmSettingsValidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAnalysisCacheGetResponse parses an HTTP response from a ApiAnalysisCacheGetWithResponse call
func ParseApiAnalysisCacheGetResponse(rsp *http.Response) (*ApiAnalysisCacheGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAnalysisCacheGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAuthenticationLoginResponse parses an HTTP response from a ApiAuthenticationLoginWithResponse call
func ParseApiAuthenticationLoginResponse(rsp *http.Response) (*ApiAuthenticationLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAuthenticationLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAuthenticationLogoutResponse parses an HTTP response from a ApiAuthenticationLogoutWithResponse call
func ParseApiAuthenticationLogoutResponse(rsp *http.Response) (*ApiAuthenticationLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAuthenticationLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiAuthenticationValidateResponse parses an HTTP response from a ApiAuthenticationValidateWithResponse call
func ParseApiAuthenticationValidateResponse(rsp *http.Response) (*ApiAuthenticationValidateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAuthenticationValidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Valid *bool `json:"valid,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiCeActivityResponse parses an HTTP response from a ApiCeActivityWithResponse call
func ParseApiCeActivityResponse(rsp *http.Response) (*ApiCeActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiCeActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Paging *struct {
				PageIndex *int `json:"pageIndex,omitempty"`
				PageSize  *int `json:"pageSize,omitempty"`
				Total     *int `json:"total,omitempty"`
			} `json:"paging,omitempty"`
			Tasks *[]struct {
				AnalysisId         *string `json:"analysisId,omitempty"`
				ComponentId        *string `json:"componentId,omitempty"`
				ComponentKey       *string `json:"componentKey,omitempty"`
				ComponentName      *string `json:"componentName,omitempty"`
				ComponentQualifier *string `json:"componentQualifier,omitempty"`
				ExecutedAt         *string `json:"executedAt,omitempty"`
				ExecutionTimeMs    *int    `json:"executionTimeMs,omitempty"`
				HasErrorStacktrace *bool   `json:"hasErrorStacktrace,omitempty"`
				HasScannerContext  *bool   `json:"hasScannerContext,omitempty"`
				Id                 *string `json:"id,omitempty"`
				Logs               *bool   `json:"logs,omitempty"`
				Organization       *string `json:"organization,omitempty"`
				StartedAt          *string `json:"startedAt,omitempty"`
				Status             *string `json:"status,omitempty"`
				SubmittedAt        *string `json:"submittedAt,omitempty"`
				SubmitterLogin     *string `json:"submitterLogin,omitempty"`
				Type               *string `json:"type,omitempty"`
			} `json:"tasks,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiCeActivityStatusResponse parses an HTTP response from a ApiCeActivityStatusWithResponse call
func ParseApiCeActivityStatusResponse(rsp *http.Response) (*ApiCeActivityStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiCeActivityStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Failing     *int `json:"failing,omitempty"`
			InProgress  *int `json:"inProgress,omitempty"`
			Pending     *int `json:"pending,omitempty"`
			PendingTime *int `json:"pendingTime,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiCeComponentResponse parses an HTTP response from a ApiCeComponentWithResponse call
func ParseApiCeComponentResponse(rsp *http.Response) (*ApiCeComponentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiCeComponentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Current *struct {
				AnalysisId         *string `json:"analysisId,omitempty"`
				ComponentId        *string `json:"componentId,omitempty"`
				ComponentKey       *string `json:"componentKey,omitempty"`
				ComponentName      *string `json:"componentName,omitempty"`
				ComponentQualifier *string `json:"componentQualifier,omitempty"`
				ErrorMessage       *string `json:"errorMessage,omitempty"`
				ErrorType          *string `json:"errorType,omitempty"`
				ExecutionTimeMs    *int    `json:"executionTimeMs,omitempty"`
				FinishedAt         *string `json:"finishedAt,omitempty"`
				HasErrorStacktrace *bool   `json:"hasErrorStacktrace,omitempty"`
				HasScannerContext  *bool   `json:"hasScannerContext,omitempty"`
				Id                 *string `json:"id,omitempty"`
				Logs               *bool   `json:"logs,omitempty"`
				Organization       *string `json:"organization,omitempty"`
				StartedAt          *string `json:"startedAt,omitempty"`
				Status             *string `json:"status,omitempty"`
				SubmittedAt        *string `json:"submittedAt,omitempty"`
				Type               *string `json:"type,omitempty"`
			} `json:"current,omitempty"`
			Queue *[]struct {
				ComponentId        *string `json:"componentId,omitempty"`
				ComponentKey       *string `json:"componentKey,omitempty"`
				ComponentName      *string `json:"componentName,omitempty"`
				ComponentQualifier *string `json:"componentQualifier,omitempty"`
				Id                 *string `json:"id,omitempty"`
				Logs               *bool   `json:"logs,omitempty"`
				Organization       *string `json:"organization,omitempty"`
				Status             *string `json:"status,omitempty"`
				SubmittedAt        *string `json:"submittedAt,omitempty"`
				Type               *string `json:"type,omitempty"`
			} `json:"queue,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiCeTaskResponse parses an HTTP response from a ApiCeTaskWithResponse call
func ParseApiCeTaskResponse(rsp *http.Response) (*ApiCeTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiCeTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Task *struct {
				AnalysisId         *string `json:"analysisId,omitempty"`
				ComponentId        *string `json:"componentId,omitempty"`
				ComponentKey       *string `json:"componentKey,omitempty"`
				ComponentName      *string `json:"componentName,omitempty"`
				ComponentQualifier *string `json:"componentQualifier,omitempty"`
				ErrorMessage       *string `json:"errorMessage,omitempty"`
				ErrorStacktrace    *string `json:"errorStacktrace,omitempty"`
				ExecutedAt         *string `json:"executedAt,omitempty"`
				ExecutionTimeMs    *int    `json:"executionTimeMs,omitempty"`
				HasErrorStacktrace *bool   `json:"hasErrorStacktrace,omitempty"`
				HasScannerContext  *bool   `json:"hasScannerContext,omitempty"`
				Id                 *string `json:"id,omitempty"`
				Logs               *bool   `json:"logs,omitempty"`
				Organization       *string `json:"organization,omitempty"`
				ScannerContext     *string `json:"scannerContext,omitempty"`
				StartedAt          *string `json:"startedAt,omitempty"`
				Status             *string `json:"status,omitempty"`
				SubmittedAt        *string `json:"submittedAt,omitempty"`
				Type               *string `json:"type,omitempty"`
			} `json:"task,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiComponentsSearchResponse parses an HTTP response from a ApiComponentsSearchWithResponse call
func ParseApiComponentsSearchResponse(rsp *http.Response) (*ApiComponentsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiComponentsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Components *[]struct {
				Key       *string `json:"key,omitempty"`
				Name      *string `json:"name,omitempty"`
				Project   *string `json:"project,omitempty"`
				Qualifier *string `json:"qualifier,omitempty"`
			} `json:"components,omitempty"`
			Paging *struct {
				PageIndex *int `json:"pageIndex,omitempty"`
				PageSize  *int `json:"pageSize,omitempty"`
				Total     *int `json:"total,omitempty"`
			} `json:"paging,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiComponentsShowResponse parses an HTTP response from a ApiComponentsShowWithResponse call
func ParseApiComponentsShowResponse(rsp *http.Response) (*ApiComponentsShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiComponentsShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Ancestors *[]struct {
				AnalysisDate *string `json:"analysisDate,omitempty"`
				Key          *string `json:"key,omitempty"`
				Name         *string `json:"name,omitempty"`
				Path         *string `json:"path,omitempty"`
				Qualifier    *string `json:"qualifier,omitempty"`
				Version      *string `json:"version,omitempty"`
			} `json:"ancestors,omitempty"`
			Component *struct {
				AnalysisDate   *string `json:"analysisDate,omitempty"`
				Key            *string `json:"key,omitempty"`
				Language       *string `json:"language,omitempty"`
				LeakPeriodDate *string `json:"leakPeriodDate,omitempty"`
				Name           *string `json:"name,omitempty"`
				Path           *string `json:"path,omitempty"`
				Qualifier      *string `json:"qualifier,omitempty"`
				Version        *string `json:"version,omitempty"`
			} `json:"component,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiComponentsTreeResponse parses an HTTP response from a ApiComponentsTreeWithResponse call
func ParseApiComponentsTreeResponse(rsp *http.Response) (*ApiComponentsTreeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiComponentsTreeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			BaseComponent *struct {
				Description *string   `json:"description,omitempty"`
				Key         *string   `json:"key,omitempty"`
				Qualifier   *string   `json:"qualifier,omitempty"`
				Tags        *[]string `json:"tags,omitempty"`
				Visibility  *string   `json:"visibility,omitempty"`
			} `json:"baseComponent,omitempty"`
			Components *[]struct {
				Key       *string `json:"key,omitempty"`
				Language  *string `json:"language,omitempty"`
				Name      *string `json:"name,omitempty"`
				Path      *string `json:"path,omitempty"`
				Qualifier *string `json:"qualifier,omitempty"`
			} `json:"components,omitempty"`
			Paging *struct {
				PageIndex *int `json:"pageIndex,omitempty"`
				PageSize  *int `json:"pageSize,omitempty"`
				Total     *int `json:"total,omitempty"`
			} `json:"paging,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiDuplicationsShowResponse parses an HTTP response from a ApiDuplicationsShowWithResponse call
func ParseApiDuplicationsShowResponse(rsp *http.Response) (*ApiDuplicationsShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiDuplicationsShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Duplications *[]struct {
				Blocks *[]struct {
					UnderscoreRef *string `json:"_ref,omitempty"`
					From          *int    `json:"from,omitempty"`
					Size          *int    `json:"size,omitempty"`
				} `json:"blocks,omitempty"`
			} `json:"duplications,omitempty"`
			Files *struct {
				N1 *struct {
					Key         *string `json:"key,omitempty"`
					Name        *string `json:"name,omitempty"`
					ProjectName *string `json:"projectName,omitempty"`
				} `json:"1,omitempty"`
				N2 *struct {
					Key         *string `json:"key,omitempty"`
					Name        *string `json:"name,omitempty"`
					ProjectName *string `json:"projectName,omitempty"`
				} `json:"2,omitempty"`
				N3 *struct {
					Key         *string `json:"key,omitempty"`
					Name        *string `json:"name,omitempty"`
					ProjectName *string `json:"projectName,omitempty"`
				} `json:"3,omitempty"`
			} `json:"files,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiFavoritesAddResponse parses an HTTP response from a ApiFavoritesAddWithResponse call
func ParseApiFavoritesAddResponse(rsp *http.Response) (*ApiFavoritesAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiFavoritesAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiFavoritesRemoveResponse parses an HTTP response from a ApiFavoritesRemoveWithResponse call
func ParseApiFavoritesRemoveResponse(rsp *http.Response) (*ApiFavoritesRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiFavoritesRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiFavoritesSearchResponse parses an HTTP response from a ApiFavoritesSearchWithResponse call
func ParseApiFavoritesSearchResponse(rsp *http.Response) (*ApiFavoritesSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiFavoritesSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Favorites *[]struct {
				Key       *string `json:"key,omitempty"`
				Name      *string `json:"name,omitempty"`
				Qualifier *string `json:"qualifier,omitempty"`
			} `json:"favorites,omitempty"`
			Paging *struct {
				PageIndex *int `json:"pageIndex,omitempty"`
				PageSize  *int `json:"pageSize,omitempty"`
				Total     *int `json:"total,omitempty"`
			} `json:"paging,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiHotspotsSearchResponse parses an HTTP response from a ApiHotspotsSearchWithResponse call
func ParseApiHotspotsSearchResponse(rsp *http.Response) (*ApiHotspotsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiHotspotsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Components *[]struct {
				Key       *string `json:"key,omitempty"`
				LongName  *string `json:"longName,omitempty"`
				Name      *string `json:"name,omitempty"`
				Path      *string `json:"path,omitempty"`
				Qualifier *string `json:"qualifier,omitempty"`
			} `json:"components,omitempty"`
			Hotspots *[]struct {
				Assignee     *string `json:"assignee,omitempty"`
				Author       *string `json:"author,omitempty"`
				Component    *string `json:"component,omitempty"`
				CreationDate *string `json:"creationDate,omitempty"`
				Flows        *[]struct {
					Locations *[]struct {
						Component      *string   `json:"component,omitempty"`
						Msg            *string   `json:"msg,omitempty"`
						MsgFormattings *[]string `json:"msgFormattings,omitempty"`
						TextRange      *struct {
							EndLine     *int `json:"endLine,omitempty"`
							EndOffset   *int `json:"endOffset,omitempty"`
							StartLine   *int `json:"startLine,omitempty"`
							StartOffset *int `json:"startOffset,omitempty"`
						} `json:"textRange,omitempty"`
					} `json:"locations,omitempty"`
				} `json:"flows,omitempty"`
				Key                      *string   `json:"key,omitempty"`
				Line                     *int      `json:"line,omitempty"`
				Message                  *string   `json:"message,omitempty"`
				MessageFormattings       *[]string `json:"messageFormattings,omitempty"`
				Project                  *string   `json:"project,omitempty"`
				RuleKey                  *string   `json:"ruleKey,omitempty"`
				SecurityCategory         *string   `json:"securityCategory,omitempty"`
				Status                   *string   `json:"status,omitempty"`
				UpdateDate               *string   `json:"updateDate,omitempty"`
				VulnerabilityProbability *string   `json:"vulnerabilityProbability,omitempty"`
			} `json:"hotspots,omitempty"`
			Paging *struct {
				PageIndex *int `json:"pageIndex,omitempty"`
				PageSize  *int `json:"pageSize,omitempty"`
				Total     *int `json:"total,omitempty"`
			} `json:"paging,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiHotspotsShowResponse parses an HTTP response from a ApiHotspotsShowWithResponse call
func ParseApiHotspotsShowResponse(rsp *http.Response) (*ApiHotspotsShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiHotspotsShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Assignee        *string `json:"assignee,omitempty"`
			Author          *string `json:"author,omitempty"`
			CanChangeStatus *bool   `json:"canChangeStatus,omitempty"`
			Changelog       *[]struct {
				Avatar       *string `json:"avatar,omitempty"`
				CreationDate *string `json:"creationDate,omitempty"`
				Diffs        *[]struct {
					Key      *string `json:"key,omitempty"`
					NewValue *string `json:"newValue,omitempty"`
					OldValue *string `json:"oldValue,omitempty"`
				} `json:"diffs,omitempty"`
				IsUserActive *bool   `json:"isUserActive,omitempty"`
				User         *string `json:"user,omitempty"`
				UserName     *string `json:"userName,omitempty"`
			} `json:"changelog,omitempty"`
			Comment *[]struct {
				CreatedAt *string `json:"createdAt,omitempty"`
				HtmlText  *string `json:"htmlText,omitempty"`
				Key       *string `json:"key,omitempty"`
				Login     *string `json:"login,omitempty"`
				Markdown  *string `json:"markdown,omitempty"`
			} `json:"comment,omitempty"`
			Component *struct {
				Key       *string `json:"key,omitempty"`
				LongName  *string `json:"longName,omitempty"`
				Name      *string `json:"name,omitempty"`
				Path      *string `json:"path,omitempty"`
				Qualifier *string `json:"qualifier,omitempty"`
			} `json:"component,omitempty"`
			CreationDate       *string `json:"creationDate,omitempty"`
			Hash               *string `json:"hash,omitempty"`
			Key                *string `json:"key,omitempty"`
			Line               *int    `json:"line,omitempty"`
			Message            *string `json:"message,omitempty"`
			MessageFormattings *[]struct {
				End   *int    `json:"end,omitempty"`
				Start *int    `json:"start,omitempty"`
				Type  *string `json:"type,omitempty"`
			} `json:"messageFormattings,omitempty"`
			Project *struct {
				Key       *string `json:"key,omitempty"`
				LongName  *string `json:"longName,omitempty"`
				Name      *string `json:"name,omitempty"`
				Qualifier *string `json:"qualifier,omitempty"`
			} `json:"project,omitempty"`
			Rule *struct {
				Key                      *string `json:"key,omitempty"`
				Name                     *string `json:"name,omitempty"`
				SecurityCategory         *string `json:"securityCategory,omitempty"`
				VulnerabilityProbability *string `json:"vulnerabilityProbability,omitempty"`
			} `json:"rule,omitempty"`
			Status     *string `json:"status,omitempty"`
			UpdateDate *string `json:"updateDate,omitempty"`
			Users      *[]struct {
				Active *bool   `json:"active,omitempty"`
				Login  *string `json:"login,omitempty"`
				Name   *string `json:"name,omitempty"`
			} `json:"users,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiIssuesAddCommentResponse parses an HTTP response from a ApiIssuesAddCommentWithResponse call
func ParseApiIssuesAddCommentResponse(rsp *http.Response) (*ApiIssuesAddCommentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiIssuesAddCommentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Components *[]struct {
				Enabled   *bool   `json:"enabled,omitempty"`
				Key       *string `json:"key,omitempty"`
				LongName  *string `json:"longName,omitempty"`
				Name      *string `json:"name,omitempty"`
				Path      *string `json:"path,omitempty"`
				Qualifier *string `json:"qualifier,omitempty"`
				Uuid      *string `json:"uuid,omitempty"`
			} `json:"components,omitempty"`
			Issue *struct {
				Actions  *[]string `json:"actions,omitempty"`
				Assignee *string   `json:"assignee,omitempty"`
				Author   *string   `json:"author,omitempty"`
				Comments *[]struct {
					CreatedAt *string `json:"createdAt,omitempty"`
					HtmlText  *string `json:"htmlText,omitempty"`
					Key       *string `json:"key,omitempty"`
					Login     *string `json:"login,omitempty"`
					Markdown  *string `json:"markdown,omitempty"`
					Updatable *bool   `json:"updatable,omitempty"`
				} `json:"comments,omitempty"`
				Component    *string `json:"component,omitempty"`
				CreationDate *string `json:"creationDate,omitempty"`
				Debt         *string `json:"debt,omitempty"`
				Effort       *string `json:"effort,omitempty"`
				Flows        *[]struct {
					Locations *[]struct {
						Component      *string   `json:"component,omitempty"`
						Msg            *string   `json:"msg,omitempty"`
						MsgFormattings *[]string `json:"msgFormattings,omitempty"`
						TextRange      *struct {
							EndLine     *int `json:"endLine,omitempty"`
							EndOffset   *int `json:"endOffset,omitempty"`
							StartLine   *int `json:"startLine,omitempty"`
							StartOffset *int `json:"startOffset,omitempty"`
						} `json:"textRange,omitempty"`
					} `json:"locations,omitempty"`
				} `json:"flows,omitempty"`
				Key                       *string   `json:"key,omitempty"`
				Line                      *int      `json:"line,omitempty"`
				Message                   *string   `json:"message,omitempty"`
				MsgFormattings            *[]string `json:"msgFormattings,omitempty"`
				Project                   *string   `json:"project,omitempty"`
				QuickFixAvailable         *bool     `json:"quickFixAvailable,omitempty"`
				Rule                      *string   `json:"rule,omitempty"`
				RuleDescriptionContextKey *string   `json:"ruleDescriptionContextKey,omitempty"`
				Scope                     *string   `json:"scope,omitempty"`
				Severity                  *string   `json:"severity,omitempty"`
				Status                    *string   `json:"status,omitempty"`
				Tags                      *[]string `json:"tags,omitempty"`
				TextRange                 *struct {
					EndLine     *int `json:"endLine,omitempty"`
					EndOffset   *int `json:"endOffset,omitempty"`
					StartLine   *int `json:"startLine,omitempty"`
					StartOffset *int `json:"startOffset,omitempty"`
				} `json:"textRange,omitempty"`
				Transitions *[]string `json:"transitions,omitempty"`
				Type        *string   `json:"type,omitempty"`
				UpdateDate  *string   `json:"updateDate,omitempty"`
			} `json:"issue,omitempty"`
			Rules *[]struct {
				Key      *string `json:"key,omitempty"`
				Lang     *string `json:"lang,omitempty"`
				LangName *string `json:"langName,omitempty"`
				Name     *string `json:"name,omitempty"`
				Status   *string `json:"status,omitempty"`
			} `json:"rules,omitempty"`
			Users *[]struct {
				Active *bool   `json:"active,omitempty"`
				Email  *string `json:"email,omitempty"`
				Login  *string `json:"login,omitempty"`
				Name   *string `json:"name,omitempty"`
			} `json:"users,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiIssuesAssignResponse parses an HTTP response from a ApiIssuesAssignWithResponse call
func ParseApiIssuesAssignResponse(rsp *http.Response) (*ApiIssuesAssignResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiIssuesAssignResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Components *[]struct {
				Enabled   *bool   `json:"enabled,omitempty"`
				Key       *string `json:"key,omitempty"`
				LongName  *string `json:"longName,omitempty"`
				Name      *string `json:"name,omitempty"`
				Path      *string `json:"path,omitempty"`
				Qualifier *string `json:"qualifier,omitempty"`
				Uuid      *string `json:"uuid,omitempty"`
			} `json:"components,omitempty"`
			Issue *struct {
				Actions  *[]string `json:"actions,omitempty"`
				Assignee *string   `json:"assignee,omitempty"`
				Author   *string   `json:"author,omitempty"`
				Comments *[]struct {
					CreatedAt *string `json:"createdAt,omitempty"`
					HtmlText  *string `json:"htmlText,omitempty"`
					Key       *string `json:"key,omitempty"`
					Login     *string `json:"login,omitempty"`
					Markdown  *string `json:"markdown,omitempty"`
					Updatable *bool   `json:"updatable,omitempty"`
				} `json:"comments,omitempty"`
				Component    *string `json:"component,omitempty"`
				CreationDate *string `json:"creationDate,omitempty"`
				Debt         *string `json:"debt,omitempty"`
				Effort       *string `json:"effort,omitempty"`
				Flows        *[]struct {
					Locations *[]struct {
						Component      *string   `json:"component,omitempty"`
						Msg            *string   `json:"msg,omitempty"`
						MsgFormattings *[]string `json:"msgFormattings,omitempty"`
						TextRange      *struct {
							EndLine     *int `json:"endLine,omitempty"`
							EndOffset   *int `json:"endOffset,omitempty"`
							StartLine   *int `json:"startLine,omitempty"`
							StartOffset *int `json:"startOffset,omitempty"`
						} `json:"textRange,omitempty"`
					} `json:"locations,omitempty"`
				} `json:"flows,omitempty"`
				Key                       *string   `json:"key,omitempty"`
				Line                      *int      `json:"line,omitempty"`
				Message                   *string   `json:"message,omitempty"`
				Project                   *string   `json:"project,omitempty"`
				Rule                      *string   `json:"rule,omitempty"`
				RuleDescriptionContextKey *string   `json:"ruleDescriptionContextKey,omitempty"`
				Severity                  *string   `json:"severity,omitempty"`
				Status                    *string   `json:"status,omitempty"`
				Tags                      *[]string `json:"tags,omitempty"`
				TextRange                 *struct {
					EndLine     *int `json:"endLine,omitempty"`
					EndOffset   *int `json:"endOffset,omitempty"`
					StartLine   *int `json:"startLine,omitempty"`
					StartOffset *int `json:"startOffset,omitempty"`
				} `json:"textRange,omitempty"`
				Transitions *[]string `json:"transitions,omitempty"`
				Type        *string   `json:"type,omitempty"`
				UpdateDate  *string   `json:"updateDate,omitempty"`
			} `json:"issue,omitempty"`
			Rules *[]struct {
				Key      *string `json:"key,omitempty"`
				Lang     *string `json:"lang,omitempty"`
				LangName *string `json:"langName,omitempty"`
				Name     *string `json:"name,omitempty"`
				Status   *string `json:"status,omitempty"`
			} `json:"rules,omitempty"`
			Users *[]struct {
				Active *bool   `json:"active,omitempty"`
				Email  *string `json:"email,omitempty"`
				Login  *string `json:"login,omitempty"`
				Name   *string `json:"name,omitempty"`
			} `json:"users,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiIssuesAuthorsResponse parses an HTTP response from a ApiIssuesAuthorsWithResponse call
func ParseApiIssuesAuthorsResponse(rsp *http.Response) (*ApiIssuesAuthorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiIssuesAuthorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Authors *[]string `json:"authors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiIssuesBulkChangeResponse parses an HTTP response from a ApiIssuesBulkChangeWithResponse call
func ParseApiIssuesBulkChangeResponse(rsp *http.Response) (*ApiIssuesBulkChangeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiIssuesBulkChangeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Failures *int `json:"failures,omitempty"`
			Ignored  *int `json:"ignored,omitempty"`
			Success  *int `json:"success,omitempty"`
			Total    *int `json:"total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiIssuesChangelogResponse parses an HTTP response from a ApiIssuesChangelogWithResponse call
func ParseApiIssuesChangelogResponse(rsp *http.Response) (*ApiIssuesChangelogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiIssuesChangelogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Changelog *[]struct {
				Avatar       *string `json:"avatar,omitempty"`
				CreationDate *string `json:"creationDate,omitempty"`
				Diffs        *[]struct {
					Key      *string `json:"key,omitempty"`
					NewValue *string `json:"newValue,omitempty"`
					OldValue *string `json:"oldValue,omitempty"`
				} `json:"diffs,omitempty"`
				ExternalUser  *string `json:"externalUser,omitempty"`
				IsUserActive  *bool   `json:"isUserActive,omitempty"`
				User          *string `json:"user,omitempty"`
				UserName      *string `json:"userName,omitempty"`
				WebhookSource *string `json:"webhookSource,omitempty"`
			} `json:"changelog,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiIssuesDeleteCommentResponse parses an HTTP response from a ApiIssuesDeleteCommentWithResponse call
func ParseApiIssuesDeleteCommentResponse(rsp *http.Response) (*ApiIssuesDeleteCommentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiIssuesDeleteCommentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Components *[]struct {
				Enabled   *bool   `json:"enabled,omitempty"`
				Key       *string `json:"key,omitempty"`
				LongName  *string `json:"longName,omitempty"`
				Name      *string `json:"name,omitempty"`
				Path      *string `json:"path,omitempty"`
				Qualifier *string `json:"qualifier,omitempty"`
				Uuid      *string `json:"uuid,omitempty"`
			} `json:"components,omitempty"`
			Issue *struct {
				Actions  *[]string `json:"actions,omitempty"`
				Assignee *string   `json:"assignee,omitempty"`
				Author   *string   `json:"author,omitempty"`
				Comments *[]struct {
					CreatedAt *string `json:"createdAt,omitempty"`
					HtmlText  *string `json:"htmlText,omitempty"`
					Key       *string `json:"key,omitempty"`
					Login     *string `json:"login,omitempty"`
					Markdown  *string `json:"markdown,omitempty"`
					Updatable *bool   `json:"updatable,omitempty"`
				} `json:"comments,omitempty"`
				Component    *string `json:"component,omitempty"`
				CreationDate *string `json:"creationDate,omitempty"`
				Debt         *string `json:"debt,omitempty"`
				Effort       *string `json:"effort,omitempty"`
				Flows        *[]struct {
					Locations *[]struct {
						Component      *string   `json:"component,omitempty"`
						Msg            *string   `json:"msg,omitempty"`
						MsgFormattings *[]string `json:"msgFormattings,omitempty"`
						TextRange      *struct {
							EndLine     *int `json:"endLine,omitempty"`
							EndOffset   *int `json:"endOffset,omitempty"`
							StartLine   *int `json:"startLine,omitempty"`
							StartOffset *int `json:"startOffset,omitempty"`
						} `json:"textRange,omitempty"`
					} `json:"locations,omitempty"`
				} `json:"flows,omitempty"`
				Key                       *string   `json:"key,omitempty"`
				Line                      *int      `json:"line,omitempty"`
				Message                   *string   `json:"message,omitempty"`
				Project                   *string   `json:"project,omitempty"`
				Rule                      *string   `json:"rule,omitempty"`
				RuleDescriptionContextKey *string   `json:"ruleDescriptionContextKey,omitempty"`
				Severity                  *string   `json:"severity,omitempty"`
				Status                    *string   `json:"status,omitempty"`
				Tags                      *[]string `json:"tags,omitempty"`
				TextRange                 *struct {
					EndLine     *int `json:"endLine,omitempty"`
					EndOffset   *int `json:"endOffset,omitempty"`
					StartLine   *int `json:"startLine,omitempty"`
					StartOffset *int `json:"startOffset,omitempty"`
				} `json:"textRange,omitempty"`
				Transitions *[]string `json:"transitions,omitempty"`
				Type        *string   `json:"type,omitempty"`
				UpdateDate  *string   `json:"updateDate,omitempty"`
			} `json:"issue,omitempty"`
			Rules *[]struct {
				Key      *string `json:"key,omitempty"`
				Lang     *string `json:"lang,omitempty"`
				LangName *string `json:"langName,omitempty"`
				Name     *string `json:"name,omitempty"`
				Status   *string `json:"status,omitempty"`
			} `json:"rules,omitempty"`
			Users *[]struct {
				Active *bool   `json:"active,omitempty"`
				Email  *string `json:"email,omitempty"`
				Login  *string `json:"login,omitempty"`
				Name   *string `json:"name,omitempty"`
			} `json:"users,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiIssuesDoTransitionResponse parses an HTTP response from a ApiIssuesDoTransitionWithResponse call
func ParseApiIssuesDoTransitionResponse(rsp *http.Response) (*ApiIssuesDoTransitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiIssuesDoTransitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Components *[]struct {
				Enabled   *bool   `json:"enabled,omitempty"`
				Key       *string `json:"key,omitempty"`
				LongName  *string `json:"longName,omitempty"`
				Name      *string `json:"name,omitempty"`
				Path      *string `json:"path,omitempty"`
				Qualifier *string `json:"qualifier,omitempty"`
				Uuid      *string `json:"uuid,omitempty"`
			} `json:"components,omitempty"`
			Issue *struct {
				Actions  *[]string `json:"actions,omitempty"`
				Assignee *string   `json:"assignee,omitempty"`
				Author   *string   `json:"author,omitempty"`
				Comments *[]struct {
					CreatedAt *string `json:"createdAt,omitempty"`
					HtmlText  *string `json:"htmlText,omitempty"`
					Key       *string `json:"key,omitempty"`
					Login     *string `json:"login,omitempty"`
					Markdown  *string `json:"markdown,omitempty"`
					Updatable *bool   `json:"updatable,omitempty"`
				} `json:"comments,omitempty"`
				Component    *string `json:"component,omitempty"`
				CreationDate *string `json:"creationDate,omitempty"`
				Debt         *string `json:"debt,omitempty"`
				Effort       *string `json:"effort,omitempty"`
				Flows        *[]struct {
					Locations *[]struct {
						Component      *string   `json:"component,omitempty"`
						Msg            *string   `json:"msg,omitempty"`
						MsgFormattings *[]string `json:"msgFormattings,omitempty"`
						TextRange      *struct {
							EndLine     *int `json:"endLine,omitempty"`
							EndOffset   *int `json:"endOffset,omitempty"`
							StartLine   *int `json:"startLine,omitempty"`
							StartOffset *int `json:"startOffset,omitempty"`
						} `json:"textRange,omitempty"`
					} `json:"locations,omitempty"`
				} `json:"flows,omitempty"`
				Key                       *string   `json:"key,omitempty"`
				Line                      *int      `json:"line,omitempty"`
				Message                   *string   `json:"message,omitempty"`
				Project                   *string   `json:"project,omitempty"`
				Rule                      *string   `json:"rule,omitempty"`
				RuleDescriptionContextKey *string   `json:"ruleDescriptionContextKey,omitempty"`
				Severity                  *string   `json:"severity,omitempty"`
				Status                    *string   `json:"status,omitempty"`
				Tags                      *[]string `json:"tags,omitempty"`
				TextRange                 *struct {
					EndLine     *int `json:"endLine,omitempty"`
					EndOffset   *int `json:"endOffset,omitempty"`
					StartLine   *int `json:"startLine,omitempty"`
					StartOffset *int `json:"startOffset,omitempty"`
				} `json:"textRange,omitempty"`
				Transitions *[]string `json:"transitions,omitempty"`
				Type        *string   `json:"type,omitempty"`
				UpdateDate  *string   `json:"updateDate,omitempty"`
			} `json:"issue,omitempty"`
			Rules *[]struct {
				Key      *string `json:"key,omitempty"`
				Lang     *string `json:"lang,omitempty"`
				LangName *string `json:"langName,omitempty"`
				Name     *string `json:"name,omitempty"`
				Status   *string `json:"status,omitempty"`
			} `json:"rules,omitempty"`
			Users *[]struct {
				Active *bool   `json:"active,omitempty"`
				Email  *string `json:"email,omitempty"`
				Login  *string `json:"login,omitempty"`
				Name   *string `json:"name,omitempty"`
			} `json:"users,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiIssuesEditCommentResponse parses an HTTP response from a ApiIssuesEditCommentWithResponse call
func ParseApiIssuesEditCommentResponse(rsp *http.Response) (*ApiIssuesEditCommentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiIssuesEditCommentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Components *[]struct {
				Enabled   *bool   `json:"enabled,omitempty"`
				Key       *string `json:"key,omitempty"`
				LongName  *string `json:"longName,omitempty"`
				Name      *string `json:"name,omitempty"`
				Path      *string `json:"path,omitempty"`
				Qualifier *string `json:"qualifier,omitempty"`
				Uuid      *string `json:"uuid,omitempty"`
			} `json:"components,omitempty"`
			Issue *struct {
				Actions  *[]string `json:"actions,omitempty"`
				Assignee *string   `json:"assignee,omitempty"`
				Author   *string   `json:"author,omitempty"`
				Comments *[]struct {
					CreatedAt *string `json:"createdAt,omitempty"`
					HtmlText  *string `json:"htmlText,omitempty"`
					Key       *string `json:"key,omitempty"`
					Login     *string `json:"login,omitempty"`
					Markdown  *string `json:"markdown,omitempty"`
					Updatable *bool   `json:"updatable,omitempty"`
				} `json:"comments,omitempty"`
				Component    *string `json:"component,omitempty"`
				CreationDate *string `json:"creationDate,omitempty"`
				Debt         *string `json:"debt,omitempty"`
				Effort       *string `json:"effort,omitempty"`
				Flows        *[]struct {
					Locations *[]struct {
						Component      *string   `json:"component,omitempty"`
						Msg            *string   `json:"msg,omitempty"`
						MsgFormattings *[]string `json:"msgFormattings,omitempty"`
						TextRange      *struct {
							EndLine     *int `json:"endLine,omitempty"`
							EndOffset   *int `json:"endOffset,omitempty"`
							StartLine   *int `json:"startLine,omitempty"`
							StartOffset *int `json:"startOffset,omitempty"`
						} `json:"textRange,omitempty"`
					} `json:"locations,omitempty"`
				} `json:"flows,omitempty"`
				Key                       *string   `json:"key,omitempty"`
				Line                      *int      `json:"line,omitempty"`
				Message                   *string   `json:"message,omitempty"`
				Project                   *string   `json:"project,omitempty"`
				Rule                      *string   `json:"rule,omitempty"`
				RuleDescriptionContextKey *string   `json:"ruleDescriptionContextKey,omitempty"`
				Severity                  *string   `json:"severity,omitempty"`
				Status                    *string   `json:"status,omitempty"`
				Tags                      *[]string `json:"tags,omitempty"`
				TextRange                 *struct {
					EndLine     *int `json:"endLine,omitempty"`
					EndOffset   *int `json:"endOffset,omitempty"`
					StartLine   *int `json:"startLine,omitempty"`
					StartOffset *int `json:"startOffset,omitempty"`
				} `json:"textRange,omitempty"`
				Transitions *[]string `json:"transitions,omitempty"`
				Type        *string   `json:"type,omitempty"`
				UpdateDate  *string   `json:"updateDate,omitempty"`
			} `json:"issue,omitempty"`
			Rules *[]struct {
				Key      *string `json:"key,omitempty"`
				Lang     *string `json:"lang,omitempty"`
				LangName *string `json:"langName,omitempty"`
				Name     *string `json:"name,omitempty"`
				Status   *string `json:"status,omitempty"`
			} `json:"rules,omitempty"`
			Users *[]struct {
				Active *bool   `json:"active,omitempty"`
				Email  *string `json:"email,omitempty"`
				Login  *string `json:"login,omitempty"`
				Name   *string `json:"name,omitempty"`
			} `json:"users,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiIssuesReindexResponse parses an HTTP response from a ApiIssuesReindexWithResponse call
func ParseApiIssuesReindexResponse(rsp *http.Response) (*ApiIssuesReindexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiIssuesReindexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiIssuesSearchResponse parses an HTTP response from a ApiIssuesSearchWithResponse call
func ParseApiIssuesSearchResponse(rsp *http.Response) (*ApiIssuesSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiIssuesSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Components *[]struct {
				Enabled   *bool   `json:"enabled,omitempty"`
				Key       *string `json:"key,omitempty"`
				LongName  *string `json:"longName,omitempty"`
				Name      *string `json:"name,omitempty"`
				Path      *string `json:"path,omitempty"`
				Qualifier *string `json:"qualifier,omitempty"`
			} `json:"components,omitempty"`
			Issues *[]struct {
				Actions *[]string `json:"actions,omitempty"`
				Attr    *struct {
					JiraIssueKey *string `json:"jira-issue-key,omitempty"`
				} `json:"attr,omitempty"`
				Author   *string `json:"author,omitempty"`
				Comments *[]struct {
					CreatedAt *string `json:"createdAt,omitempty"`
					HtmlText  *string `json:"htmlText,omitempty"`
					Key       *string `json:"key,omitempty"`
					Login     *string `json:"login,omitempty"`
					Markdown  *string `json:"markdown,omitempty"`
					Updatable *bool   `json:"updatable,omitempty"`
				} `json:"comments,omitempty"`
				Component    *string `json:"component,omitempty"`
				CreationDate *string `json:"creationDate,omitempty"`
				Effort       *string `json:"effort,omitempty"`
				Flows        *[]struct {
					Locations *[]struct {
						Msg            *string `json:"msg,omitempty"`
						MsgFormattings *[]struct {
							End   *int    `json:"end,omitempty"`
							Start *int    `json:"start,omitempty"`
							Type  *string `json:"type,omitempty"`
						} `json:"msgFormattings,omitempty"`
						TextRange *struct {
							EndLine     *int `json:"endLine,omitempty"`
							EndOffset   *int `json:"endOffset,omitempty"`
							StartLine   *int `json:"startLine,omitempty"`
							StartOffset *int `json:"startOffset,omitempty"`
						} `json:"textRange,omitempty"`
					} `json:"locations,omitempty"`
				} `json:"flows,omitempty"`
				Hash               *string `json:"hash,omitempty"`
				Key                *string `json:"key,omitempty"`
				Line               *int    `json:"line,omitempty"`
				Message            *string `json:"message,omitempty"`
				MessageFormattings *[]struct {
					End   *int    `json:"end,omitempty"`
					Start *int    `json:"start,omitempty"`
					Type  *string `json:"type,omitempty"`
				} `json:"messageFormattings,omitempty"`
				Project                   *string   `json:"project,omitempty"`
				QuickFixAvailable         *bool     `json:"quickFixAvailable,omitempty"`
				Resolution                *string   `json:"resolution,omitempty"`
				Rule                      *string   `json:"rule,omitempty"`
				RuleDescriptionContextKey *string   `json:"ruleDescriptionContextKey,omitempty"`
				Severity                  *string   `json:"severity,omitempty"`
				Status                    *string   `json:"status,omitempty"`
				Tags                      *[]string `json:"tags,omitempty"`
				TextRange                 *struct {
					EndLine     *int `json:"endLine,omitempty"`
					EndOffset   *int `json:"endOffset,omitempty"`
					StartLine   *int `json:"startLine,omitempty"`
					StartOffset *int `json:"startOffset,omitempty"`
				} `json:"textRange,omitempty"`
				Transitions *[]string `json:"transitions,omitempty"`
				Type        *string   `json:"type,omitempty"`
				UpdateDate  *string   `json:"updateDate,omitempty"`
			} `json:"issues,omitempty"`
			Paging *struct {
				PageIndex *int `json:"pageIndex,omitempty"`
				PageSize  *int `json:"pageSize,omitempty"`
				Total     *int `json:"total,omitempty"`
			} `json:"paging,omitempty"`
			Rules *[]struct {
				Key      *string `json:"key,omitempty"`
				Lang     *string `json:"lang,omitempty"`
				LangName *string `json:"langName,omitempty"`
				Name     *string `json:"name,omitempty"`
				Status   *string `json:"status,omitempty"`
			} `json:"rules,omitempty"`
			Users *[]struct {
				Active *bool   `json:"active,omitempty"`
				Avatar *string `json:"avatar,omitempty"`
				Login  *string `json:"login,omitempty"`
				Name   *string `json:"name,omitempty"`
			} `json:"users,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiIssuesSetSeverityResponse parses an HTTP response from a ApiIssuesSetSeverityWithResponse call
func ParseApiIssuesSetSeverityResponse(rsp *http.Response) (*ApiIssuesSetSeverityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiIssuesSetSeverityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Components *[]struct {
				Enabled   *bool   `json:"enabled,omitempty"`
				Key       *string `json:"key,omitempty"`
				LongName  *string `json:"longName,omitempty"`
				Name      *string `json:"name,omitempty"`
				Path      *string `json:"path,omitempty"`
				Qualifier *string `json:"qualifier,omitempty"`
				Uuid      *string `json:"uuid,omitempty"`
			} `json:"components,omitempty"`
			Issue *struct {
				Actions  *[]string `json:"actions,omitempty"`
				Assignee *string   `json:"assignee,omitempty"`
				Author   *string   `json:"author,omitempty"`
				Comments *[]struct {
					CreatedAt *string `json:"createdAt,omitempty"`
					HtmlText  *string `json:"htmlText,omitempty"`
					Key       *string `json:"key,omitempty"`
					Login     *string `json:"login,omitempty"`
					Markdown  *string `json:"markdown,omitempty"`
					Updatable *bool   `json:"updatable,omitempty"`
				} `json:"comments,omitempty"`
				Component    *string `json:"component,omitempty"`
				CreationDate *string `json:"creationDate,omitempty"`
				Debt         *string `json:"debt,omitempty"`
				Effort       *string `json:"effort,omitempty"`
				Flows        *[]struct {
					Locations *[]struct {
						Component      *string   `json:"component,omitempty"`
						Msg            *string   `json:"msg,omitempty"`
						MsgFormattings *[]string `json:"msgFormattings,omitempty"`
						TextRange      *struct {
							EndLine     *int `json:"endLine,omitempty"`
							EndOffset   *int `json:"endOffset,omitempty"`
							StartLine   *int `json:"startLine,omitempty"`
							StartOffset *int `json:"startOffset,omitempty"`
						} `json:"textRange,omitempty"`
					} `json:"locations,omitempty"`
				} `json:"flows,omitempty"`
				Key                       *string   `json:"key,omitempty"`
				Line                      *int      `json:"line,omitempty"`
				Message                   *string   `json:"message,omitempty"`
				Project                   *string   `json:"project,omitempty"`
				Rule                      *string   `json:"rule,omitempty"`
				RuleDescriptionContextKey *string   `json:"ruleDescriptionContextKey,omitempty"`
				Severity                  *string   `json:"severity,omitempty"`
				Status                    *string   `json:"status,omitempty"`
				Tags                      *[]string `json:"tags,omitempty"`
				TextRange                 *struct {
					EndLine     *int `json:"endLine,omitempty"`
					EndOffset   *int `json:"endOffset,omitempty"`
					StartLine   *int `json:"startLine,omitempty"`
					StartOffset *int `json:"startOffset,omitempty"`
				} `json:"textRange,omitempty"`
				Transitions *[]string `json:"transitions,omitempty"`
				Type        *string   `json:"type,omitempty"`
				UpdateDate  *string   `json:"updateDate,omitempty"`
			} `json:"issue,omitempty"`
			Rules *[]struct {
				Key      *string `json:"key,omitempty"`
				Lang     *string `json:"lang,omitempty"`
				LangName *string `json:"langName,omitempty"`
				Name     *string `json:"name,omitempty"`
				Status   *string `json:"status,omitempty"`
			} `json:"rules,omitempty"`
			Users *[]struct {
				Active *bool   `json:"active,omitempty"`
				Email  *string `json:"email,omitempty"`
				Login  *string `json:"login,omitempty"`
				Name   *string `json:"name,omitempty"`
			} `json:"users,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiIssuesSetTagsResponse parses an HTTP response from a ApiIssuesSetTagsWithResponse call
func ParseApiIssuesSetTagsResponse(rsp *http.Response) (*ApiIssuesSetTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiIssuesSetTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Components *[]struct {
				Enabled      *bool   `json:"enabled,omitempty"`
				Key          *string `json:"key,omitempty"`
				LongName     *string `json:"longName,omitempty"`
				Name         *string `json:"name,omitempty"`
				Path         *string `json:"path,omitempty"`
				ProjectId    *int    `json:"projectId,omitempty"`
				Qualifier    *string `json:"qualifier,omitempty"`
				SubProjectId *int    `json:"subProjectId,omitempty"`
				Uuid         *string `json:"uuid,omitempty"`
			} `json:"components,omitempty"`
			Issue *struct {
				Actions  *[]string `json:"actions,omitempty"`
				Assignee *string   `json:"assignee,omitempty"`
				Author   *string   `json:"author,omitempty"`
				Comments *[]struct {
					CreatedAt *string `json:"createdAt,omitempty"`
					HtmlText  *string `json:"htmlText,omitempty"`
					Key       *string `json:"key,omitempty"`
					Login     *string `json:"login,omitempty"`
					Markdown  *string `json:"markdown,omitempty"`
					Updatable *bool   `json:"updatable,omitempty"`
				} `json:"comments,omitempty"`
				Component    *string `json:"component,omitempty"`
				CreationDate *string `json:"creationDate,omitempty"`
				Debt         *string `json:"debt,omitempty"`
				Effort       *string `json:"effort,omitempty"`
				Flows        *[]struct {
					Locations *[]struct {
						Component      *string   `json:"component,omitempty"`
						Msg            *string   `json:"msg,omitempty"`
						MsgFormattings *[]string `json:"msgFormattings,omitempty"`
						TextRange      *struct {
							EndLine     *int `json:"endLine,omitempty"`
							EndOffset   *int `json:"endOffset,omitempty"`
							StartLine   *int `json:"startLine,omitempty"`
							StartOffset *int `json:"startOffset,omitempty"`
						} `json:"textRange,omitempty"`
					} `json:"locations,omitempty"`
				} `json:"flows,omitempty"`
				Key                       *string   `json:"key,omitempty"`
				Line                      *int      `json:"line,omitempty"`
				Message                   *string   `json:"message,omitempty"`
				Project                   *string   `json:"project,omitempty"`
				Rule                      *string   `json:"rule,omitempty"`
				RuleDescriptionContextKey *string   `json:"ruleDescriptionContextKey,omitempty"`
				Severity                  *string   `json:"severity,omitempty"`
				Status                    *string   `json:"status,omitempty"`
				Tags                      *[]string `json:"tags,omitempty"`
				TextRange                 *struct {
					EndLine     *int `json:"endLine,omitempty"`
					EndOffset   *int `json:"endOffset,omitempty"`
					StartLine   *int `json:"startLine,omitempty"`
					StartOffset *int `json:"startOffset,omitempty"`
				} `json:"textRange,omitempty"`
				Transitions *[]string `json:"transitions,omitempty"`
				Type        *string   `json:"type,omitempty"`
				UpdateDate  *string   `json:"updateDate,omitempty"`
			} `json:"issue,omitempty"`
			Rules *[]struct {
				Key      *string `json:"key,omitempty"`
				Lang     *string `json:"lang,omitempty"`
				LangName *string `json:"langName,omitempty"`
				Name     *string `json:"name,omitempty"`
				Status   *string `json:"status,omitempty"`
			} `json:"rules,omitempty"`
			Users *[]struct {
				Active *bool   `json:"active,omitempty"`
				Email  *string `json:"email,omitempty"`
				Login  *string `json:"login,omitempty"`
				Name   *string `json:"name,omitempty"`
			} `json:"users,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiIssuesSetTypeResponse parses an HTTP response from a ApiIssuesSetTypeWithResponse call
func ParseApiIssuesSetTypeResponse(rsp *http.Response) (*ApiIssuesSetTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiIssuesSetTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Components *[]struct {
				Enabled   *bool   `json:"enabled,omitempty"`
				Key       *string `json:"key,omitempty"`
				LongName  *string `json:"longName,omitempty"`
				Name      *string `json:"name,omitempty"`
				Path      *string `json:"path,omitempty"`
				Qualifier *string `json:"qualifier,omitempty"`
				Uuid      *string `json:"uuid,omitempty"`
			} `json:"components,omitempty"`
			Issue *struct {
				Actions  *[]string `json:"actions,omitempty"`
				Assignee *string   `json:"assignee,omitempty"`
				Author   *string   `json:"author,omitempty"`
				Comments *[]struct {
					CreatedAt *string `json:"createdAt,omitempty"`
					HtmlText  *string `json:"htmlText,omitempty"`
					Key       *string `json:"key,omitempty"`
					Login     *string `json:"login,omitempty"`
					Markdown  *string `json:"markdown,omitempty"`
					Updatable *bool   `json:"updatable,omitempty"`
				} `json:"comments,omitempty"`
				Component    *string `json:"component,omitempty"`
				CreationDate *string `json:"creationDate,omitempty"`
				Debt         *string `json:"debt,omitempty"`
				Effort       *string `json:"effort,omitempty"`
				Flows        *[]struct {
					Locations *[]struct {
						Component      *string   `json:"component,omitempty"`
						Msg            *string   `json:"msg,omitempty"`
						MsgFormattings *[]string `json:"msgFormattings,omitempty"`
						TextRange      *struct {
							EndLine     *int `json:"endLine,omitempty"`
							EndOffset   *int `json:"endOffset,omitempty"`
							StartLine   *int `json:"startLine,omitempty"`
							StartOffset *int `json:"startOffset,omitempty"`
						} `json:"textRange,omitempty"`
					} `json:"locations,omitempty"`
				} `json:"flows,omitempty"`
				Key                       *string   `json:"key,omitempty"`
				Line                      *int      `json:"line,omitempty"`
				Message                   *string   `json:"message,omitempty"`
				Project                   *string   `json:"project,omitempty"`
				Rule                      *string   `json:"rule,omitempty"`
				RuleDescriptionContextKey *string   `json:"ruleDescriptionContextKey,omitempty"`
				Severity                  *string   `json:"severity,omitempty"`
				Status                    *string   `json:"status,omitempty"`
				Tags                      *[]string `json:"tags,omitempty"`
				TextRange                 *struct {
					EndLine     *int `json:"endLine,omitempty"`
					EndOffset   *int `json:"endOffset,omitempty"`
					StartLine   *int `json:"startLine,omitempty"`
					StartOffset *int `json:"startOffset,omitempty"`
				} `json:"textRange,omitempty"`
				Transitions *[]string `json:"transitions,omitempty"`
				Type        *string   `json:"type,omitempty"`
				UpdateDate  *string   `json:"updateDate,omitempty"`
			} `json:"issue,omitempty"`
			Rules *[]struct {
				Key      *string `json:"key,omitempty"`
				Lang     *string `json:"lang,omitempty"`
				LangName *string `json:"langName,omitempty"`
				Name     *string `json:"name,omitempty"`
				Status   *string `json:"status,omitempty"`
			} `json:"rules,omitempty"`
			Users *[]struct {
				Active *bool   `json:"active,omitempty"`
				Email  *string `json:"email,omitempty"`
				Login  *string `json:"login,omitempty"`
				Name   *string `json:"name,omitempty"`
			} `json:"users,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiIssuesTagsResponse parses an HTTP response from a ApiIssuesTagsWithResponse call
func ParseApiIssuesTagsResponse(rsp *http.Response) (*ApiIssuesTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiIssuesTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Tags *[]string `json:"tags,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiLanguagesListResponse parses an HTTP response from a ApiLanguagesListWithResponse call
func ParseApiLanguagesListResponse(rsp *http.Response) (*ApiLanguagesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiLanguagesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Languages *[]struct {
				Key  *string `json:"key,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"languages,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiMeasuresComponentResponse parses an HTTP response from a ApiMeasuresComponentWithResponse call
func ParseApiMeasuresComponentResponse(rsp *http.Response) (*ApiMeasuresComponentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiMeasuresComponentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Component *struct {
				Key      *string `json:"key,omitempty"`
				Language *string `json:"language,omitempty"`
				Measures *[]struct {
					Metric *string `json:"metric,omitempty"`
					Value  *string `json:"value,omitempty"`
				} `json:"measures,omitempty"`
				Name      *string `json:"name,omitempty"`
				Path      *string `json:"path,omitempty"`
				Qualifier *string `json:"qualifier,omitempty"`
			} `json:"component,omitempty"`
			Metrics *[]struct {
				Description           *string `json:"description,omitempty"`
				Domain                *string `json:"domain,omitempty"`
				Hidden                *bool   `json:"hidden,omitempty"`
				HigherValuesAreBetter *bool   `json:"higherValuesAreBetter,omitempty"`
				Key                   *string `json:"key,omitempty"`
				Name                  *string `json:"name,omitempty"`
				Qualitative           *bool   `json:"qualitative,omitempty"`
				Type                  *string `json:"type,omitempty"`
			} `json:"metrics,omitempty"`
			Period *struct {
				Date      *string `json:"date,omitempty"`
				Mode      *string `json:"mode,omitempty"`
				Parameter *string `json:"parameter,omitempty"`
			} `json:"period,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiMeasuresComponentTreeResponse parses an HTTP response from a ApiMeasuresComponentTreeWithResponse call
func ParseApiMeasuresComponentTreeResponse(rsp *http.Response) (*ApiMeasuresComponentTreeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiMeasuresComponentTreeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			BaseComponent *struct {
				Key      *string `json:"key,omitempty"`
				Measures *[]struct {
					Metric *string `json:"metric,omitempty"`
					Period *struct {
						Value *string `json:"value,omitempty"`
					} `json:"period,omitempty"`
				} `json:"measures,omitempty"`
				Name      *string `json:"name,omitempty"`
				Qualifier *string `json:"qualifier,omitempty"`
			} `json:"baseComponent,omitempty"`
			Components *[]struct {
				Key      *string `json:"key,omitempty"`
				Language *string `json:"language,omitempty"`
				Measures *[]struct {
					Metric *string `json:"metric,omitempty"`
					Period *struct {
						Value *string `json:"value,omitempty"`
					} `json:"period,omitempty"`
				} `json:"measures,omitempty"`
				Name      *string `json:"name,omitempty"`
				Path      *string `json:"path,omitempty"`
				Qualifier *string `json:"qualifier,omitempty"`
			} `json:"components,omitempty"`
			Metrics *[]struct {
				Description           *string `json:"description,omitempty"`
				Domain                *string `json:"domain,omitempty"`
				Hidden                *bool   `json:"hidden,omitempty"`
				HigherValuesAreBetter *bool   `json:"higherValuesAreBetter,omitempty"`
				Key                   *string `json:"key,omitempty"`
				Name                  *string `json:"name,omitempty"`
				Qualitative           *bool   `json:"qualitative,omitempty"`
				Type                  *string `json:"type,omitempty"`
			} `json:"metrics,omitempty"`
			Paging *struct {
				PageIndex *int `json:"pageIndex,omitempty"`
				PageSize  *int `json:"pageSize,omitempty"`
				Total     *int `json:"total,omitempty"`
			} `json:"paging,omitempty"`
			Period *struct {
				Date      *string `json:"date,omitempty"`
				Mode      *string `json:"mode,omitempty"`
				Parameter *string `json:"parameter,omitempty"`
			} `json:"period,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiMeasuresSearchHistoryResponse parses an HTTP response from a ApiMeasuresSearchHistoryWithResponse call
func ParseApiMeasuresSearchHistoryResponse(rsp *http.Response) (*ApiMeasuresSearchHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiMeasuresSearchHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Measures *[]struct {
				History *[]struct {
					Date  *string `json:"date,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"history,omitempty"`
				Metric *string `json:"metric,omitempty"`
			} `json:"measures,omitempty"`
			Paging *struct {
				PageIndex *int `json:"pageIndex,omitempty"`
				PageSize  *int `json:"pageSize,omitempty"`
				Total     *int `json:"total,omitempty"`
			} `json:"paging,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiMetricsSearchResponse parses an HTTP response from a ApiMetricsSearchWithResponse call
func ParseApiMetricsSearchResponse(rsp *http.Response) (*ApiMetricsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiMetricsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Metrics *[]struct {
				Custom      *bool   `json:"custom,omitempty"`
				Description *string `json:"description,omitempty"`
				Direction   *int    `json:"direction,omitempty"`
				Domain      *string `json:"domain,omitempty"`
				Hidden      *bool   `json:"hidden,omitempty"`
				Id          *string `json:"id,omitempty"`
				Key         *string `json:"key,omitempty"`
				Name        *string `json:"name,omitempty"`
				Qualitative *bool   `json:"qualitative,omitempty"`
				Type        *string `json:"type,omitempty"`
			} `json:"metrics,omitempty"`
			Paging *struct {
				PageIndex *int `json:"pageIndex,omitempty"`
				PageSize  *int `json:"pageSize,omitempty"`
				Total     *int `json:"total,omitempty"`
			} `json:"paging,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiMetricsTypesResponse parses an HTTP response from a ApiMetricsTypesWithResponse call
func ParseApiMetricsTypesResponse(rsp *http.Response) (*ApiMetricsTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiMetricsTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Types *[]string `json:"types,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiMonitoringMetricsResponse parses an HTTP response from a ApiMonitoringMetricsWithResponse call
func ParseApiMonitoringMetricsResponse(rsp *http.Response) (*ApiMonitoringMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiMonitoringMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiNewCodePeriodsListResponse parses an HTTP response from a ApiNewCodePeriodsListWithResponse call
func ParseApiNewCodePeriodsListResponse(rsp *http.Response) (*ApiNewCodePeriodsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiNewCodePeriodsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			NewCodePeriods *[]struct {
				BranchKey      *string `json:"branchKey,omitempty"`
				EffectiveValue *string `json:"effectiveValue,omitempty"`
				ProjectKey     *string `json:"projectKey,omitempty"`
				Type           *string `json:"type,omitempty"`
				Value          *string `json:"value,omitempty"`
			} `json:"newCodePeriods,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiNewCodePeriodsSetResponse parses an HTTP response from a ApiNewCodePeriodsSetWithResponse call
func ParseApiNewCodePeriodsSetResponse(rsp *http.Response) (*ApiNewCodePeriodsSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiNewCodePeriodsSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiNewCodePeriodsShowResponse parses an HTTP response from a ApiNewCodePeriodsShowWithResponse call
func ParseApiNewCodePeriodsShowResponse(rsp *http.Response) (*ApiNewCodePeriodsShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiNewCodePeriodsShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			BranchKey  *string `json:"branchKey,omitempty"`
			Inherited  *bool   `json:"inherited,omitempty"`
			ProjectKey *string `json:"projectKey,omitempty"`
			Type       *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiNewCodePeriodsUnsetResponse parses an HTTP response from a ApiNewCodePeriodsUnsetWithResponse call
func ParseApiNewCodePeriodsUnsetResponse(rsp *http.Response) (*ApiNewCodePeriodsUnsetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiNewCodePeriodsUnsetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiNotificationsAddResponse parses an HTTP response from a ApiNotificationsAddWithResponse call
func ParseApiNotificationsAddResponse(rsp *http.Response) (*ApiNotificationsAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiNotificationsAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiNotificationsListResponse parses an HTTP response from a ApiNotificationsListWithResponse call
func ParseApiNotificationsListResponse(rsp *http.Response) (*ApiNotificationsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiNotificationsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Channels      *[]string `json:"channels,omitempty"`
			GlobalTypes   *[]string `json:"globalTypes,omitempty"`
			Notifications *[]struct {
				Channel *string `json:"channel,omitempty"`
				Type    *string `json:"type,omitempty"`
			} `json:"notifications,omitempty"`
			PerProjectTypes *[]string `json:"perProjectTypes,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiNotificationsRemoveResponse parses an HTTP response from a ApiNotificationsRemoveWithResponse call
func ParseApiNotificationsRemoveResponse(rsp *http.Response) (*ApiNotificationsRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiNotificationsRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPermissionsAddGroupResponse parses an HTTP response from a ApiPermissionsAddGroupWithResponse call
func ParseApiPermissionsAddGroupResponse(rsp *http.Response) (*ApiPermissionsAddGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPermissionsAddGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPermissionsAddGroupToTemplateResponse parses an HTTP response from a ApiPermissionsAddGroupToTemplateWithResponse call
func ParseApiPermissionsAddGroupToTemplateResponse(rsp *http.Response) (*ApiPermissionsAddGroupToTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPermissionsAddGroupToTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPermissionsAddProjectCreatorToTemplateResponse parses an HTTP response from a ApiPermissionsAddProjectCreatorToTemplateWithResponse call
func ParseApiPermissionsAddProjectCreatorToTemplateResponse(rsp *http.Response) (*ApiPermissionsAddProjectCreatorToTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPermissionsAddProjectCreatorToTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPermissionsAddUserResponse parses an HTTP response from a ApiPermissionsAddUserWithResponse call
func ParseApiPermissionsAddUserResponse(rsp *http.Response) (*ApiPermissionsAddUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPermissionsAddUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPermissionsAddUserToTemplateResponse parses an HTTP response from a ApiPermissionsAddUserToTemplateWithResponse call
func ParseApiPermissionsAddUserToTemplateResponse(rsp *http.Response) (*ApiPermissionsAddUserToTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPermissionsAddUserToTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPermissionsApplyTemplateResponse parses an HTTP response from a ApiPermissionsApplyTemplateWithResponse call
func ParseApiPermissionsApplyTemplateResponse(rsp *http.Response) (*ApiPermissionsApplyTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPermissionsApplyTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPermissionsBulkApplyTemplateResponse parses an HTTP response from a ApiPermissionsBulkApplyTemplateWithResponse call
func ParseApiPermissionsBulkApplyTemplateResponse(rsp *http.Response) (*ApiPermissionsBulkApplyTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPermissionsBulkApplyTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPermissionsCreateTemplateResponse parses an HTTP response from a ApiPermissionsCreateTemplateWithResponse call
func ParseApiPermissionsCreateTemplateResponse(rsp *http.Response) (*ApiPermissionsCreateTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPermissionsCreateTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			PermissionTemplate *struct {
				Description       *string `json:"description,omitempty"`
				Name              *string `json:"name,omitempty"`
				ProjectKeyPattern *string `json:"projectKeyPattern,omitempty"`
			} `json:"permissionTemplate,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPermissionsDeleteTemplateResponse parses an HTTP response from a ApiPermissionsDeleteTemplateWithResponse call
func ParseApiPermissionsDeleteTemplateResponse(rsp *http.Response) (*ApiPermissionsDeleteTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPermissionsDeleteTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPermissionsRemoveGroupResponse parses an HTTP response from a ApiPermissionsRemoveGroupWithResponse call
func ParseApiPermissionsRemoveGroupResponse(rsp *http.Response) (*ApiPermissionsRemoveGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPermissionsRemoveGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPermissionsRemoveGroupFromTemplateResponse parses an HTTP response from a ApiPermissionsRemoveGroupFromTemplateWithResponse call
func ParseApiPermissionsRemoveGroupFromTemplateResponse(rsp *http.Response) (*ApiPermissionsRemoveGroupFromTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPermissionsRemoveGroupFromTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPermissionsRemoveProjectCreatorFromTemplateResponse parses an HTTP response from a ApiPermissionsRemoveProjectCreatorFromTemplateWithResponse call
func ParseApiPermissionsRemoveProjectCreatorFromTemplateResponse(rsp *http.Response) (*ApiPermissionsRemoveProjectCreatorFromTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPermissionsRemoveProjectCreatorFromTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPermissionsRemoveUserResponse parses an HTTP response from a ApiPermissionsRemoveUserWithResponse call
func ParseApiPermissionsRemoveUserResponse(rsp *http.Response) (*ApiPermissionsRemoveUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPermissionsRemoveUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPermissionsRemoveUserFromTemplateResponse parses an HTTP response from a ApiPermissionsRemoveUserFromTemplateWithResponse call
func ParseApiPermissionsRemoveUserFromTemplateResponse(rsp *http.Response) (*ApiPermissionsRemoveUserFromTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPermissionsRemoveUserFromTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPermissionsSearchTemplatesResponse parses an HTTP response from a ApiPermissionsSearchTemplatesWithResponse call
func ParseApiPermissionsSearchTemplatesResponse(rsp *http.Response) (*ApiPermissionsSearchTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPermissionsSearchTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			DefaultTemplates *[]struct {
				Qualifier  *string `json:"qualifier,omitempty"`
				TemplateId *string `json:"templateId,omitempty"`
			} `json:"defaultTemplates,omitempty"`
			PermissionTemplates *[]struct {
				CreatedAt   *string `json:"createdAt,omitempty"`
				Description *string `json:"description,omitempty"`
				Id          *string `json:"id,omitempty"`
				Name        *string `json:"name,omitempty"`
				Permissions *[]struct {
					GroupsCount        *int    `json:"groupsCount,omitempty"`
					Key                *string `json:"key,omitempty"`
					UsersCount         *int    `json:"usersCount,omitempty"`
					WithProjectCreator *bool   `json:"withProjectCreator,omitempty"`
				} `json:"permissions,omitempty"`
				UpdatedAt *string `json:"updatedAt,omitempty"`
			} `json:"permissionTemplates,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPermissionsSetDefaultTemplateResponse parses an HTTP response from a ApiPermissionsSetDefaultTemplateWithResponse call
func ParseApiPermissionsSetDefaultTemplateResponse(rsp *http.Response) (*ApiPermissionsSetDefaultTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPermissionsSetDefaultTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPermissionsUpdateTemplateResponse parses an HTTP response from a ApiPermissionsUpdateTemplateWithResponse call
func ParseApiPermissionsUpdateTemplateResponse(rsp *http.Response) (*ApiPermissionsUpdateTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPermissionsUpdateTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			PermissionTemplate *struct {
				CreatedAt         *string `json:"createdAt,omitempty"`
				Description       *string `json:"description,omitempty"`
				Id                *string `json:"id,omitempty"`
				Name              *string `json:"name,omitempty"`
				ProjectKeyPattern *string `json:"projectKeyPattern,omitempty"`
				UpdatedAt         *string `json:"updatedAt,omitempty"`
			} `json:"permissionTemplate,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPluginsAvailableResponse parses an HTTP response from a ApiPluginsAvailableWithResponse call
func ParseApiPluginsAvailableResponse(rsp *http.Response) (*ApiPluginsAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPluginsAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Plugins *[]struct {
				Category         *string `json:"category,omitempty"`
				Description      *string `json:"description,omitempty"`
				EditionBundled   *bool   `json:"editionBundled,omitempty"`
				Key              *string `json:"key,omitempty"`
				License          *string `json:"license,omitempty"`
				Name             *string `json:"name,omitempty"`
				OrganizationName *string `json:"organizationName,omitempty"`
				OrganizationUrl  *string `json:"organizationUrl,omitempty"`
				Release          *struct {
					Date    *string `json:"date,omitempty"`
					Version *string `json:"version,omitempty"`
				} `json:"release,omitempty"`
				TermsAndConditionsUrl *string `json:"termsAndConditionsUrl,omitempty"`
				Update                *struct {
					Requires *[]struct {
						Description *string `json:"description,omitempty"`
						Key         *string `json:"key,omitempty"`
						Namme       *string `json:"namme,omitempty"`
					} `json:"requires,omitempty"`
					Status *string `json:"status,omitempty"`
				} `json:"update,omitempty"`
			} `json:"plugins,omitempty"`
			UpdateCenterRefresh *string `json:"updateCenterRefresh,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPluginsCancelAllResponse parses an HTTP response from a ApiPluginsCancelAllWithResponse call
func ParseApiPluginsCancelAllResponse(rsp *http.Response) (*ApiPluginsCancelAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPluginsCancelAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPluginsInstallResponse parses an HTTP response from a ApiPluginsInstallWithResponse call
func ParseApiPluginsInstallResponse(rsp *http.Response) (*ApiPluginsInstallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPluginsInstallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPluginsInstalledResponse parses an HTTP response from a ApiPluginsInstalledWithResponse call
func ParseApiPluginsInstalledResponse(rsp *http.Response) (*ApiPluginsInstalledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPluginsInstalledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Plugins *[]struct {
				Description         *string `json:"description,omitempty"`
				DocumentationPath   *string `json:"documentationPath,omitempty"`
				EditionBundled      *bool   `json:"editionBundled,omitempty"`
				Filename            *string `json:"filename,omitempty"`
				Hash                *string `json:"hash,omitempty"`
				HomepageUrl         *string `json:"homepageUrl,omitempty"`
				ImplementationBuild *string `json:"implementationBuild,omitempty"`
				IssueTrackerUrl     *string `json:"issueTrackerUrl,omitempty"`
				Key                 *string `json:"key,omitempty"`
				License             *string `json:"license,omitempty"`
				Name                *string `json:"name,omitempty"`
				OrganizationName    *string `json:"organizationName,omitempty"`
				OrganizationUrl     *string `json:"organizationUrl,omitempty"`
				SonarLintSupported  *bool   `json:"sonarLintSupported,omitempty"`
				UpdatedAt           *int    `json:"updatedAt,omitempty"`
				Version             *string `json:"version,omitempty"`
			} `json:"plugins,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPluginsPendingResponse parses an HTTP response from a ApiPluginsPendingWithResponse call
func ParseApiPluginsPendingResponse(rsp *http.Response) (*ApiPluginsPendingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPluginsPendingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Installing *[]struct {
				Category            *string `json:"category,omitempty"`
				Description         *string `json:"description,omitempty"`
				DocumentationPath   *string `json:"documentationPath,omitempty"`
				HomepageUrl         *string `json:"homepageUrl,omitempty"`
				ImplementationBuild *string `json:"implementationBuild,omitempty"`
				IssueTrackerUrl     *string `json:"issueTrackerUrl,omitempty"`
				Key                 *string `json:"key,omitempty"`
				License             *string `json:"license,omitempty"`
				Name                *string `json:"name,omitempty"`
				OrganizationName    *string `json:"organizationName,omitempty"`
				OrganizationUrl     *string `json:"organizationUrl,omitempty"`
				Version             *string `json:"version,omitempty"`
			} `json:"installing,omitempty"`
			Removing *[]struct {
				Category            *string `json:"category,omitempty"`
				Description         *string `json:"description,omitempty"`
				DocumentationPath   *string `json:"documentationPath,omitempty"`
				HomepageUrl         *string `json:"homepageUrl,omitempty"`
				ImplementationBuild *string `json:"implementationBuild,omitempty"`
				IssueTrackerUrl     *string `json:"issueTrackerUrl,omitempty"`
				Key                 *string `json:"key,omitempty"`
				License             *string `json:"license,omitempty"`
				Name                *string `json:"name,omitempty"`
				OrganizationName    *string `json:"organizationName,omitempty"`
				OrganizationUrl     *string `json:"organizationUrl,omitempty"`
				Version             *string `json:"version,omitempty"`
			} `json:"removing,omitempty"`
			Updating *[]struct {
				Category            *string `json:"category,omitempty"`
				Description         *string `json:"description,omitempty"`
				HomepageUrl         *string `json:"homepageUrl,omitempty"`
				ImplementationBuild *string `json:"implementationBuild,omitempty"`
				IssueTrackerUrl     *string `json:"issueTrackerUrl,omitempty"`
				Key                 *string `json:"key,omitempty"`
				License             *string `json:"license,omitempty"`
				Name                *string `json:"name,omitempty"`
				OrganizationName    *string `json:"organizationName,omitempty"`
				OrganizationUrl     *string `json:"organizationUrl,omitempty"`
				Version             *string `json:"version,omitempty"`
			} `json:"updating,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPluginsUninstallResponse parses an HTTP response from a ApiPluginsUninstallWithResponse call
func ParseApiPluginsUninstallResponse(rsp *http.Response) (*ApiPluginsUninstallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPluginsUninstallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPluginsUpdateResponse parses an HTTP response from a ApiPluginsUpdateWithResponse call
func ParseApiPluginsUpdateResponse(rsp *http.Response) (*ApiPluginsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPluginsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiPluginsUpdatesResponse parses an HTTP response from a ApiPluginsUpdatesWithResponse call
func ParseApiPluginsUpdatesResponse(rsp *http.Response) (*ApiPluginsUpdatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPluginsUpdatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Plugins *[]struct {
				Category              *string `json:"category,omitempty"`
				Description           *string `json:"description,omitempty"`
				EditionBundled        *bool   `json:"editionBundled,omitempty"`
				Key                   *string `json:"key,omitempty"`
				License               *string `json:"license,omitempty"`
				Name                  *string `json:"name,omitempty"`
				OrganizationName      *string `json:"organizationName,omitempty"`
				OrganizationUrl       *string `json:"organizationUrl,omitempty"`
				TermsAndConditionsUrl *string `json:"termsAndConditionsUrl,omitempty"`
				Updates               *[]struct {
					Release *struct {
						ChangeLogUrl *string `json:"changeLogUrl,omitempty"`
						Date         *string `json:"date,omitempty"`
						Description  *string `json:"description,omitempty"`
						Version      *string `json:"version,omitempty"`
					} `json:"release,omitempty"`
					Requires *[]struct {
						Description *string `json:"description,omitempty"`
						Key         *string `json:"key,omitempty"`
						Namme       *string `json:"namme,omitempty"`
					} `json:"requires,omitempty"`
					Status *string `json:"status,omitempty"`
				} `json:"updates,omitempty"`
			} `json:"plugins,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectAnalysesCreateEventResponse parses an HTTP response from a ApiProjectAnalysesCreateEventWithResponse call
func ParseApiProjectAnalysesCreateEventResponse(rsp *http.Response) (*ApiProjectAnalysesCreateEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectAnalysesCreateEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Event *struct {
				Analysis *string `json:"analysis,omitempty"`
				Category *string `json:"category,omitempty"`
				Key      *string `json:"key,omitempty"`
				Name     *string `json:"name,omitempty"`
			} `json:"event,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectAnalysesDeleteResponse parses an HTTP response from a ApiProjectAnalysesDeleteWithResponse call
func ParseApiProjectAnalysesDeleteResponse(rsp *http.Response) (*ApiProjectAnalysesDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectAnalysesDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectAnalysesDeleteEventResponse parses an HTTP response from a ApiProjectAnalysesDeleteEventWithResponse call
func ParseApiProjectAnalysesDeleteEventResponse(rsp *http.Response) (*ApiProjectAnalysesDeleteEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectAnalysesDeleteEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectAnalysesSearchResponse parses an HTTP response from a ApiProjectAnalysesSearchWithResponse call
func ParseApiProjectAnalysesSearchResponse(rsp *http.Response) (*ApiProjectAnalysesSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectAnalysesSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Analyses *[]struct {
				BuildString *string `json:"buildString,omitempty"`
				Date        *string `json:"date,omitempty"`
				Events      *[]struct {
					Category *string `json:"category,omitempty"`
					Key      *string `json:"key,omitempty"`
					Name     *string `json:"name,omitempty"`
				} `json:"events,omitempty"`
				Key                         *string `json:"key,omitempty"`
				ManualNewCodePeriodBaseline *bool   `json:"manualNewCodePeriodBaseline,omitempty"`
				ProjectVersion              *string `json:"projectVersion,omitempty"`
				Revision                    *string `json:"revision,omitempty"`
			} `json:"analyses,omitempty"`
			Paging *struct {
				PageIndex *int `json:"pageIndex,omitempty"`
				PageSize  *int `json:"pageSize,omitempty"`
				Total     *int `json:"total,omitempty"`
			} `json:"paging,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectAnalysesSetBaselineResponse parses an HTTP response from a ApiProjectAnalysesSetBaselineWithResponse call
func ParseApiProjectAnalysesSetBaselineResponse(rsp *http.Response) (*ApiProjectAnalysesSetBaselineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectAnalysesSetBaselineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectAnalysesUnsetBaselineResponse parses an HTTP response from a ApiProjectAnalysesUnsetBaselineWithResponse call
func ParseApiProjectAnalysesUnsetBaselineResponse(rsp *http.Response) (*ApiProjectAnalysesUnsetBaselineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectAnalysesUnsetBaselineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectAnalysesUpdateEventResponse parses an HTTP response from a ApiProjectAnalysesUpdateEventWithResponse call
func ParseApiProjectAnalysesUpdateEventResponse(rsp *http.Response) (*ApiProjectAnalysesUpdateEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectAnalysesUpdateEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Event *struct {
				Analysis *string `json:"analysis,omitempty"`
				Category *string `json:"category,omitempty"`
				Key      *string `json:"key,omitempty"`
				Name     *string `json:"name,omitempty"`
			} `json:"event,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectBadgesMeasureResponse parses an HTTP response from a ApiProjectBadgesMeasureWithResponse call
func ParseApiProjectBadgesMeasureResponse(rsp *http.Response) (*ApiProjectBadgesMeasureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectBadgesMeasureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectBadgesQualityGateResponse parses an HTTP response from a ApiProjectBadgesQualityGateWithResponse call
func ParseApiProjectBadgesQualityGateResponse(rsp *http.Response) (*ApiProjectBadgesQualityGateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectBadgesQualityGateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectBadgesRenewTokenResponse parses an HTTP response from a ApiProjectBadgesRenewTokenWithResponse call
func ParseApiProjectBadgesRenewTokenResponse(rsp *http.Response) (*ApiProjectBadgesRenewTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectBadgesRenewTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectBadgesTokenResponse parses an HTTP response from a ApiProjectBadgesTokenWithResponse call
func ParseApiProjectBadgesTokenResponse(rsp *http.Response) (*ApiProjectBadgesTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectBadgesTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Token *string `json:"token,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectBranchesDeleteResponse parses an HTTP response from a ApiProjectBranchesDeleteWithResponse call
func ParseApiProjectBranchesDeleteResponse(rsp *http.Response) (*ApiProjectBranchesDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectBranchesDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectBranchesListResponse parses an HTTP response from a ApiProjectBranchesListWithResponse call
func ParseApiProjectBranchesListResponse(rsp *http.Response) (*ApiProjectBranchesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectBranchesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Branches *[]struct {
				AnalysisDate      *string `json:"analysisDate,omitempty"`
				ExcludedFromPurge *bool   `json:"excludedFromPurge,omitempty"`
				IsMain            *bool   `json:"isMain,omitempty"`
				Name              *string `json:"name,omitempty"`
				Status            *struct {
					QualityGateStatus *string `json:"qualityGateStatus,omitempty"`
				} `json:"status,omitempty"`
				Type *string `json:"type,omitempty"`
			} `json:"branches,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectBranchesRenameResponse parses an HTTP response from a ApiProjectBranchesRenameWithResponse call
func ParseApiProjectBranchesRenameResponse(rsp *http.Response) (*ApiProjectBranchesRenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectBranchesRenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectBranchesSetAutomaticDeletionProtectionResponse parses an HTTP response from a ApiProjectBranchesSetAutomaticDeletionProtectionWithResponse call
func ParseApiProjectBranchesSetAutomaticDeletionProtectionResponse(rsp *http.Response) (*ApiProjectBranchesSetAutomaticDeletionProtectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectBranchesSetAutomaticDeletionProtectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectDumpExportResponse parses an HTTP response from a ApiProjectDumpExportWithResponse call
func ParseApiProjectDumpExportResponse(rsp *http.Response) (*ApiProjectDumpExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectDumpExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			ProjectId   *string `json:"projectId,omitempty"`
			ProjectKey  *string `json:"projectKey,omitempty"`
			ProjectName *string `json:"projectName,omitempty"`
			TaskId      *string `json:"taskId,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectLinksCreateResponse parses an HTTP response from a ApiProjectLinksCreateWithResponse call
func ParseApiProjectLinksCreateResponse(rsp *http.Response) (*ApiProjectLinksCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectLinksCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Link *struct {
				Id   *string `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
				Url  *string `json:"url,omitempty"`
			} `json:"link,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectLinksDeleteResponse parses an HTTP response from a ApiProjectLinksDeleteWithResponse call
func ParseApiProjectLinksDeleteResponse(rsp *http.Response) (*ApiProjectLinksDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectLinksDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectLinksSearchResponse parses an HTTP response from a ApiProjectLinksSearchWithResponse call
func ParseApiProjectLinksSearchResponse(rsp *http.Response) (*ApiProjectLinksSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectLinksSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Links *[]struct {
				Id   *string `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
				Type *string `json:"type,omitempty"`
				Url  *string `json:"url,omitempty"`
			} `json:"links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectTagsSearchResponse parses an HTTP response from a ApiProjectTagsSearchWithResponse call
func ParseApiProjectTagsSearchResponse(rsp *http.Response) (*ApiProjectTagsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectTagsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Tags *[]string `json:"tags,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectTagsSetResponse parses an HTTP response from a ApiProjectTagsSetWithResponse call
func ParseApiProjectTagsSetResponse(rsp *http.Response) (*ApiProjectTagsSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectTagsSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectsBulkDeleteResponse parses an HTTP response from a ApiProjectsBulkDeleteWithResponse call
func ParseApiProjectsBulkDeleteResponse(rsp *http.Response) (*ApiProjectsBulkDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectsBulkDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectsCreateResponse parses an HTTP response from a ApiProjectsCreateWithResponse call
func ParseApiProjectsCreateResponse(rsp *http.Response) (*ApiProjectsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Project *struct {
				Key       *string `json:"key,omitempty"`
				Name      *string `json:"name,omitempty"`
				Qualifier *string `json:"qualifier,omitempty"`
			} `json:"project,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectsDeleteResponse parses an HTTP response from a ApiProjectsDeleteWithResponse call
func ParseApiProjectsDeleteResponse(rsp *http.Response) (*ApiProjectsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectsSearchResponse parses an HTTP response from a ApiProjectsSearchWithResponse call
func ParseApiProjectsSearchResponse(rsp *http.Response) (*ApiProjectsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Components *[]struct {
				Key              *string `json:"key,omitempty"`
				LastAnalysisDate *string `json:"lastAnalysisDate,omitempty"`
				Name             *string `json:"name,omitempty"`
				Qualifier        *string `json:"qualifier,omitempty"`
				Revision         *string `json:"revision,omitempty"`
				Visibility       *string `json:"visibility,omitempty"`
			} `json:"components,omitempty"`
			Paging *struct {
				PageIndex *int `json:"pageIndex,omitempty"`
				PageSize  *int `json:"pageSize,omitempty"`
				Total     *int `json:"total,omitempty"`
			} `json:"paging,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectsUpdateKeyResponse parses an HTTP response from a ApiProjectsUpdateKeyWithResponse call
func ParseApiProjectsUpdateKeyResponse(rsp *http.Response) (*ApiProjectsUpdateKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectsUpdateKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiProjectsUpdateVisibilityResponse parses an HTTP response from a ApiProjectsUpdateVisibilityWithResponse call
func ParseApiProjectsUpdateVisibilityResponse(rsp *http.Response) (*ApiProjectsUpdateVisibilityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiProjectsUpdateVisibilityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualitygatesCopyResponse parses an HTTP response from a ApiQualitygatesCopyWithResponse call
func ParseApiQualitygatesCopyResponse(rsp *http.Response) (*ApiQualitygatesCopyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualitygatesCopyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualitygatesCreateResponse parses an HTTP response from a ApiQualitygatesCreateWithResponse call
func ParseApiQualitygatesCreateResponse(rsp *http.Response) (*ApiQualitygatesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualitygatesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Id   *string `json:"id,omitempty"`
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualitygatesCreateConditionResponse parses an HTTP response from a ApiQualitygatesCreateConditionWithResponse call
func ParseApiQualitygatesCreateConditionResponse(rsp *http.Response) (*ApiQualitygatesCreateConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualitygatesCreateConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Id      *string `json:"id,omitempty"`
			Metric  *string `json:"metric,omitempty"`
			Op      *string `json:"op,omitempty"`
			Warning *string `json:"warning,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualitygatesDeleteConditionResponse parses an HTTP response from a ApiQualitygatesDeleteConditionWithResponse call
func ParseApiQualitygatesDeleteConditionResponse(rsp *http.Response) (*ApiQualitygatesDeleteConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualitygatesDeleteConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualitygatesDeselectResponse parses an HTTP response from a ApiQualitygatesDeselectWithResponse call
func ParseApiQualitygatesDeselectResponse(rsp *http.Response) (*ApiQualitygatesDeselectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualitygatesDeselectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualitygatesDestroyResponse parses an HTTP response from a ApiQualitygatesDestroyWithResponse call
func ParseApiQualitygatesDestroyResponse(rsp *http.Response) (*ApiQualitygatesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualitygatesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualitygatesGetByProjectResponse parses an HTTP response from a ApiQualitygatesGetByProjectWithResponse call
func ParseApiQualitygatesGetByProjectResponse(rsp *http.Response) (*ApiQualitygatesGetByProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualitygatesGetByProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			QualityGate *struct {
				Default *bool   `json:"default,omitempty"`
				Id      *string `json:"id,omitempty"`
				Name    *string `json:"name,omitempty"`
			} `json:"qualityGate,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualitygatesListResponse parses an HTTP response from a ApiQualitygatesListWithResponse call
func ParseApiQualitygatesListResponse(rsp *http.Response) (*ApiQualitygatesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualitygatesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Actions *struct {
				Create *bool `json:"create,omitempty"`
			} `json:"actions,omitempty"`
			Default      *string `json:"default,omitempty"`
			Qualitygates *[]struct {
				Actions *struct {
					AssociateProjects *bool `json:"associateProjects,omitempty"`
					Copy              *bool `json:"copy,omitempty"`
					Delegate          *bool `json:"delegate,omitempty"`
					Delete            *bool `json:"delete,omitempty"`
					ManageConditions  *bool `json:"manageConditions,omitempty"`
					Rename            *bool `json:"rename,omitempty"`
					SetAsDefault      *bool `json:"setAsDefault,omitempty"`
				} `json:"actions,omitempty"`
				CaycStatus *string `json:"caycStatus,omitempty"`
				Id         *string `json:"id,omitempty"`
				IsBuiltIn  *bool   `json:"isBuiltIn,omitempty"`
				IsDefault  *bool   `json:"isDefault,omitempty"`
				Name       *string `json:"name,omitempty"`
			} `json:"qualitygates,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualitygatesProjectStatusResponse parses an HTTP response from a ApiQualitygatesProjectStatusWithResponse call
func ParseApiQualitygatesProjectStatusResponse(rsp *http.Response) (*ApiQualitygatesProjectStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualitygatesProjectStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			ProjectStatus *struct {
				CaycStatus *string `json:"caycStatus,omitempty"`
				Conditions *[]struct {
					ActualValue    *string `json:"actualValue,omitempty"`
					Comparator     *string `json:"comparator,omitempty"`
					ErrorThreshold *string `json:"errorThreshold,omitempty"`
					MetricKey      *string `json:"metricKey,omitempty"`
					PeriodIndex    *int    `json:"periodIndex,omitempty"`
					Status         *string `json:"status,omitempty"`
				} `json:"conditions,omitempty"`
				IgnoredConditions *bool `json:"ignoredConditions,omitempty"`
				Period            *struct {
					Date      *string `json:"date,omitempty"`
					Mode      *string `json:"mode,omitempty"`
					Parameter *string `json:"parameter,omitempty"`
				} `json:"period,omitempty"`
				Periods *[]struct {
					Date      *string `json:"date,omitempty"`
					Index     *int    `json:"index,omitempty"`
					Mode      *string `json:"mode,omitempty"`
					Parameter *string `json:"parameter,omitempty"`
				} `json:"periods,omitempty"`
				Status *string `json:"status,omitempty"`
			} `json:"projectStatus,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualitygatesRenameResponse parses an HTTP response from a ApiQualitygatesRenameWithResponse call
func ParseApiQualitygatesRenameResponse(rsp *http.Response) (*ApiQualitygatesRenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualitygatesRenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualitygatesSearchResponse parses an HTTP response from a ApiQualitygatesSearchWithResponse call
func ParseApiQualitygatesSearchResponse(rsp *http.Response) (*ApiQualitygatesSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualitygatesSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Paging *struct {
				PageIndex *int `json:"pageIndex,omitempty"`
				PageSize  *int `json:"pageSize,omitempty"`
				Total     *int `json:"total,omitempty"`
			} `json:"paging,omitempty"`
			Results *[]struct {
				Key      *string `json:"key,omitempty"`
				Name     *string `json:"name,omitempty"`
				Selected *bool   `json:"selected,omitempty"`
			} `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualitygatesSelectResponse parses an HTTP response from a ApiQualitygatesSelectWithResponse call
func ParseApiQualitygatesSelectResponse(rsp *http.Response) (*ApiQualitygatesSelectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualitygatesSelectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualitygatesSetAsDefaultResponse parses an HTTP response from a ApiQualitygatesSetAsDefaultWithResponse call
func ParseApiQualitygatesSetAsDefaultResponse(rsp *http.Response) (*ApiQualitygatesSetAsDefaultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualitygatesSetAsDefaultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualitygatesShowResponse parses an HTTP response from a ApiQualitygatesShowWithResponse call
func ParseApiQualitygatesShowResponse(rsp *http.Response) (*ApiQualitygatesShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualitygatesShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Actions *struct {
				AssociateProjects *bool `json:"associateProjects,omitempty"`
				Copy              *bool `json:"copy,omitempty"`
				Delegate          *bool `json:"delegate,omitempty"`
				Delete            *bool `json:"delete,omitempty"`
				ManageConditions  *bool `json:"manageConditions,omitempty"`
				Rename            *bool `json:"rename,omitempty"`
				SetAsDefault      *bool `json:"setAsDefault,omitempty"`
			} `json:"actions,omitempty"`
			CaycStatus *string `json:"caycStatus,omitempty"`
			Conditions *[]struct {
				Error  *string `json:"error,omitempty"`
				Id     *string `json:"id,omitempty"`
				Metric *string `json:"metric,omitempty"`
				Op     *string `json:"op,omitempty"`
			} `json:"conditions,omitempty"`
			Id        *string `json:"id,omitempty"`
			IsBuiltIn *bool   `json:"isBuiltIn,omitempty"`
			Name      *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualitygatesUpdateConditionResponse parses an HTTP response from a ApiQualitygatesUpdateConditionWithResponse call
func ParseApiQualitygatesUpdateConditionResponse(rsp *http.Response) (*ApiQualitygatesUpdateConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualitygatesUpdateConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualityprofilesActivateRuleResponse parses an HTTP response from a ApiQualityprofilesActivateRuleWithResponse call
func ParseApiQualityprofilesActivateRuleResponse(rsp *http.Response) (*ApiQualityprofilesActivateRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualityprofilesActivateRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualityprofilesActivateRulesResponse parses an HTTP response from a ApiQualityprofilesActivateRulesWithResponse call
func ParseApiQualityprofilesActivateRulesResponse(rsp *http.Response) (*ApiQualityprofilesActivateRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualityprofilesActivateRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualityprofilesAddProjectResponse parses an HTTP response from a ApiQualityprofilesAddProjectWithResponse call
func ParseApiQualityprofilesAddProjectResponse(rsp *http.Response) (*ApiQualityprofilesAddProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualityprofilesAddProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualityprofilesBackupResponse parses an HTTP response from a ApiQualityprofilesBackupWithResponse call
func ParseApiQualityprofilesBackupResponse(rsp *http.Response) (*ApiQualityprofilesBackupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualityprofilesBackupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode/100 == 2:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML2XX = &dest

	}

	return response, nil
}

// ParseApiQualityprofilesChangeParentResponse parses an HTTP response from a ApiQualityprofilesChangeParentWithResponse call
func ParseApiQualityprofilesChangeParentResponse(rsp *http.Response) (*ApiQualityprofilesChangeParentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualityprofilesChangeParentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualityprofilesChangelogResponse parses an HTTP response from a ApiQualityprofilesChangelogWithResponse call
func ParseApiQualityprofilesChangelogResponse(rsp *http.Response) (*ApiQualityprofilesChangelogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualityprofilesChangelogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Events *[]struct {
				Action      *string `json:"action,omitempty"`
				AuthorLogin *string `json:"authorLogin,omitempty"`
				AuthorName  *string `json:"authorName,omitempty"`
				Date        *string `json:"date,omitempty"`
				Params      *struct {
					Severity *string `json:"severity,omitempty"`
				} `json:"params,omitempty"`
				RuleKey  *string `json:"ruleKey,omitempty"`
				RuleName *string `json:"ruleName,omitempty"`
			} `json:"events,omitempty"`
			Paging *struct {
				PageIndex *int `json:"pageIndex,omitempty"`
				PageSize  *int `json:"pageSize,omitempty"`
				Total     *int `json:"total,omitempty"`
			} `json:"paging,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualityprofilesCopyResponse parses an HTTP response from a ApiQualityprofilesCopyWithResponse call
func ParseApiQualityprofilesCopyResponse(rsp *http.Response) (*ApiQualityprofilesCopyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualityprofilesCopyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			IsDefault   *bool   `json:"isDefault,omitempty"`
			IsInherited *bool   `json:"isInherited,omitempty"`
			Key         *string `json:"key,omitempty"`
			Language    *string `json:"language,omitempty"`
			Name        *string `json:"name,omitempty"`
			ParentKey   *string `json:"parentKey,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualityprofilesCreateResponse parses an HTTP response from a ApiQualityprofilesCreateWithResponse call
func ParseApiQualityprofilesCreateResponse(rsp *http.Response) (*ApiQualityprofilesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualityprofilesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Profile *struct {
				IsDefault    *bool   `json:"isDefault,omitempty"`
				IsInherited  *bool   `json:"isInherited,omitempty"`
				Key          *string `json:"key,omitempty"`
				Language     *string `json:"language,omitempty"`
				LanguageName *string `json:"languageName,omitempty"`
				Name         *string `json:"name,omitempty"`
			} `json:"profile,omitempty"`
			Warnings *[]string `json:"warnings,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualityprofilesDeactivateRuleResponse parses an HTTP response from a ApiQualityprofilesDeactivateRuleWithResponse call
func ParseApiQualityprofilesDeactivateRuleResponse(rsp *http.Response) (*ApiQualityprofilesDeactivateRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualityprofilesDeactivateRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualityprofilesDeactivateRulesResponse parses an HTTP response from a ApiQualityprofilesDeactivateRulesWithResponse call
func ParseApiQualityprofilesDeactivateRulesResponse(rsp *http.Response) (*ApiQualityprofilesDeactivateRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualityprofilesDeactivateRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualityprofilesDeleteResponse parses an HTTP response from a ApiQualityprofilesDeleteWithResponse call
func ParseApiQualityprofilesDeleteResponse(rsp *http.Response) (*ApiQualityprofilesDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualityprofilesDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualityprofilesExportResponse parses an HTTP response from a ApiQualityprofilesExportWithResponse call
func ParseApiQualityprofilesExportResponse(rsp *http.Response) (*ApiQualityprofilesExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualityprofilesExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode/100 == 2:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML2XX = &dest

	}

	return response, nil
}

// ParseApiQualityprofilesExportersResponse parses an HTTP response from a ApiQualityprofilesExportersWithResponse call
func ParseApiQualityprofilesExportersResponse(rsp *http.Response) (*ApiQualityprofilesExportersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualityprofilesExportersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Exporters *[]struct {
				Key       *string   `json:"key,omitempty"`
				Languages *[]string `json:"languages,omitempty"`
				Name      *string   `json:"name,omitempty"`
			} `json:"exporters,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualityprofilesImportersResponse parses an HTTP response from a ApiQualityprofilesImportersWithResponse call
func ParseApiQualityprofilesImportersResponse(rsp *http.Response) (*ApiQualityprofilesImportersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualityprofilesImportersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Importers *[]struct {
				Key       *string   `json:"key,omitempty"`
				Languages *[]string `json:"languages,omitempty"`
				Name      *string   `json:"name,omitempty"`
			} `json:"importers,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualityprofilesInheritanceResponse parses an HTTP response from a ApiQualityprofilesInheritanceWithResponse call
func ParseApiQualityprofilesInheritanceResponse(rsp *http.Response) (*ApiQualityprofilesInheritanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualityprofilesInheritanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Ancestors *[]struct {
				ActiveRuleCount *int    `json:"activeRuleCount,omitempty"`
				IsBuiltIn       *bool   `json:"isBuiltIn,omitempty"`
				Key             *string `json:"key,omitempty"`
				Name            *string `json:"name,omitempty"`
				Parent          *string `json:"parent,omitempty"`
			} `json:"ancestors,omitempty"`
			Children *[]struct {
				ActiveRuleCount *int    `json:"activeRuleCount,omitempty"`
				IsBuiltIn       *bool   `json:"isBuiltIn,omitempty"`
				Key             *string `json:"key,omitempty"`
				Name            *string `json:"name,omitempty"`
			} `json:"children,omitempty"`
			Profile *struct {
				ActiveRuleCount     *int    `json:"activeRuleCount,omitempty"`
				IsBuiltIn           *bool   `json:"isBuiltIn,omitempty"`
				Key                 *string `json:"key,omitempty"`
				Name                *string `json:"name,omitempty"`
				OverridingRuleCount *int    `json:"overridingRuleCount,omitempty"`
				Parent              *string `json:"parent,omitempty"`
			} `json:"profile,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualityprofilesProjectsResponse parses an HTTP response from a ApiQualityprofilesProjectsWithResponse call
func ParseApiQualityprofilesProjectsResponse(rsp *http.Response) (*ApiQualityprofilesProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualityprofilesProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Paging *struct {
				PageIndex *int `json:"pageIndex,omitempty"`
				PageSize  *int `json:"pageSize,omitempty"`
				Total     *int `json:"total,omitempty"`
			} `json:"paging,omitempty"`
			Results *[]struct {
				Id       *string `json:"id,omitempty"`
				Key      *string `json:"key,omitempty"`
				Name     *string `json:"name,omitempty"`
				Selected *bool   `json:"selected,omitempty"`
			} `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualityprofilesRemoveProjectResponse parses an HTTP response from a ApiQualityprofilesRemoveProjectWithResponse call
func ParseApiQualityprofilesRemoveProjectResponse(rsp *http.Response) (*ApiQualityprofilesRemoveProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualityprofilesRemoveProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualityprofilesRenameResponse parses an HTTP response from a ApiQualityprofilesRenameWithResponse call
func ParseApiQualityprofilesRenameResponse(rsp *http.Response) (*ApiQualityprofilesRenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualityprofilesRenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualityprofilesRestoreResponse parses an HTTP response from a ApiQualityprofilesRestoreWithResponse call
func ParseApiQualityprofilesRestoreResponse(rsp *http.Response) (*ApiQualityprofilesRestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualityprofilesRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualityprofilesSearchResponse parses an HTTP response from a ApiQualityprofilesSearchWithResponse call
func ParseApiQualityprofilesSearchResponse(rsp *http.Response) (*ApiQualityprofilesSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualityprofilesSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Actions *struct {
				Create *bool `json:"create,omitempty"`
			} `json:"actions,omitempty"`
			Profiles *[]struct {
				Actions *struct {
					AssociateProjects *bool `json:"associateProjects,omitempty"`
					Copy              *bool `json:"copy,omitempty"`
					Delete            *bool `json:"delete,omitempty"`
					Edit              *bool `json:"edit,omitempty"`
					SetAsDefault      *bool `json:"setAsDefault,omitempty"`
				} `json:"actions,omitempty"`
				ActiveDeprecatedRuleCount *int    `json:"activeDeprecatedRuleCount,omitempty"`
				ActiveRuleCount           *int    `json:"activeRuleCount,omitempty"`
				IsBuiltIn                 *bool   `json:"isBuiltIn,omitempty"`
				IsDefault                 *bool   `json:"isDefault,omitempty"`
				IsInherited               *bool   `json:"isInherited,omitempty"`
				Key                       *string `json:"key,omitempty"`
				Language                  *string `json:"language,omitempty"`
				LanguageName              *string `json:"languageName,omitempty"`
				LastUsed                  *string `json:"lastUsed,omitempty"`
				Name                      *string `json:"name,omitempty"`
				RuleUpdatedAt             *string `json:"ruleUpdatedAt,omitempty"`
			} `json:"profiles,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiQualityprofilesSetDefaultResponse parses an HTTP response from a ApiQualityprofilesSetDefaultWithResponse call
func ParseApiQualityprofilesSetDefaultResponse(rsp *http.Response) (*ApiQualityprofilesSetDefaultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiQualityprofilesSetDefaultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiRulesCreateResponse parses an HTTP response from a ApiRulesCreateWithResponse call
func ParseApiRulesCreateResponse(rsp *http.Response) (*ApiRulesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiRulesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Rule *struct {
				CreatedAt  *string `json:"createdAt,omitempty"`
				HtmlDesc   *string `json:"htmlDesc,omitempty"`
				IsExternal *bool   `json:"isExternal,omitempty"`
				IsTemplate *bool   `json:"isTemplate,omitempty"`
				Key        *string `json:"key,omitempty"`
				Lang       *string `json:"lang,omitempty"`
				LangName   *string `json:"langName,omitempty"`
				MdDesc     *string `json:"mdDesc,omitempty"`
				Name       *string `json:"name,omitempty"`
				Params     *[]struct {
					DefaultValue *string `json:"defaultValue,omitempty"`
					HtmlDesc     *string `json:"htmlDesc,omitempty"`
					Key          *string `json:"key,omitempty"`
					Type         *string `json:"type,omitempty"`
				} `json:"params,omitempty"`
				Repo        *string   `json:"repo,omitempty"`
				Scope       *string   `json:"scope,omitempty"`
				Severity    *string   `json:"severity,omitempty"`
				Status      *string   `json:"status,omitempty"`
				SysTags     *[]string `json:"sysTags,omitempty"`
				TemplateKey *string   `json:"templateKey,omitempty"`
				Type        *string   `json:"type,omitempty"`
			} `json:"rule,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiRulesDeleteResponse parses an HTTP response from a ApiRulesDeleteWithResponse call
func ParseApiRulesDeleteResponse(rsp *http.Response) (*ApiRulesDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiRulesDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiRulesRepositoriesResponse parses an HTTP response from a ApiRulesRepositoriesWithResponse call
func ParseApiRulesRepositoriesResponse(rsp *http.Response) (*ApiRulesRepositoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiRulesRepositoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Repositories *[]struct {
				Key      *string `json:"key,omitempty"`
				Language *string `json:"language,omitempty"`
				Name     *string `json:"name,omitempty"`
			} `json:"repositories,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiRulesSearchResponse parses an HTTP response from a ApiRulesSearchWithResponse call
func ParseApiRulesSearchResponse(rsp *http.Response) (*ApiRulesSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiRulesSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Actives *struct {
				SquidClassCyclomaticComplexity *[]struct {
					Inherit *string `json:"inherit,omitempty"`
					Params  *[]struct {
						Key   *string `json:"key,omitempty"`
						Value *string `json:"value,omitempty"`
					} `json:"params,omitempty"`
					QProfile *string `json:"qProfile,omitempty"`
					Severity *string `json:"severity,omitempty"`
				} `json:"squid:ClassCyclomaticComplexity,omitempty"`
				SquidMethodCyclomaticComplexity *[]struct {
					Inherit *string `json:"inherit,omitempty"`
					Params  *[]struct {
						Key   *string `json:"key,omitempty"`
						Value *string `json:"value,omitempty"`
					} `json:"params,omitempty"`
					QProfile *string `json:"qProfile,omitempty"`
					Severity *string `json:"severity,omitempty"`
				} `json:"squid:MethodCyclomaticComplexity,omitempty"`
				SquidS1067 *[]struct {
					Inherit *string `json:"inherit,omitempty"`
					Params  *[]struct {
						Key   *string `json:"key,omitempty"`
						Value *string `json:"value,omitempty"`
					} `json:"params,omitempty"`
					QProfile *string `json:"qProfile,omitempty"`
					Severity *string `json:"severity,omitempty"`
				} `json:"squid:S1067,omitempty"`
			} `json:"actives,omitempty"`
			Facets *[]struct {
				Name   *string `json:"name,omitempty"`
				Values *[]struct {
					Count *int    `json:"count,omitempty"`
					Val   *string `json:"val,omitempty"`
				} `json:"values,omitempty"`
			} `json:"facets,omitempty"`
			Paging *struct {
				PageIndex *int `json:"pageIndex,omitempty"`
				PageSize  *int `json:"pageSize,omitempty"`
				Total     *int `json:"total,omitempty"`
			} `json:"paging,omitempty"`
			Rules *[]struct {
				CreatedAt           *string `json:"createdAt,omitempty"`
				DescriptionSections *[]struct {
					Content *string `json:"content,omitempty"`
					Key     *string `json:"key,omitempty"`
				} `json:"descriptionSections,omitempty"`
				HtmlDesc    *string `json:"htmlDesc,omitempty"`
				InternalKey *string `json:"internalKey,omitempty"`
				IsExternal  *bool   `json:"isExternal,omitempty"`
				IsTemplate  *bool   `json:"isTemplate,omitempty"`
				Key         *string `json:"key,omitempty"`
				Lang        *string `json:"lang,omitempty"`
				LangName    *string `json:"langName,omitempty"`
				Name        *string `json:"name,omitempty"`
				Params      *[]struct {
					DefaultValue *string `json:"defaultValue,omitempty"`
					Desc         *string `json:"desc,omitempty"`
					Key          *string `json:"key,omitempty"`
				} `json:"params,omitempty"`
				Repo      *string   `json:"repo,omitempty"`
				Scope     *string   `json:"scope,omitempty"`
				Severity  *string   `json:"severity,omitempty"`
				Status    *string   `json:"status,omitempty"`
				SysTags   *[]string `json:"sysTags,omitempty"`
				Tags      *[]string `json:"tags,omitempty"`
				Type      *string   `json:"type,omitempty"`
				UpdatedAt *string   `json:"updatedAt,omitempty"`
			} `json:"rules,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiRulesShowResponse parses an HTTP response from a ApiRulesShowWithResponse call
func ParseApiRulesShowResponse(rsp *http.Response) (*ApiRulesShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiRulesShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Actives *[]struct {
				Inherit *string `json:"inherit,omitempty"`
				Params  *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"params,omitempty"`
				QProfile *string `json:"qProfile,omitempty"`
				Severity *string `json:"severity,omitempty"`
			} `json:"actives,omitempty"`
			Rule *struct {
				DefaultRemFnBaseEffort    *string `json:"defaultRemFnBaseEffort,omitempty"`
				DefaultRemFnGapMultiplier *string `json:"defaultRemFnGapMultiplier,omitempty"`
				DefaultRemFnType          *string `json:"defaultRemFnType,omitempty"`
				DescriptionSections       *[]struct {
					Content *string `json:"content,omitempty"`
					Key     *string `json:"key,omitempty"`
				} `json:"descriptionSections,omitempty"`
				GapDescription *string `json:"gapDescription,omitempty"`
				HtmlDesc       *string `json:"htmlDesc,omitempty"`
				InternalKey    *string `json:"internalKey,omitempty"`
				IsExternal     *bool   `json:"isExternal,omitempty"`
				Key            *string `json:"key,omitempty"`
				Lang           *string `json:"lang,omitempty"`
				LangName       *string `json:"langName,omitempty"`
				Name           *string `json:"name,omitempty"`
				Params         *[]struct {
					DefaultValue *string `json:"defaultValue,omitempty"`
					Desc         *string `json:"desc,omitempty"`
					Key          *string `json:"key,omitempty"`
				} `json:"params,omitempty"`
				RemFnBaseEffort    *string   `json:"remFnBaseEffort,omitempty"`
				RemFnGapMultiplier *string   `json:"remFnGapMultiplier,omitempty"`
				RemFnOverloaded    *bool     `json:"remFnOverloaded,omitempty"`
				RemFnType          *string   `json:"remFnType,omitempty"`
				Repo               *string   `json:"repo,omitempty"`
				Scope              *string   `json:"scope,omitempty"`
				Severity           *string   `json:"severity,omitempty"`
				Status             *string   `json:"status,omitempty"`
				SysTags            *[]string `json:"sysTags,omitempty"`
				Tags               *[]string `json:"tags,omitempty"`
				Template           *bool     `json:"template,omitempty"`
				Type               *string   `json:"type,omitempty"`
			} `json:"rule,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiRulesTagsResponse parses an HTTP response from a ApiRulesTagsWithResponse call
func ParseApiRulesTagsResponse(rsp *http.Response) (*ApiRulesTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiRulesTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Tags *[]string `json:"tags,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiRulesUpdateResponse parses an HTTP response from a ApiRulesUpdateWithResponse call
func ParseApiRulesUpdateResponse(rsp *http.Response) (*ApiRulesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiRulesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Rule *struct {
				CreatedAt      *string `json:"createdAt,omitempty"`
				DebtOverloaded *bool   `json:"debtOverloaded,omitempty"`
				HtmlDesc       *string `json:"htmlDesc,omitempty"`
				IsExternal     *bool   `json:"isExternal,omitempty"`
				IsTemplate     *bool   `json:"isTemplate,omitempty"`
				Key            *string `json:"key,omitempty"`
				Lang           *string `json:"lang,omitempty"`
				LangName       *string `json:"langName,omitempty"`
				MdDesc         *string `json:"mdDesc,omitempty"`
				Name           *string `json:"name,omitempty"`
				Params         *[]struct {
					DefaultValue *string `json:"defaultValue,omitempty"`
					HtmlDesc     *string `json:"htmlDesc,omitempty"`
					Key          *string `json:"key,omitempty"`
					Type         *string `json:"type,omitempty"`
				} `json:"params,omitempty"`
				RemFnOverloaded *bool     `json:"remFnOverloaded,omitempty"`
				Repo            *string   `json:"repo,omitempty"`
				Scope           *string   `json:"scope,omitempty"`
				Severity        *string   `json:"severity,omitempty"`
				Status          *string   `json:"status,omitempty"`
				SysTags         *[]string `json:"sysTags,omitempty"`
				Tags            *[]string `json:"tags,omitempty"`
				TemplateKey     *string   `json:"templateKey,omitempty"`
				Type            *string   `json:"type,omitempty"`
			} `json:"rule,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiServerVersionResponse parses an HTTP response from a ApiServerVersionWithResponse call
func ParseApiServerVersionResponse(rsp *http.Response) (*ApiServerVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiServerVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiSettingsListDefinitionsResponse parses an HTTP response from a ApiSettingsListDefinitionsWithResponse call
func ParseApiSettingsListDefinitionsResponse(rsp *http.Response) (*ApiSettingsListDefinitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiSettingsListDefinitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Definitions *[]struct {
				Category     *string `json:"category,omitempty"`
				DefaultValue *string `json:"defaultValue,omitempty"`
				Description  *string `json:"description,omitempty"`
				Fields       *[]struct {
					Description *string   `json:"description,omitempty"`
					Key         *string   `json:"key,omitempty"`
					Name        *string   `json:"name,omitempty"`
					Options     *[]string `json:"options,omitempty"`
					Type        *string   `json:"type,omitempty"`
				} `json:"fields,omitempty"`
				Key         *string   `json:"key,omitempty"`
				MultiValues *bool     `json:"multiValues,omitempty"`
				Name        *string   `json:"name,omitempty"`
				Options     *[]string `json:"options,omitempty"`
				SubCategory *string   `json:"subCategory,omitempty"`
				Type        *string   `json:"type,omitempty"`
			} `json:"definitions,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiSettingsResetResponse parses an HTTP response from a ApiSettingsResetWithResponse call
func ParseApiSettingsResetResponse(rsp *http.Response) (*ApiSettingsResetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiSettingsResetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiSettingsSetResponse parses an HTTP response from a ApiSettingsSetWithResponse call
func ParseApiSettingsSetResponse(rsp *http.Response) (*ApiSettingsSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiSettingsSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiSettingsValuesResponse parses an HTTP response from a ApiSettingsValuesWithResponse call
func ParseApiSettingsValuesResponse(rsp *http.Response) (*ApiSettingsValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiSettingsValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			SetSecuredSettings *[]string `json:"setSecuredSettings,omitempty"`
			Settings           *[]struct {
				Inherited *bool   `json:"inherited,omitempty"`
				Key       *string `json:"key,omitempty"`
				Value     *string `json:"value,omitempty"`
			} `json:"settings,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiSourcesRawResponse parses an HTTP response from a ApiSourcesRawWithResponse call
func ParseApiSourcesRawResponse(rsp *http.Response) (*ApiSourcesRawResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiSourcesRawResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiSourcesScmResponse parses an HTTP response from a ApiSourcesScmWithResponse call
func ParseApiSourcesScmResponse(rsp *http.Response) (*ApiSourcesScmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiSourcesScmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Scm *[][]interface{} `json:"scm,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiSourcesShowResponse parses an HTTP response from a ApiSourcesShowWithResponse call
func ParseApiSourcesShowResponse(rsp *http.Response) (*ApiSourcesShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiSourcesShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Sources *[][]interface{} `json:"sources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiSystemChangeLogLevelResponse parses an HTTP response from a ApiSystemChangeLogLevelWithResponse call
func ParseApiSystemChangeLogLevelResponse(rsp *http.Response) (*ApiSystemChangeLogLevelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiSystemChangeLogLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiSystemDbMigrationStatusResponse parses an HTTP response from a ApiSystemDbMigrationStatusWithResponse call
func ParseApiSystemDbMigrationStatusResponse(rsp *http.Response) (*ApiSystemDbMigrationStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiSystemDbMigrationStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Message   *string `json:"message,omitempty"`
			StartedAt *string `json:"startedAt,omitempty"`
			State     *string `json:"state,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiSystemHealthResponse parses an HTTP response from a ApiSystemHealthWithResponse call
func ParseApiSystemHealthResponse(rsp *http.Response) (*ApiSystemHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiSystemHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Causes *[]struct {
				Message *string `json:"message,omitempty"`
			} `json:"causes,omitempty"`
			Health *string `json:"health,omitempty"`
			Nodes  *[]struct {
				Causes *[]struct {
					Message *string `json:"message,omitempty"`
				} `json:"causes,omitempty"`
				Health    *string `json:"health,omitempty"`
				Host      *string `json:"host,omitempty"`
				Name      *string `json:"name,omitempty"`
				Port      *int    `json:"port,omitempty"`
				StartedAt *string `json:"startedAt,omitempty"`
				Type      *string `json:"type,omitempty"`
			} `json:"nodes,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiSystemInfoResponse parses an HTTP response from a ApiSystemInfoWithResponse call
func ParseApiSystemInfoResponse(rsp *http.Response) (*ApiSystemInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiSystemInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			ALMs *struct {
				GithubConfig *string `json:"Github Config,omitempty"`
				GitlabConfig *string `json:"Gitlab Config,omitempty"`
			} `json:"ALMs,omitempty"`
			Bundled *struct {
				Config     *string `json:"config,omitempty"`
				Csharp     *string `json:"csharp,omitempty"`
				Flex       *string `json:"flex,omitempty"`
				Go         *string `json:"go,omitempty"`
				Iac        *string `json:"iac,omitempty"`
				Jacoco     *string `json:"jacoco,omitempty"`
				Java       *string `json:"java,omitempty"`
				Javascript *string `json:"javascript,omitempty"`
				Kotlin     *string `json:"kotlin,omitempty"`
				Php        *string `json:"php,omitempty"`
				Python     *string `json:"python,omitempty"`
				Ruby       *string `json:"ruby,omitempty"`
				Sonarscala *string `json:"sonarscala,omitempty"`
				Text       *string `json:"text,omitempty"`
				Vbnet      *string `json:"vbnet,omitempty"`
				Web        *string `json:"web,omitempty"`
				Xml        *string `json:"xml,omitempty"`
			} `json:"Bundled,omitempty"`
			ComputeEngineDatabaseConnection *struct {
				PoolActiveConnections  *int `json:"Pool Active Connections,omitempty"`
				PoolIdleConnections    *int `json:"Pool Idle Connections,omitempty"`
				PoolMaxConnections     *int `json:"Pool Max Connections,omitempty"`
				PoolMaxLifetimeMs      *int `json:"Pool Max Lifetime (ms),omitempty"`
				PoolMaxWaitMs          *int `json:"Pool Max Wait (ms),omitempty"`
				PoolMinIdleConnections *int `json:"Pool Min Idle Connections,omitempty"`
				PoolTotalConnections   *int `json:"Pool Total Connections,omitempty"`
			} `json:"Compute Engine Database Connection,omitempty"`
			ComputeEngineJVMProperties *struct {
				AwtToolkit                 *string `json:"awt.toolkit,omitempty"`
				ComRedhatFips              *string `json:"com.redhat.fips,omitempty"`
				ComZaxxerHikariPoolNumber  *string `json:"com.zaxxer.hikari.pool_number,omitempty"`
				FileEncoding               *string `json:"file.encoding,omitempty"`
				FileSeparator              *string `json:"file.separator,omitempty"`
				FtpNonProxyHosts           *string `json:"ftp.nonProxyHosts,omitempty"`
				GopherProxySet             *string `json:"gopherProxySet,omitempty"`
				HttpNonProxyHosts          *string `json:"http.nonProxyHosts,omitempty"`
				JavaAwtGraphicsenv         *string `json:"java.awt.graphicsenv,omitempty"`
				JavaAwtHeadless            *string `json:"java.awt.headless,omitempty"`
				JavaAwtPrinterjob          *string `json:"java.awt.printerjob,omitempty"`
				JavaClassPath              *string `json:"java.class.path,omitempty"`
				JavaClassVersion           *string `json:"java.class.version,omitempty"`
				JavaHome                   *string `json:"java.home,omitempty"`
				JavaIoTmpdir               *string `json:"java.io.tmpdir,omitempty"`
				JavaLibraryPath            *string `json:"java.library.path,omitempty"`
				JavaRuntimeName            *string `json:"java.runtime.name,omitempty"`
				JavaRuntimeVersion         *string `json:"java.runtime.version,omitempty"`
				JavaSpecificationName      *string `json:"java.specification.name,omitempty"`
				JavaSpecificationVendor    *string `json:"java.specification.vendor,omitempty"`
				JavaSpecificationVersion   *string `json:"java.specification.version,omitempty"`
				JavaVendor                 *string `json:"java.vendor,omitempty"`
				JavaVendorUrl              *string `json:"java.vendor.url,omitempty"`
				JavaVendorUrlBug           *string `json:"java.vendor.url.bug,omitempty"`
				JavaVendorVersion          *string `json:"java.vendor.version,omitempty"`
				JavaVersion                *string `json:"java.version,omitempty"`
				JavaVersionDate            *string `json:"java.version.date,omitempty"`
				JavaVmCompressedOopsMode   *string `json:"java.vm.compressedOopsMode,omitempty"`
				JavaVmInfo                 *string `json:"java.vm.info,omitempty"`
				JavaVmName                 *string `json:"java.vm.name,omitempty"`
				JavaVmSpecificationName    *string `json:"java.vm.specification.name,omitempty"`
				JavaVmSpecificationVendor  *string `json:"java.vm.specification.vendor,omitempty"`
				JavaVmSpecificationVersion *string `json:"java.vm.specification.version,omitempty"`
				JavaVmVendor               *string `json:"java.vm.vendor,omitempty"`
				JavaVmVersion              *string `json:"java.vm.version,omitempty"`
				JdkDebug                   *string `json:"jdk.debug,omitempty"`
				JdkVendorVersion           *string `json:"jdk.vendor.version,omitempty"`
				LineSeparator              *string `json:"line.separator,omitempty"`
				OsArch                     *string `json:"os.arch,omitempty"`
				OsName                     *string `json:"os.name,omitempty"`
				OsVersion                  *string `json:"os.version,omitempty"`
				PathSeparator              *string `json:"path.separator,omitempty"`
				SocksNonProxyHosts         *string `json:"socksNonProxyHosts,omitempty"`
				SunArchDataModel           *string `json:"sun.arch.data.model,omitempty"`
				SunBootLibraryPath         *string `json:"sun.boot.library.path,omitempty"`
				SunCpuEndian               *string `json:"sun.cpu.endian,omitempty"`
				SunCpuIsalist              *string `json:"sun.cpu.isalist,omitempty"`
				SunIoUnicodeEncoding       *string `json:"sun.io.unicode.encoding,omitempty"`
				SunJavaCommand             *string `json:"sun.java.command,omitempty"`
				SunJavaLauncher            *string `json:"sun.java.launcher,omitempty"`
				SunJnuEncoding             *string `json:"sun.jnu.encoding,omitempty"`
				SunManagementCompiler      *string `json:"sun.management.compiler,omitempty"`
				SunOsPatchLevel            *string `json:"sun.os.patch.level,omitempty"`
				UserCountry                *string `json:"user.country,omitempty"`
				UserDir                    *string `json:"user.dir,omitempty"`
				UserHome                   *string `json:"user.home,omitempty"`
				UserLanguage               *string `json:"user.language,omitempty"`
				UserName                   *string `json:"user.name,omitempty"`
				UserTimezone               *string `json:"user.timezone,omitempty"`
			} `json:"Compute Engine JVM Properties,omitempty"`
			ComputeEngineJVMState *struct {
				FreeMemoryMB       *int    `json:"Free Memory (MB),omitempty"`
				HeapCommittedMB    *int    `json:"Heap Committed (MB),omitempty"`
				HeapInitMB         *int    `json:"Heap Init (MB),omitempty"`
				HeapMaxMB          *int    `json:"Heap Max (MB),omitempty"`
				HeapUsedMB         *int    `json:"Heap Used (MB),omitempty"`
				MaxMemoryMB        *int    `json:"Max Memory (MB),omitempty"`
				NonHeapCommittedMB *int    `json:"Non Heap Committed (MB),omitempty"`
				NonHeapInitMB      *int    `json:"Non Heap Init (MB),omitempty"`
				NonHeapUsedMB      *int    `json:"Non Heap Used (MB),omitempty"`
				SystemLoadAverage  *string `json:"System Load Average,omitempty"`
				Threads            *int    `json:"Threads,omitempty"`
			} `json:"Compute Engine JVM State,omitempty"`
			ComputeEngineLogging *struct {
				LogsDir   *string `json:"Logs Dir,omitempty"`
				LogsLevel *string `json:"Logs Level,omitempty"`
			} `json:"Compute Engine Logging,omitempty"`
			ComputeEngineTasks *struct {
				InProgress           *int  `json:"In Progress,omitempty"`
				LongestTimePendingMs *int  `json:"Longest Time Pending (ms),omitempty"`
				MaxWorkerCount       *int  `json:"Max Worker Count,omitempty"`
				Pending              *int  `json:"Pending,omitempty"`
				ProcessedWithError   *int  `json:"Processed With Error,omitempty"`
				ProcessedWithSuccess *int  `json:"Processed With Success,omitempty"`
				ProcessingTimeMs     *int  `json:"Processing Time (ms),omitempty"`
				WorkerCount          *int  `json:"Worker Count,omitempty"`
				WorkersPaused        *bool `json:"Workers Paused,omitempty"`
			} `json:"Compute Engine Tasks,omitempty"`
			Database *struct {
				Database                    *string `json:"Database,omitempty"`
				DatabaseVersion             *string `json:"Database Version,omitempty"`
				DefaultTransactionIsolation *string `json:"Default transaction isolation,omitempty"`
				Driver                      *string `json:"Driver,omitempty"`
				DriverVersion               *string `json:"Driver Version,omitempty"`
				URL                         *string `json:"URL,omitempty"`
				Username                    *string `json:"Username,omitempty"`
			} `json:"Database,omitempty"`
			Health       *string   `json:"Health,omitempty"`
			HealthCauses *[]string `json:"Health Causes,omitempty"`
			Plugins      *struct {
				Name *string `json:"name,omitempty"`
			} `json:"Plugins,omitempty"`
			SearchIndexes *struct {
				IndexComponentsDocs           *int    `json:"Index components - Docs,omitempty"`
				IndexComponentsShards         *int    `json:"Index components - Shards,omitempty"`
				IndexComponentsStoreSize      *string `json:"Index components - Store Size,omitempty"`
				IndexIssuesDocs               *int    `json:"Index issues - Docs,omitempty"`
				IndexIssuesShards             *int    `json:"Index issues - Shards,omitempty"`
				IndexIssuesStoreSize          *string `json:"Index issues - Store Size,omitempty"`
				IndexMetadatasDocs            *int    `json:"Index metadatas - Docs,omitempty"`
				IndexMetadatasShards          *int    `json:"Index metadatas - Shards,omitempty"`
				IndexMetadatasStoreSize       *string `json:"Index metadatas - Store Size,omitempty"`
				IndexProjectmeasuresDocs      *int    `json:"Index projectmeasures - Docs,omitempty"`
				IndexProjectmeasuresShards    *int    `json:"Index projectmeasures - Shards,omitempty"`
				IndexProjectmeasuresStoreSize *string `json:"Index projectmeasures - Store Size,omitempty"`
				IndexRulesDocs                *int    `json:"Index rules - Docs,omitempty"`
				IndexRulesShards              *int    `json:"Index rules - Shards,omitempty"`
				IndexRulesStoreSize           *string `json:"Index rules - Store Size,omitempty"`
				IndexUsersDocs                *int    `json:"Index users - Docs,omitempty"`
				IndexUsersShards              *int    `json:"Index users - Shards,omitempty"`
				IndexUsersStoreSize           *string `json:"Index users - Store Size,omitempty"`
				IndexViewsDocs                *int    `json:"Index views - Docs,omitempty"`
				IndexViewsShards              *int    `json:"Index views - Shards,omitempty"`
				IndexViewsStoreSize           *string `json:"Index views - Store Size,omitempty"`
			} `json:"Search Indexes,omitempty"`
			SearchState *struct {
				CPUUsage                          *int    `json:"CPU Usage (%),omitempty"`
				DiskAvailable                     *string `json:"Disk Available,omitempty"`
				FieldDataCircuitBreakerEstimation *string `json:"Field Data Circuit Breaker Estimation,omitempty"`
				FieldDataCircuitBreakerLimit      *string `json:"Field Data Circuit Breaker Limit,omitempty"`
				FieldDataMemory                   *string `json:"Field Data Memory,omitempty"`
				JVMHeapMax                        *string `json:"JVM Heap Max,omitempty"`
				JVMHeapUsage                      *string `json:"JVM Heap Usage,omitempty"`
				JVMHeapUsed                       *string `json:"JVM Heap Used,omitempty"`
				JVMNonHeapUsed                    *string `json:"JVM Non Heap Used,omitempty"`
				JVMThreads                        *int    `json:"JVM Threads,omitempty"`
				MaxFileDescriptors                *int    `json:"Max File Descriptors,omitempty"`
				OpenFileDescriptors               *int    `json:"Open File Descriptors,omitempty"`
				QueryCacheMemory                  *string `json:"Query Cache Memory,omitempty"`
				RequestCacheMemory                *string `json:"Request Cache Memory,omitempty"`
				RequestCircuitBreakerEstimation   *string `json:"Request Circuit Breaker Estimation,omitempty"`
				RequestCircuitBreakerLimit        *string `json:"Request Circuit Breaker Limit,omitempty"`
				State                             *string `json:"State,omitempty"`
				StoreSize                         *string `json:"Store Size,omitempty"`
				TranslogSize                      *string `json:"Translog Size,omitempty"`
			} `json:"Search State,omitempty"`
			ServerPushConnections *struct {
				SonarLintConnectedClients *int `json:"SonarLint Connected Clients,omitempty"`
			} `json:"Server Push Connections,omitempty"`
			Settings *struct {
				DefaultNewCodeDefinition                               *string `json:"Default New Code Definition,omitempty"`
				DevactivityStatus                                      *string `json:"devactivity.status,omitempty"`
				HttpNonProxyHosts                                      *string `json:"http.nonProxyHosts,omitempty"`
				ProcessGracefulStopTimeout                             *string `json:"process.gracefulStopTimeout,omitempty"`
				ProcessIndex                                           *string `json:"process.index,omitempty"`
				ProcessKey                                             *string `json:"process.key,omitempty"`
				ProcessSharedDir                                       *string `json:"process.sharedDir,omitempty"`
				ProjectsDefaultVisibility                              *string `json:"projects.default.visibility,omitempty"`
				QualitygateDefault                                     *string `json:"qualitygate.default,omitempty"`
				SonarAuthSamlCertificateSecured                        *string `json:"sonar.auth.saml.certificate.secured,omitempty"`
				SonarAuthSamlEnabled                                   *string `json:"sonar.auth.saml.enabled,omitempty"`
				SonarAuthSamlLoginUrl                                  *string `json:"sonar.auth.saml.loginUrl,omitempty"`
				SonarAuthSamlProviderId                                *string `json:"sonar.auth.saml.providerId,omitempty"`
				SonarAuthSamlProviderName                              *string `json:"sonar.auth.saml.providerName,omitempty"`
				SonarAuthSamlSignatureEnabled                          *string `json:"sonar.auth.saml.signature.enabled,omitempty"`
				SonarAuthSamlSpCertificateSecured                      *string `json:"sonar.auth.saml.sp.certificate.secured,omitempty"`
				SonarAuthSamlSpPrivateKeySecured                       *string `json:"sonar.auth.saml.sp.privateKey.secured,omitempty"`
				SonarAuthSamlUserLogin                                 *string `json:"sonar.auth.saml.user.login,omitempty"`
				SonarAuthSamlUserName                                  *string `json:"sonar.auth.saml.user.name,omitempty"`
				SonarAuthenticatorIgnoreStartupFailure                 *string `json:"sonar.authenticator.ignoreStartupFailure,omitempty"`
				SonarAutoDatabaseUpgrade                               *string `json:"sonar.autoDatabaseUpgrade,omitempty"`
				SonarBlueGreenEnabled                                  *string `json:"sonar.blueGreenEnabled,omitempty"`
				SonarBuildbreakerSkip                                  *string `json:"sonar.buildbreaker.skip,omitempty"`
				SonarCPredefinedMacros                                 *string `json:"sonar.c.predefinedMacros,omitempty"`
				SonarCeGracefulStopTimeOutInMs                         *string `json:"sonar.ce.gracefulStopTimeOutInMs,omitempty"`
				SonarCeJavaAdditionalOpts                              *string `json:"sonar.ce.javaAdditionalOpts,omitempty"`
				SonarCeJavaOpts                                        *string `json:"sonar.ce.javaOpts,omitempty"`
				SonarClusterEnabled                                    *string `json:"sonar.cluster.enabled,omitempty"`
				SonarClusterKubernetes                                 *string `json:"sonar.cluster.kubernetes,omitempty"`
				SonarClusterName                                       *string `json:"sonar.cluster.name,omitempty"`
				SonarClusterNodeName                                   *string `json:"sonar.cluster.node.name,omitempty"`
				SonarClusterNodePort                                   *string `json:"sonar.cluster.node.port,omitempty"`
				SonarClusterWebStartupLeader                           *string `json:"sonar.cluster.web.startupLeader,omitempty"`
				SonarCoreId                                            *string `json:"sonar.core.id,omitempty"`
				SonarCoreServerBaseURL                                 *string `json:"sonar.core.serverBaseURL,omitempty"`
				SonarCoreStartTime                                     *string `json:"sonar.core.startTime,omitempty"`
				SonarCoreTreemapColormetric                            *string `json:"sonar.core.treemap.colormetric,omitempty"`
				SonarCoreTreemapSizemetric                             *string `json:"sonar.core.treemap.sizemetric,omitempty"`
				SonarCpdCrossProject                                   *string `json:"sonar.cpd.cross_project,omitempty"`
				SonarDbcleanerBranchesToKeepWhenInactive               *string `json:"sonar.dbcleaner.branchesToKeepWhenInactive,omitempty"`
				SonarDbcleanerDaysBeforeDeletingInactiveBranchesAndPRs *string `json:"sonar.dbcleaner.daysBeforeDeletingInactiveBranchesAndPRs,omitempty"`
				SonarDbcleanerMonthsBeforeDeletingAllSnapshots         *string `json:"sonar.dbcleaner.monthsBeforeDeletingAllSnapshots,omitempty"`
				SonarDbcleanerWeeksBeforeDeletingAllSnapshots          *string `json:"sonar.dbcleaner.weeksBeforeDeletingAllSnapshots,omitempty"`
				SonarDryRunCacheLastUpdate                             *string `json:"sonar.dryRun.cache.lastUpdate,omitempty"`
				SonarEsPort                                            *string `json:"sonar.es.port,omitempty"`
				SonarForceAuthentication                               *string `json:"sonar.forceAuthentication,omitempty"`
				SonarGenericcoverageSuffixes                           *string `json:"sonar.genericcoverage.suffixes,omitempty"`
				SonarGovernanceReportViewFrequency                     *string `json:"sonar.governance.report.view.frequency,omitempty"`
				SonarJavaCoveragePlugin                                *string `json:"sonar.java.coveragePlugin,omitempty"`
				SonarJavascriptJQueryObjectAliases                     *string `json:"sonar.javascript.jQueryObjectAliases,omitempty"`
				SonarJdbcDriverPath                                    *string `json:"sonar.jdbc.driverPath,omitempty"`
				SonarJdbcMaxActive                                     *string `json:"sonar.jdbc.maxActive,omitempty"`
				SonarJdbcMaxWait                                       *string `json:"sonar.jdbc.maxWait,omitempty"`
				SonarJdbcMinIdle                                       *string `json:"sonar.jdbc.minIdle,omitempty"`
				SonarJdbcPassword                                      *string `json:"sonar.jdbc.password,omitempty"`
				SonarJdbcUrl                                           *string `json:"sonar.jdbc.url,omitempty"`
				SonarJdbcUsername                                      *string `json:"sonar.jdbc.username,omitempty"`
				SonarLfEnableGravatar                                  *string `json:"sonar.lf.enableGravatar,omitempty"`
				SonarLfLogoWidthPx                                     *string `json:"sonar.lf.logoWidthPx,omitempty"`
				SonarLogJsonOutput                                     *string `json:"sonar.log.jsonOutput,omitempty"`
				SonarOrganisation                                      *string `json:"sonar.organisation,omitempty"`
				SonarPathData                                          *string `json:"sonar.path.data,omitempty"`
				SonarPathHome                                          *string `json:"sonar.path.home,omitempty"`
				SonarPathLogs                                          *string `json:"sonar.path.logs,omitempty"`
				SonarPathTemp                                          *string `json:"sonar.path.temp,omitempty"`
				SonarPathWeb                                           *string `json:"sonar.path.web,omitempty"`
				SonarPlsqlFileSuffixes                                 *string `json:"sonar.plsql.file.suffixes,omitempty"`
				SonarPluginsRiskConsent                                *string `json:"sonar.plugins.risk.consent,omitempty"`
				SonarPreviewExcludePlugins                             *string `json:"sonar.preview.excludePlugins,omitempty"`
				SonarReportDashboardName                               *string `json:"sonar.report.dashboard.name,omitempty"`
				SonarReportFrequency                                   *string `json:"sonar.report.frequency,omitempty"`
				SonarReportIgnoreSslErrors                             *string `json:"sonar.report.ignoreSslErrors,omitempty"`
				SonarReportLastDate                                    *string `json:"sonar.report.last_date,omitempty"`
				SonarReportLastDateDevReport                           *string `json:"sonar.report.last_date.dev_report,omitempty"`
				SonarReportLastDateManagementReport                    *string `json:"sonar.report.last_date.management_report,omitempty"`
				SonarReportLogin                                       *string `json:"sonar.report.login,omitempty"`
				SonarReportSubject                                     *string `json:"sonar.report.subject,omitempty"`
				SonarReports                                           *string `json:"sonar.reports,omitempty"`
				SonarScmDisabled                                       *string `json:"sonar.scm.disabled,omitempty"`
				SonarScmEnabled                                        *string `json:"sonar.scm.enabled,omitempty"`
				SonarSearchHost                                        *string `json:"sonar.search.host,omitempty"`
				SonarSearchJavaAdditionalOpts                          *string `json:"sonar.search.javaAdditionalOpts,omitempty"`
				SonarSearchJavaOpts                                    *string `json:"sonar.search.javaOpts,omitempty"`
				SonarSearchPort                                        *string `json:"sonar.search.port,omitempty"`
				SonarTechnicalDebtRatingGrid                           *string `json:"sonar.technicalDebt.ratingGrid,omitempty"`
				SonarTelemetryCompression                              *string `json:"sonar.telemetry.compression,omitempty"`
				SonarTelemetryEnable                                   *string `json:"sonar.telemetry.enable,omitempty"`
				SonarTelemetryFrequencyInSeconds                       *string `json:"sonar.telemetry.frequencyInSeconds,omitempty"`
				SonarTelemetryUrl                                      *string `json:"sonar.telemetry.url,omitempty"`
				SonarUpdatecenterActivate                              *string `json:"sonar.updatecenter.activate,omitempty"`
				SonarWebGracefulStopTimeOutInMs                        *string `json:"sonar.web.gracefulStopTimeOutInMs,omitempty"`
				SonarWebJavaAdditionalOpts                             *string `json:"sonar.web.javaAdditionalOpts,omitempty"`
				SonarWebJavaOpts                                       *string `json:"sonar.web.javaOpts,omitempty"`
				SonarWebSsoEmailHeader                                 *string `json:"sonar.web.sso.emailHeader,omitempty"`
				SonarWebSsoEnable                                      *string `json:"sonar.web.sso.enable,omitempty"`
				SonarWebSsoGroupsHeader                                *string `json:"sonar.web.sso.groupsHeader,omitempty"`
				SonarWebSsoLoginHeader                                 *string `json:"sonar.web.sso.loginHeader,omitempty"`
				SonarWebSsoNameHeader                                  *string `json:"sonar.web.sso.nameHeader,omitempty"`
				SonarWebSsoRefreshIntervalInMinutes                    *string `json:"sonar.web.sso.refreshIntervalInMinutes,omitempty"`
			} `json:"Settings,omitempty"`
			System *struct {
				AcceptedExternalIdentityProviders                               *string `json:"Accepted external identity providers,omitempty"`
				DataDir                                                         *string `json:"Data Dir,omitempty"`
				Docker                                                          *bool   `json:"Docker,omitempty"`
				Edition                                                         *string `json:"Edition,omitempty"`
				ExternalIdentityProvidersWhoseUsersAreAllowedToSignThemselvesUp *string `json:"External identity providers whose users are allowed to sign themselves up,omitempty"`
				ForceAuthentication                                             *bool   `json:"Force authentication,omitempty"`
				HighAvailability                                                *bool   `json:"High Availability,omitempty"`
				HomeDir                                                         *string `json:"Home Dir,omitempty"`
				OfficialDistribution                                            *bool   `json:"Official Distribution,omitempty"`
				Processors                                                      *int    `json:"Processors,omitempty"`
				ServerID                                                        *string `json:"Server ID,omitempty"`
				TempDir                                                         *string `json:"Temp Dir,omitempty"`
				Version                                                         *string `json:"Version,omitempty"`
			} `json:"System,omitempty"`
			WebDatabaseConnection *struct {
				PoolActiveConnections  *int `json:"Pool Active Connections,omitempty"`
				PoolIdleConnections    *int `json:"Pool Idle Connections,omitempty"`
				PoolMaxConnections     *int `json:"Pool Max Connections,omitempty"`
				PoolMaxLifetimeMs      *int `json:"Pool Max Lifetime (ms),omitempty"`
				PoolMaxWaitMs          *int `json:"Pool Max Wait (ms),omitempty"`
				PoolMinIdleConnections *int `json:"Pool Min Idle Connections,omitempty"`
				PoolTotalConnections   *int `json:"Pool Total Connections,omitempty"`
			} `json:"Web Database Connection,omitempty"`
			WebJVMProperties *struct {
				AwtToolkit                                      *string `json:"awt.toolkit,omitempty"`
				CatalinaBase                                    *string `json:"catalina.base,omitempty"`
				CatalinaHome                                    *string `json:"catalina.home,omitempty"`
				CatalinaUseNaming                               *string `json:"catalina.useNaming,omitempty"`
				ComRedhatFips                                   *string `json:"com.redhat.fips,omitempty"`
				ComZaxxerHikariPoolNumber                       *string `json:"com.zaxxer.hikari.pool_number,omitempty"`
				FileEncoding                                    *string `json:"file.encoding,omitempty"`
				FileSeparator                                   *string `json:"file.separator,omitempty"`
				FtpNonProxyHosts                                *string `json:"ftp.nonProxyHosts,omitempty"`
				GopherProxySet                                  *string `json:"gopherProxySet,omitempty"`
				HttpAgent                                       *string `json:"http.agent,omitempty"`
				HttpNonProxyHosts                               *string `json:"http.nonProxyHosts,omitempty"`
				JavaAwtGraphicsenv                              *string `json:"java.awt.graphicsenv,omitempty"`
				JavaAwtHeadless                                 *string `json:"java.awt.headless,omitempty"`
				JavaAwtPrinterjob                               *string `json:"java.awt.printerjob,omitempty"`
				JavaClassPath                                   *string `json:"java.class.path,omitempty"`
				JavaClassVersion                                *string `json:"java.class.version,omitempty"`
				JavaHome                                        *string `json:"java.home,omitempty"`
				JavaIoTmpdir                                    *string `json:"java.io.tmpdir,omitempty"`
				JavaLibraryPath                                 *string `json:"java.library.path,omitempty"`
				JavaRuntimeName                                 *string `json:"java.runtime.name,omitempty"`
				JavaRuntimeVersion                              *string `json:"java.runtime.version,omitempty"`
				JavaSpecificationName                           *string `json:"java.specification.name,omitempty"`
				JavaSpecificationVendor                         *string `json:"java.specification.vendor,omitempty"`
				JavaSpecificationVersion                        *string `json:"java.specification.version,omitempty"`
				JavaVendor                                      *string `json:"java.vendor,omitempty"`
				JavaVendorUrl                                   *string `json:"java.vendor.url,omitempty"`
				JavaVendorUrlBug                                *string `json:"java.vendor.url.bug,omitempty"`
				JavaVendorVersion                               *string `json:"java.vendor.version,omitempty"`
				JavaVersion                                     *string `json:"java.version,omitempty"`
				JavaVersionDate                                 *string `json:"java.version.date,omitempty"`
				JavaVmCompressedOopsMode                        *string `json:"java.vm.compressedOopsMode,omitempty"`
				JavaVmInfo                                      *string `json:"java.vm.info,omitempty"`
				JavaVmName                                      *string `json:"java.vm.name,omitempty"`
				JavaVmSpecificationName                         *string `json:"java.vm.specification.name,omitempty"`
				JavaVmSpecificationVendor                       *string `json:"java.vm.specification.vendor,omitempty"`
				JavaVmSpecificationVersion                      *string `json:"java.vm.specification.version,omitempty"`
				JavaVmVendor                                    *string `json:"java.vm.vendor,omitempty"`
				JavaVmVersion                                   *string `json:"java.vm.version,omitempty"`
				JdkDebug                                        *string `json:"jdk.debug,omitempty"`
				JdkVendorVersion                                *string `json:"jdk.vendor.version,omitempty"`
				LineSeparator                                   *string `json:"line.separator,omitempty"`
				LogbackDisableServletContainerInitializer       *string `json:"logbackDisableServletContainerInitializer,omitempty"`
				OrgApacheCatalinaStartupEXITONINITFAILURE       *string `json:"org.apache.catalina.startup.EXIT_ON_INIT_FAILURE,omitempty"`
				OrgApacheTomcatUtilBufUDecoderALLOWENCODEDSLASH *string `json:"org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH,omitempty"`
				OsArch                                          *string `json:"os.arch,omitempty"`
				OsName                                          *string `json:"os.name,omitempty"`
				OsVersion                                       *string `json:"os.version,omitempty"`
				PathSeparator                                   *string `json:"path.separator,omitempty"`
				SocksNonProxyHosts                              *string `json:"socksNonProxyHosts,omitempty"`
				SunArchDataModel                                *string `json:"sun.arch.data.model,omitempty"`
				SunBootLibraryPath                              *string `json:"sun.boot.library.path,omitempty"`
				SunCpuEndian                                    *string `json:"sun.cpu.endian,omitempty"`
				SunCpuIsalist                                   *string `json:"sun.cpu.isalist,omitempty"`
				SunFontFontmanager                              *string `json:"sun.font.fontmanager,omitempty"`
				SunIoUnicodeEncoding                            *string `json:"sun.io.unicode.encoding,omitempty"`
				SunJavaCommand                                  *string `json:"sun.java.command,omitempty"`
				SunJavaLauncher                                 *string `json:"sun.java.launcher,omitempty"`
				SunJnuEncoding                                  *string `json:"sun.jnu.encoding,omitempty"`
				SunManagementCompiler                           *string `json:"sun.management.compiler,omitempty"`
				SunOsPatchLevel                                 *string `json:"sun.os.patch.level,omitempty"`
				UserCountry                                     *string `json:"user.country,omitempty"`
				UserDir                                         *string `json:"user.dir,omitempty"`
				UserHome                                        *string `json:"user.home,omitempty"`
				UserLanguage                                    *string `json:"user.language,omitempty"`
				UserName                                        *string `json:"user.name,omitempty"`
				UserTimezone                                    *string `json:"user.timezone,omitempty"`
			} `json:"Web JVM Properties,omitempty"`
			WebJVMState *struct {
				FreeMemoryMB       *int    `json:"Free Memory (MB),omitempty"`
				HeapCommittedMB    *int    `json:"Heap Committed (MB),omitempty"`
				HeapInitMB         *int    `json:"Heap Init (MB),omitempty"`
				HeapMaxMB          *int    `json:"Heap Max (MB),omitempty"`
				HeapUsedMB         *int    `json:"Heap Used (MB),omitempty"`
				MaxMemoryMB        *int    `json:"Max Memory (MB),omitempty"`
				NonHeapCommittedMB *int    `json:"Non Heap Committed (MB),omitempty"`
				NonHeapInitMB      *int    `json:"Non Heap Init (MB),omitempty"`
				NonHeapUsedMB      *int    `json:"Non Heap Used (MB),omitempty"`
				SystemLoadAverage  *string `json:"System Load Average,omitempty"`
				Threads            *int    `json:"Threads,omitempty"`
			} `json:"Web JVM State,omitempty"`
			WebLogging *struct {
				LogsDir   *string `json:"Logs Dir,omitempty"`
				LogsLevel *string `json:"Logs Level,omitempty"`
			} `json:"Web Logging,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiSystemLogsResponse parses an HTTP response from a ApiSystemLogsWithResponse call
func ParseApiSystemLogsResponse(rsp *http.Response) (*ApiSystemLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiSystemLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiSystemMigrateDbResponse parses an HTTP response from a ApiSystemMigrateDbWithResponse call
func ParseApiSystemMigrateDbResponse(rsp *http.Response) (*ApiSystemMigrateDbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiSystemMigrateDbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Message   *string `json:"message,omitempty"`
			StartedAt *string `json:"startedAt,omitempty"`
			State     *string `json:"state,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiSystemPingResponse parses an HTTP response from a ApiSystemPingWithResponse call
func ParseApiSystemPingResponse(rsp *http.Response) (*ApiSystemPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiSystemPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiSystemRestartResponse parses an HTTP response from a ApiSystemRestartWithResponse call
func ParseApiSystemRestartResponse(rsp *http.Response) (*ApiSystemRestartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiSystemRestartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiSystemStatusResponse parses an HTTP response from a ApiSystemStatusWithResponse call
func ParseApiSystemStatusResponse(rsp *http.Response) (*ApiSystemStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiSystemStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Id      *string `json:"id,omitempty"`
			Status  *string `json:"status,omitempty"`
			Version *string `json:"version,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiSystemUpgradesResponse parses an HTTP response from a ApiSystemUpgradesWithResponse call
func ParseApiSystemUpgradesResponse(rsp *http.Response) (*ApiSystemUpgradesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiSystemUpgradesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			LatestLTS           *string `json:"latestLTS,omitempty"`
			UpdateCenterRefresh *string `json:"updateCenterRefresh,omitempty"`
			Upgrades            *[]struct {
				ChangeLogUrl *string `json:"changeLogUrl,omitempty"`
				Description  *string `json:"description,omitempty"`
				DownloadUrl  *string `json:"downloadUrl,omitempty"`
				Plugins      *struct {
					Incompatible *[]struct {
						Category         *string `json:"category,omitempty"`
						Description      *string `json:"description,omitempty"`
						EditionBundled   *bool   `json:"editionBundled,omitempty"`
						Key              *string `json:"key,omitempty"`
						License          *string `json:"license,omitempty"`
						Name             *string `json:"name,omitempty"`
						OrganizationName *string `json:"organizationName,omitempty"`
						OrganizationUrl  *string `json:"organizationUrl,omitempty"`
					} `json:"incompatible,omitempty"`
					RequireUpdate *[]struct {
						Category              *string `json:"category,omitempty"`
						Description           *string `json:"description,omitempty"`
						EditionBundled        *bool   `json:"editionBundled,omitempty"`
						Key                   *string `json:"key,omitempty"`
						License               *string `json:"license,omitempty"`
						Name                  *string `json:"name,omitempty"`
						OrganizationName      *string `json:"organizationName,omitempty"`
						OrganizationUrl       *string `json:"organizationUrl,omitempty"`
						TermsAndConditionsUrl *string `json:"termsAndConditionsUrl,omitempty"`
						Version               *string `json:"version,omitempty"`
					} `json:"requireUpdate,omitempty"`
				} `json:"plugins,omitempty"`
				ReleaseDate *string `json:"releaseDate,omitempty"`
				Version     *string `json:"version,omitempty"`
			} `json:"upgrades,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiUserGroupsAddUserResponse parses an HTTP response from a ApiUserGroupsAddUserWithResponse call
func ParseApiUserGroupsAddUserResponse(rsp *http.Response) (*ApiUserGroupsAddUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUserGroupsAddUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiUserGroupsCreateResponse parses an HTTP response from a ApiUserGroupsCreateWithResponse call
func ParseApiUserGroupsCreateResponse(rsp *http.Response) (*ApiUserGroupsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUserGroupsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Group *struct {
				Default      *bool   `json:"default,omitempty"`
				Description  *string `json:"description,omitempty"`
				Id           *string `json:"id,omitempty"`
				MembersCount *int    `json:"membersCount,omitempty"`
				Name         *string `json:"name,omitempty"`
				Organization *string `json:"organization,omitempty"`
			} `json:"group,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiUserGroupsDeleteResponse parses an HTTP response from a ApiUserGroupsDeleteWithResponse call
func ParseApiUserGroupsDeleteResponse(rsp *http.Response) (*ApiUserGroupsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUserGroupsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiUserGroupsRemoveUserResponse parses an HTTP response from a ApiUserGroupsRemoveUserWithResponse call
func ParseApiUserGroupsRemoveUserResponse(rsp *http.Response) (*ApiUserGroupsRemoveUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUserGroupsRemoveUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiUserGroupsSearchResponse parses an HTTP response from a ApiUserGroupsSearchWithResponse call
func ParseApiUserGroupsSearchResponse(rsp *http.Response) (*ApiUserGroupsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUserGroupsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Groups *[]struct {
				Default      *bool   `json:"default,omitempty"`
				Description  *string `json:"description,omitempty"`
				Id           *string `json:"id,omitempty"`
				MembersCount *int    `json:"membersCount,omitempty"`
				Name         *string `json:"name,omitempty"`
			} `json:"groups,omitempty"`
			Paging *struct {
				PageIndex *int `json:"pageIndex,omitempty"`
				PageSize  *int `json:"pageSize,omitempty"`
				Total     *int `json:"total,omitempty"`
			} `json:"paging,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiUserGroupsUpdateResponse parses an HTTP response from a ApiUserGroupsUpdateWithResponse call
func ParseApiUserGroupsUpdateResponse(rsp *http.Response) (*ApiUserGroupsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUserGroupsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiUserGroupsUsersResponse parses an HTTP response from a ApiUserGroupsUsersWithResponse call
func ParseApiUserGroupsUsersResponse(rsp *http.Response) (*ApiUserGroupsUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUserGroupsUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Paging *struct {
				PageIndex *int `json:"pageIndex,omitempty"`
				PageSize  *int `json:"pageSize,omitempty"`
				Total     *int `json:"total,omitempty"`
			} `json:"paging,omitempty"`
			Users *[]struct {
				Login    *string `json:"login,omitempty"`
				Name     *string `json:"name,omitempty"`
				Selected *bool   `json:"selected,omitempty"`
			} `json:"users,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiUserTokensGenerateResponse parses an HTTP response from a ApiUserTokensGenerateWithResponse call
func ParseApiUserTokensGenerateResponse(rsp *http.Response) (*ApiUserTokensGenerateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUserTokensGenerateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			CreatedAt      *string `json:"createdAt,omitempty"`
			ExpirationDate *string `json:"expirationDate,omitempty"`
			Login          *string `json:"login,omitempty"`
			Name           *string `json:"name,omitempty"`
			Token          *string `json:"token,omitempty"`
			Type           *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiUserTokensRevokeResponse parses an HTTP response from a ApiUserTokensRevokeWithResponse call
func ParseApiUserTokensRevokeResponse(rsp *http.Response) (*ApiUserTokensRevokeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUserTokensRevokeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiUserTokensSearchResponse parses an HTTP response from a ApiUserTokensSearchWithResponse call
func ParseApiUserTokensSearchResponse(rsp *http.Response) (*ApiUserTokensSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUserTokensSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Login      *string `json:"login,omitempty"`
			UserTokens *[]struct {
				CreatedAt *string `json:"createdAt,omitempty"`
				Name      *string `json:"name,omitempty"`
				Type      *string `json:"type,omitempty"`
			} `json:"userTokens,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiUsersAnonymizeResponse parses an HTTP response from a ApiUsersAnonymizeWithResponse call
func ParseApiUsersAnonymizeResponse(rsp *http.Response) (*ApiUsersAnonymizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUsersAnonymizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiUsersChangePasswordResponse parses an HTTP response from a ApiUsersChangePasswordWithResponse call
func ParseApiUsersChangePasswordResponse(rsp *http.Response) (*ApiUsersChangePasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUsersChangePasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiUsersCreateResponse parses an HTTP response from a ApiUsersCreateWithResponse call
func ParseApiUsersCreateResponse(rsp *http.Response) (*ApiUsersCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUsersCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			User *struct {
				Active      *bool     `json:"active,omitempty"`
				Email       *string   `json:"email,omitempty"`
				Local       *bool     `json:"local,omitempty"`
				Login       *string   `json:"login,omitempty"`
				Name        *string   `json:"name,omitempty"`
				ScmAccounts *[]string `json:"scmAccounts,omitempty"`
			} `json:"user,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiUsersDeactivateResponse parses an HTTP response from a ApiUsersDeactivateWithResponse call
func ParseApiUsersDeactivateResponse(rsp *http.Response) (*ApiUsersDeactivateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUsersDeactivateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			User *struct {
				Active      *bool     `json:"active,omitempty"`
				Groups      *[]string `json:"groups,omitempty"`
				Local       *bool     `json:"local,omitempty"`
				Login       *string   `json:"login,omitempty"`
				Name        *string   `json:"name,omitempty"`
				ScmAccounts *[]string `json:"scmAccounts,omitempty"`
			} `json:"user,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiUsersDismissSonarlintAdResponse parses an HTTP response from a ApiUsersDismissSonarlintAdWithResponse call
func ParseApiUsersDismissSonarlintAdResponse(rsp *http.Response) (*ApiUsersDismissSonarlintAdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUsersDismissSonarlintAdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiUsersGroupsResponse parses an HTTP response from a ApiUsersGroupsWithResponse call
func ParseApiUsersGroupsResponse(rsp *http.Response) (*ApiUsersGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUsersGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Groups *[]struct {
				Default     *bool   `json:"default,omitempty"`
				Description *string `json:"description,omitempty"`
				Id          *string `json:"id,omitempty"`
				Name        *string `json:"name,omitempty"`
				Selected    *bool   `json:"selected,omitempty"`
			} `json:"groups,omitempty"`
			Paging *struct {
				PageIndex *int `json:"pageIndex,omitempty"`
				PageSize  *int `json:"pageSize,omitempty"`
				Total     *int `json:"total,omitempty"`
			} `json:"paging,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiUsersSearchResponse parses an HTTP response from a ApiUsersSearchWithResponse call
func ParseApiUsersSearchResponse(rsp *http.Response) (*ApiUsersSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUsersSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Paging *struct {
				PageIndex *int `json:"pageIndex,omitempty"`
				PageSize  *int `json:"pageSize,omitempty"`
				Total     *int `json:"total,omitempty"`
			} `json:"paging,omitempty"`
			Users *[]struct {
				Active           *bool     `json:"active,omitempty"`
				Avatar           *string   `json:"avatar,omitempty"`
				Email            *string   `json:"email,omitempty"`
				ExternalIdentity *string   `json:"externalIdentity,omitempty"`
				ExternalProvider *string   `json:"externalProvider,omitempty"`
				Groups           *[]string `json:"groups,omitempty"`
				Local            *bool     `json:"local,omitempty"`
				Login            *string   `json:"login,omitempty"`
				Name             *string   `json:"name,omitempty"`
				TokensCount      *int      `json:"tokensCount,omitempty"`
			} `json:"users,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiUsersUpdateResponse parses an HTTP response from a ApiUsersUpdateWithResponse call
func ParseApiUsersUpdateResponse(rsp *http.Response) (*ApiUsersUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUsersUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			User *struct {
				Active      *bool     `json:"active,omitempty"`
				Email       *string   `json:"email,omitempty"`
				Local       *bool     `json:"local,omitempty"`
				Login       *string   `json:"login,omitempty"`
				Name        *string   `json:"name,omitempty"`
				ScmAccounts *[]string `json:"scmAccounts,omitempty"`
			} `json:"user,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiUsersUpdateIdentityProviderResponse parses an HTTP response from a ApiUsersUpdateIdentityProviderWithResponse call
func ParseApiUsersUpdateIdentityProviderResponse(rsp *http.Response) (*ApiUsersUpdateIdentityProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUsersUpdateIdentityProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiUsersUpdateLoginResponse parses an HTTP response from a ApiUsersUpdateLoginWithResponse call
func ParseApiUsersUpdateLoginResponse(rsp *http.Response) (*ApiUsersUpdateLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUsersUpdateLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiWebhooksCreateResponse parses an HTTP response from a ApiWebhooksCreateWithResponse call
func ParseApiWebhooksCreateResponse(rsp *http.Response) (*ApiWebhooksCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiWebhooksCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Webhook *struct {
				HasSecret *bool   `json:"hasSecret,omitempty"`
				Key       *string `json:"key,omitempty"`
				Name      *string `json:"name,omitempty"`
				Url       *string `json:"url,omitempty"`
			} `json:"webhook,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiWebhooksDeleteResponse parses an HTTP response from a ApiWebhooksDeleteWithResponse call
func ParseApiWebhooksDeleteResponse(rsp *http.Response) (*ApiWebhooksDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiWebhooksDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiWebhooksDeliveriesResponse parses an HTTP response from a ApiWebhooksDeliveriesWithResponse call
func ParseApiWebhooksDeliveriesResponse(rsp *http.Response) (*ApiWebhooksDeliveriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiWebhooksDeliveriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Deliveries *[]struct {
				At           *string `json:"at,omitempty"`
				CeTaskId     *string `json:"ceTaskId,omitempty"`
				ComponentKey *string `json:"componentKey,omitempty"`
				DurationMs   *int    `json:"durationMs,omitempty"`
				HttpStatus   *int    `json:"httpStatus,omitempty"`
				Id           *string `json:"id,omitempty"`
				Name         *string `json:"name,omitempty"`
				Success      *bool   `json:"success,omitempty"`
				Url          *string `json:"url,omitempty"`
			} `json:"deliveries,omitempty"`
			Paging *struct {
				PageIndex *int `json:"pageIndex,omitempty"`
				PageSize  *int `json:"pageSize,omitempty"`
				Total     *int `json:"total,omitempty"`
			} `json:"paging,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiWebhooksDeliveryResponse parses an HTTP response from a ApiWebhooksDeliveryWithResponse call
func ParseApiWebhooksDeliveryResponse(rsp *http.Response) (*ApiWebhooksDeliveryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiWebhooksDeliveryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Delivery *struct {
				At           *string `json:"at,omitempty"`
				CeTaskId     *string `json:"ceTaskId,omitempty"`
				ComponentKey *string `json:"componentKey,omitempty"`
				DurationMs   *int    `json:"durationMs,omitempty"`
				HttpStatus   *int    `json:"httpStatus,omitempty"`
				Id           *string `json:"id,omitempty"`
				Name         *string `json:"name,omitempty"`
				Payload      *string `json:"payload,omitempty"`
				Success      *bool   `json:"success,omitempty"`
				Url          *string `json:"url,omitempty"`
			} `json:"delivery,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiWebhooksListResponse parses an HTTP response from a ApiWebhooksListWithResponse call
func ParseApiWebhooksListResponse(rsp *http.Response) (*ApiWebhooksListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiWebhooksListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Webhooks *[]struct {
				HasSecret *bool   `json:"hasSecret,omitempty"`
				Key       *string `json:"key,omitempty"`
				Name      *string `json:"name,omitempty"`
				Url       *string `json:"url,omitempty"`
			} `json:"webhooks,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiWebhooksUpdateResponse parses an HTTP response from a ApiWebhooksUpdateWithResponse call
func ParseApiWebhooksUpdateResponse(rsp *http.Response) (*ApiWebhooksUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiWebhooksUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiWebservicesListResponse parses an HTTP response from a ApiWebservicesListWithResponse call
func ParseApiWebservicesListResponse(rsp *http.Response) (*ApiWebservicesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiWebservicesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			WebServices *[]struct {
				Actions *[]struct {
					Changelog *[]struct {
						Description *string `json:"description,omitempty"`
						Version     *string `json:"version,omitempty"`
					} `json:"changelog,omitempty"`
					DeprecatedSince    *string `json:"deprecatedSince,omitempty"`
					Description        *string `json:"description,omitempty"`
					HasResponseExample *bool   `json:"hasResponseExample,omitempty"`
					Internal           *bool   `json:"internal,omitempty"`
					Key                *string `json:"key,omitempty"`
					Params             *[]struct {
						Internal     *bool   `json:"internal,omitempty"`
						Key          *string `json:"key,omitempty"`
						MaximumValue *int    `json:"maximumValue,omitempty"`
						Required     *bool   `json:"required,omitempty"`
					} `json:"params,omitempty"`
					Post  *bool   `json:"post,omitempty"`
					Since *string `json:"since,omitempty"`
				} `json:"actions,omitempty"`
				Description *string `json:"description,omitempty"`
				Path        *string `json:"path,omitempty"`
				Since       *string `json:"since,omitempty"`
			} `json:"webServices,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiWebservicesResponseExampleResponse parses an HTTP response from a ApiWebservicesResponseExampleWithResponse call
func ParseApiWebservicesResponseExampleResponse(rsp *http.Response) (*ApiWebservicesResponseExampleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiWebservicesResponseExampleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			Example *string `json:"example,omitempty"`
			Format  *string `json:"format,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *[]struct {
				Msg *string `json:"msg,omitempty"`
			} `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
